How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

IntroductionWe are committed to maintaining a respectful and inclusive community.By participating, you agree to uphold the principles outlined here to ensure a positive experience for everyone.Expected Behavior-Be respectful to all participants and their contributions.- Provide constructive feedback and engage in discussions thoughtfully.- Respect differing viewpoints and experiences.Reporting IssuesTo report violations, please contact our team at [support@example.com](mailto:support@example.com).Include details about the incident and any relevant context.All reports will be handled with confidentiality.

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

IntroductionWe are committed to maintaining a respectful and inclusive community.By participating, you agree to uphold the principles outlined here to ensure a positive experience for everyone.Expected Behavior-Be respectful to all participants and their contributions.- Provide constructive feedback and engage in discussions thoughtfully.- Respect differing viewpoints and experiences.Reporting IssuesTo report violations, please contact our team at [support@example.com](mailto:support@example.com).Include details about the incident and any relevant context.All reports will be handled with confidentiality.

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine.However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as "contributor access", "being a member of the flutter-hackers group", "being a member of the Flutter team").We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter.Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.The possible criteria are:-You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)).(This is rare.)Being granted access means that you will be added to the "flutter-hackers" group on GitHub and the "team" role on Discord.This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md).A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues.We grant access optimistically based on a reasonably small volume of evidence of good faith.Correspondingly, we will remove access quickly if we find our trust has been violated.Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously.(Please read it, it's stricter than most.)Responsibilities
Code of conductIf you have commit access or "team" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).Our code of conduct is much, much stricter than most.We do not wait until someone has been actively rude or insulting.Being disrespectful in any way is grounds for action.For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct.If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day.When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.Most people react very positively to this.If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment.On Discord, this would be kicking them from the channel.Repeat offenders should be banned.On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this).Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.Maintaining documentation
Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.If you spot something wrong, please fix it!As a contributor, you have access to the wiki.Privileges
Being in the GitHub "flutter-hackers" group gives you the following:-The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).- PRs will run their tests slightly faster.Being in the Discord "team" group gives you the following:-The ability to talk without rate-limiting on the #hackers-* channels.- The ability to kick people.- The ability to manage the server emoji.ProcessThe actual process (as followed by Flutter repo admins) is as follows:- Verify that they qualify under all the terms described above.Make sure they have a sponsor who isn't you.- Verify the identity of the person making the request.Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.- Add them to our private spreadsheet (go/flutter-organization-members).- Click the "Add a member" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.- Type their name in the text field, select them, then click the "Invite" button.- Add them to the "team" group on Discord.Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!For new Googlers joining the team:You need to ask someone in the team to add you to get added.It's not an automatic process after you join the flutter Google group.InactivityWe occasionally check for account with commit access that have not been used for a while.It takes very little to count as "active" (e.g. commenting on an issue, even adding an emoji reaction to an issue).If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access.If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.Access rights to Flutter dashboardThe [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits.To see rerun tasks, you need to be added to an allowlist.Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored.To get access, ask on #hackers-infra to be added to the allowlist.Adding a contributor to Flutter DashboardThis is only for team members with access to the Flutter Dashboard Datastore.- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)- Click `Create Entity`- Click `Email: Empty` ->Edit property.Insert contributor Google account- Click `Create`Access to LUCI recipes and configuration repositoriesIf you need access to the LUCI recipes, you need to be added to the relevant ACLs.Ask in #hackers-infra to be added to the LUCI ACLs.Process
A Googler has to be the one to grant permission.Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)Access to Flutter GoldIf you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user.Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.ProcessThe list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5).Googlers can submit a change to add to the authorized users.This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)
fcontrib.org accountsIf you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account.Ping @Hixie or another admin in the #server-support channel on Discord.ProcessYou’ll need the user’s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin.To add a fcontrib.org participant:- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)- Under “Users” in the upper left of the main content area, click “Add a User” and follow the prompts.- For a password, choose “Generate Password” and email the password to the new account holder using their non-fcontrib account -- they’ll be able to log in with that and then choose a new password.Review teams
Some parts of the codebase have teams specified so that PRs get round-robin assigned for review.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).We currently have the following review teams:- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions.To create a new team, contact @Hixie.You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.Pusher permissions
Some branches are protected to avoid accidents.Only people in the specific branches can push to them.Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia

--------------------------------

Chatting on Discord
 raw HTML omitted 
The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148).[This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH).Please do not share either link directly, instead share links to this page.The server is open to the public, though some channels are intended only for people who are actively contributing.See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there).We recommend you use the same display name on Discord and GitHub.(Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on.When in doubt, remember: our server has Dash as an icon!)Existing channelsWe have different channels for different purposes (this list is not exhaustive):
Channel
Description
Participants
#welcome
Welcome message.Only admins can post.raw HTML omitted Anyone can read.#announcements
Flutter announcements (e.g. breaking changes).Only team members can post (but not frequently).raw HTML omitted Anyone can read.#server-support
Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues.Anyone.#general
Chat about anything related to Flutter.Anyone.#help
People asking for our help.Anyone.#package-authorsFor people who develop Flutter packages.People writing packages for [pub.dev](https://pub.dev/).#dart
Questions about the Dart language.Anyone.#tree-status
Announcements about whether the trees are open or closed.Anyone, but discussion should happen elsewhere.#hackers
Chat about anything related to Flutter.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-*Chat specifically about foo, where foo is something to do with Flutter development, for example "engine", "framework", "desktop", "devtools", etc.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-dart
Questions about the Dart language.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-new
New people to the team and people who want to help them.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-triageFor use while triaging bugs.Flutter contributors.raw HTML omitted Anyone can watch.#hidden-chat
Chat about anything related to Flutter.Flutter contributors only.raw HTML omitted Not public.general (voice)
Talk (audio) about anything related to Flutter.Anyone.team (voice)
Talk (audio) that is only open to team members.Flutter contributors.The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the "team member" role to see them.New channelsIf you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support.If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads.If you would like a channel for subcommunities, e.g. #women or #china, that should be fine.(Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.)For practical reasons, we do not use Discord for chat groups limited to specific customers.For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord.Each channel describes its topic in the channel description.Please read the channel description before posting in a channel, to make sure you're using the appropriate one.Policies
Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter.The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing.If you want help with your app, ask in #help instead.If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md).See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the "team" role.Please don't direct-message people unless they are comfortable with it (ask publicly first).You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.Discord features
Threading
Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.StatusYou can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.Design documentsThis page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).

--------------------------------

raw HTML omitted 
Code of conduct
The Flutter project expects Flutter's contributors to act professionally
and respectfully.Flutter contributors are expected to maintain the safety
and dignity of Flutter's social environments (such as GitHub and Discord).Specifically:- Respect people, their identities, their culture, and their work.- Be kind.Be courteous.Be welcoming.- Listen.Consider and acknowledge people's points before responding.Should you experience anything that makes you feel unwelcome in Flutter's
community, please contact [conduct@flutter.dev](mailto:conduct@flutter.dev)
or, if you prefer, directly contact someone on the project, for instance
[Hixie](mailto:ian@hixie.ch).The Flutter project will not tolerate harassment in Flutter's
community, even outside of Flutter's public communication channels.Conflict resolutionWhen multiple contributors disagree on the direction for a particular
patch or the general direction of the project, the conflict should be
resolved by communication.The people who disagree should get
together, try to understand each other's points of view, and work to
find a design that addresses everyone's concerns.This is usually sufficient to resolve issues.If you cannot come to an
agreement, ask for the advice of a more senior member of the project.Be wary of agreement by attrition, where one person argues a point
repeatedly until other participants give up in the interests of moving
on.This is not conflict resolution, as it does not address everyone's
concerns.Be wary of agreement by compromise, where two good competing
solutions are merged into one mediocre solution.A conflict is
addressed when the participants agree that the final solution is
better than all the conflicting proposals.Sometimes the solution is
more work than either of the proposals.[Embrace the yak shave](./docs/contributing/Style-guide-for-Flutter-repo.md#lazy-programming).QuestionsIt's always ok to ask questions.Our systems are large, and nobody will be
an expert in all the systems.Once you find the answer, document it in
the first place you looked.That way, the next person will be brought
up to speed even quicker.Source: [xkcd, May 2012](https://xkcd.com/1053/)

--------------------------------

Flutter's core values
🏗️ Build the best way to develop user interfaces.This tells us what we are creating.It helps narrow our focus.The best way to develop user interfaces is a productive way of developing.The best way to develop user interfaces creates beautiful applications.The best way to develop user interfaces creates fast applications.The best way to develop user interfaces enables developers to create applications fast.The best way to develop user interfaces is extensible, so that we are not a barrier to developers.🔎 Focus on the user and all else will follow.Our user is the developer.Our developer's user is the end user of the application written with Flutter.Our first priority is to our developer's user, the end user.Our second priority is to our user, the developer.Caring about the end user means having high quality support for accessibility, top performance, stability, high fidelity and compatibility with the user's platform, supporting low-end devices, and so forth.Caring about the developer means creating a joyful and productive development experience with quick iteration cycles, creating usable, simple, reliable, predictable APIs, giving the developer full access to the underlying platform, and so forth.We respect our users, whoever they are.Another way to phrase this is "Build a thing people want".📖 Openness
Flutter is an open source project, in the full senses of the word: we are open to ideas, we are open to contributions, our code and our roadmap are open, our priorities are open.Transparency leads to a higher quality product.While the most active part of our team is currently primarily formed of employees from Google, we are growing and welcome anyone to join the team; at this point, the majority of people with commit access are not part of Google's Flutter team.Flutter's stewardship is managed by a team at Google.💫 Maintaining quality
A mediocre product cannot be the best way to develop user interfaces, so we must build processes around maintaining high levels of quality.This manifests in various ways.One is that we are feature-driven, not date-driven: we do not plan work based on deadlines.We may sometimes host events where we announce new features, but these events will announce features that have become available, rather than the features becoming available in order to be announced.This means sometimes a feature we intended to announce will slip and not be announced, but we prefer this to announcing a rushed feature.We may sometimes gate features behind flags until we are confident of their quality.🤣‬Have fun doing it
Last, but definitely not least, we want to make sure that our work environment is pleasant for everyone involved.Your health and the health of your family and friends is more important than Flutter.Our community [is welcoming](../../CODE_OF_CONDUCT.md).We don't know everything; all of us can make mistakes.We want team members to feel empowered to make changes to the code and to our processes.We encourage a bias towards action.It's better to try something and be wrong, than to plan forever and never execute.SupportWhen we think about whether we claim to "support" something, e.g. whether Flutter supports Windows 7, we use the following frame of reference.We document [which platforms we consider to fall into each category](https://docs.flutter.dev/reference/supported-platforms) on flutter.dev.Areas of supportWe distinguish several categories along which one can describe a level of support:- Supporting for deployment (we support a platform for deployment if you can run release builds of applications on that platform).- Supporting for development (we support a platform for development if you can run debug builds of applications on that platform, connect them to a debugger, hot reload, view logs, and so forth; we support a plugin for development if it can be stepped through in a debugger).- Supporting for hosting development (we support a platform for hosting development if it is one on which you can compile a Flutter application; we support an IDE for hosting development if it has a Flutter plugin).- Supporting for Flutter development (we support a platform for Flutter development if one can contribute to Flutter itself from that platform).The list of supported platforms on flutter.dev is describing the platforms supported for deployment.Levels of supportFor each area, we consider the level to which we provide support:-We will literally help you with your code if things don't work.This is very rare.(See also "[top-tier customers](../contributing/issue_hygiene/README.md#customers)".)- We will make a best effort to ensure that well written code works (e.g. we have testing on that platform).This is a common level for target platforms that have reached a label of "stable" (e.g. Android, iOS) on devices that are widely available (e.g. 64bit ARM).This corresponds to the "Supported Google-tested platforms" category on the list of supported platforms.- We will not go out of our way to prevent code from working, but if it works it's because of luck and our best intentions rather than a coordinated effort (e.g. we do no testing on that platform).This is a common level of support for less commonly-used devices.For example, we do minimal testing of 32bit iOS devices.This corresponds to the "Best effort platforms tested by the community" category on the list of supported platforms.- We will pay no attention to whether code works, but we will accept patches that are easy to reason about.This is a common level of support for the many esoteric embedded platforms that we have no way to even manually test.For example, if you have your own SoC and are running Flutter, we want you to succeed but we don't have any way to ensure it keeps working.At this level, we would not accept what we consider "risky" PRs, or PRs that involve significant refactorings.If you are willing to provide reliable CI support for your platform, we are more than happy to work with you to move that platform to level 2 (at which point more invasive PRs become viable).- We won't accept patches.This is the appropriate response for features and platforms that are wildly outside our roadmap.For example, maintaining a Rust port of the framework is not something the Flutter project would accept patches for.This corresponds to the "Unsupported platforms" category on the list of supported platforms.💙See also:- [Code of Conduct](../../CODE_OF_CONDUCT.md)- [Contributor Guide](../../CONTRIBUTING.md)- [Flutter's Culture of Inclusivity](https://flutter.dev/culture)- [Flutter culture and how to preserve it](https://medium.com/flutter/flutter-culture-and-how-to-preserve-it-436b4ed1031d)

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

IntroductionWe are committed to maintaining a respectful and inclusive community.By participating, you agree to uphold the principles outlined here to ensure a positive experience for everyone.Expected Behavior-Be respectful to all participants and their contributions.- Provide constructive feedback and engage in discussions thoughtfully.- Respect differing viewpoints and experiences.Reporting IssuesTo report violations, please contact our team at [support@example.com](mailto:support@example.com).Include details about the incident and any relevant context.All reports will be handled with confidentiality.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

IntroductionWe are committed to maintaining a respectful and inclusive community.By participating, you agree to uphold the principles outlined here to ensure a positive experience for everyone.Expected Behavior-Be respectful to all participants and their contributions.- Provide constructive feedback and engage in discussions thoughtfully.- Respect differing viewpoints and experiences.Reporting IssuesTo report violations, please contact our team at [support@example.com](mailto:support@example.com).Include details about the incident and any relevant context.All reports will be handled with confidentiality.

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine.However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as "contributor access", "being a member of the flutter-hackers group", "being a member of the Flutter team").We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter.Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.The possible criteria are:-You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)).(This is rare.)Being granted access means that you will be added to the "flutter-hackers" group on GitHub and the "team" role on Discord.This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md).A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues.We grant access optimistically based on a reasonably small volume of evidence of good faith.Correspondingly, we will remove access quickly if we find our trust has been violated.Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously.(Please read it, it's stricter than most.)Responsibilities
Code of conductIf you have commit access or "team" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).Our code of conduct is much, much stricter than most.We do not wait until someone has been actively rude or insulting.Being disrespectful in any way is grounds for action.For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct.If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day.When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.Most people react very positively to this.If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment.On Discord, this would be kicking them from the channel.Repeat offenders should be banned.On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this).Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.Maintaining documentation
Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.If you spot something wrong, please fix it!As a contributor, you have access to the wiki.Privileges
Being in the GitHub "flutter-hackers" group gives you the following:-The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).- PRs will run their tests slightly faster.Being in the Discord "team" group gives you the following:-The ability to talk without rate-limiting on the #hackers-* channels.- The ability to kick people.- The ability to manage the server emoji.ProcessThe actual process (as followed by Flutter repo admins) is as follows:- Verify that they qualify under all the terms described above.Make sure they have a sponsor who isn't you.- Verify the identity of the person making the request.Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.- Add them to our private spreadsheet (go/flutter-organization-members).- Click the "Add a member" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.- Type their name in the text field, select them, then click the "Invite" button.- Add them to the "team" group on Discord.Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!For new Googlers joining the team:You need to ask someone in the team to add you to get added.It's not an automatic process after you join the flutter Google group.InactivityWe occasionally check for account with commit access that have not been used for a while.It takes very little to count as "active" (e.g. commenting on an issue, even adding an emoji reaction to an issue).If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access.If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.Access rights to Flutter dashboardThe [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits.To see rerun tasks, you need to be added to an allowlist.Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored.To get access, ask on #hackers-infra to be added to the allowlist.Adding a contributor to Flutter DashboardThis is only for team members with access to the Flutter Dashboard Datastore.- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)- Click `Create Entity`- Click `Email: Empty` ->Edit property.Insert contributor Google account- Click `Create`Access to LUCI recipes and configuration repositoriesIf you need access to the LUCI recipes, you need to be added to the relevant ACLs.Ask in #hackers-infra to be added to the LUCI ACLs.Process
A Googler has to be the one to grant permission.Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)Access to Flutter GoldIf you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user.Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.ProcessThe list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5).Googlers can submit a change to add to the authorized users.This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)
fcontrib.org accountsIf you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account.Ping @Hixie or another admin in the #server-support channel on Discord.ProcessYou’ll need the user’s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin.To add a fcontrib.org participant:- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)- Under “Users” in the upper left of the main content area, click “Add a User” and follow the prompts.- For a password, choose “Generate Password” and email the password to the new account holder using their non-fcontrib account -- they’ll be able to log in with that and then choose a new password.Review teams
Some parts of the codebase have teams specified so that PRs get round-robin assigned for review.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).We currently have the following review teams:- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions.To create a new team, contact @Hixie.You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.Pusher permissions
Some branches are protected to avoid accidents.Only people in the specific branches can push to them.Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia

--------------------------------

Chatting on Discord
 raw HTML omitted 
The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148).[This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH).Please do not share either link directly, instead share links to this page.The server is open to the public, though some channels are intended only for people who are actively contributing.See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there).We recommend you use the same display name on Discord and GitHub.(Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on.When in doubt, remember: our server has Dash as an icon!)Existing channelsWe have different channels for different purposes (this list is not exhaustive):
Channel
Description
Participants
#welcome
Welcome message.Only admins can post.raw HTML omitted Anyone can read.#announcements
Flutter announcements (e.g. breaking changes).Only team members can post (but not frequently).raw HTML omitted Anyone can read.#server-support
Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues.Anyone.#general
Chat about anything related to Flutter.Anyone.#help
People asking for our help.Anyone.#package-authorsFor people who develop Flutter packages.People writing packages for [pub.dev](https://pub.dev/).#dart
Questions about the Dart language.Anyone.#tree-status
Announcements about whether the trees are open or closed.Anyone, but discussion should happen elsewhere.#hackers
Chat about anything related to Flutter.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-*Chat specifically about foo, where foo is something to do with Flutter development, for example "engine", "framework", "desktop", "devtools", etc.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-dart
Questions about the Dart language.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-new
New people to the team and people who want to help them.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-triageFor use while triaging bugs.Flutter contributors.raw HTML omitted Anyone can watch.#hidden-chat
Chat about anything related to Flutter.Flutter contributors only.raw HTML omitted Not public.general (voice)
Talk (audio) about anything related to Flutter.Anyone.team (voice)
Talk (audio) that is only open to team members.Flutter contributors.The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the "team member" role to see them.New channelsIf you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support.If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads.If you would like a channel for subcommunities, e.g. #women or #china, that should be fine.(Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.)For practical reasons, we do not use Discord for chat groups limited to specific customers.For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord.Each channel describes its topic in the channel description.Please read the channel description before posting in a channel, to make sure you're using the appropriate one.Policies
Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter.The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing.If you want help with your app, ask in #help instead.If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md).See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the "team" role.Please don't direct-message people unless they are comfortable with it (ask publicly first).You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.Discord features
Threading
Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.StatusYou can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.Design documentsThis page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).

--------------------------------

raw HTML omitted 
Code of conduct
The Flutter project expects Flutter's contributors to act professionally
and respectfully.Flutter contributors are expected to maintain the safety
and dignity of Flutter's social environments (such as GitHub and Discord).Specifically:- Respect people, their identities, their culture, and their work.- Be kind.Be courteous.Be welcoming.- Listen.Consider and acknowledge people's points before responding.Should you experience anything that makes you feel unwelcome in Flutter's
community, please contact [conduct@flutter.dev](mailto:conduct@flutter.dev)
or, if you prefer, directly contact someone on the project, for instance
[Hixie](mailto:ian@hixie.ch).The Flutter project will not tolerate harassment in Flutter's
community, even outside of Flutter's public communication channels.Conflict resolutionWhen multiple contributors disagree on the direction for a particular
patch or the general direction of the project, the conflict should be
resolved by communication.The people who disagree should get
together, try to understand each other's points of view, and work to
find a design that addresses everyone's concerns.This is usually sufficient to resolve issues.If you cannot come to an
agreement, ask for the advice of a more senior member of the project.Be wary of agreement by attrition, where one person argues a point
repeatedly until other participants give up in the interests of moving
on.This is not conflict resolution, as it does not address everyone's
concerns.Be wary of agreement by compromise, where two good competing
solutions are merged into one mediocre solution.A conflict is
addressed when the participants agree that the final solution is
better than all the conflicting proposals.Sometimes the solution is
more work than either of the proposals.[Embrace the yak shave](./docs/contributing/Style-guide-for-Flutter-repo.md#lazy-programming).QuestionsIt's always ok to ask questions.Our systems are large, and nobody will be
an expert in all the systems.Once you find the answer, document it in
the first place you looked.That way, the next person will be brought
up to speed even quicker.Source: [xkcd, May 2012](https://xkcd.com/1053/)

--------------------------------

Flutter's core values
🏗️ Build the best way to develop user interfaces.This tells us what we are creating.It helps narrow our focus.The best way to develop user interfaces is a productive way of developing.The best way to develop user interfaces creates beautiful applications.The best way to develop user interfaces creates fast applications.The best way to develop user interfaces enables developers to create applications fast.The best way to develop user interfaces is extensible, so that we are not a barrier to developers.🔎 Focus on the user and all else will follow.Our user is the developer.Our developer's user is the end user of the application written with Flutter.Our first priority is to our developer's user, the end user.Our second priority is to our user, the developer.Caring about the end user means having high quality support for accessibility, top performance, stability, high fidelity and compatibility with the user's platform, supporting low-end devices, and so forth.Caring about the developer means creating a joyful and productive development experience with quick iteration cycles, creating usable, simple, reliable, predictable APIs, giving the developer full access to the underlying platform, and so forth.We respect our users, whoever they are.Another way to phrase this is "Build a thing people want".📖 Openness
Flutter is an open source project, in the full senses of the word: we are open to ideas, we are open to contributions, our code and our roadmap are open, our priorities are open.Transparency leads to a higher quality product.While the most active part of our team is currently primarily formed of employees from Google, we are growing and welcome anyone to join the team; at this point, the majority of people with commit access are not part of Google's Flutter team.Flutter's stewardship is managed by a team at Google.💫 Maintaining quality
A mediocre product cannot be the best way to develop user interfaces, so we must build processes around maintaining high levels of quality.This manifests in various ways.One is that we are feature-driven, not date-driven: we do not plan work based on deadlines.We may sometimes host events where we announce new features, but these events will announce features that have become available, rather than the features becoming available in order to be announced.This means sometimes a feature we intended to announce will slip and not be announced, but we prefer this to announcing a rushed feature.We may sometimes gate features behind flags until we are confident of their quality.🤣‬Have fun doing it
Last, but definitely not least, we want to make sure that our work environment is pleasant for everyone involved.Your health and the health of your family and friends is more important than Flutter.Our community [is welcoming](../../CODE_OF_CONDUCT.md).We don't know everything; all of us can make mistakes.We want team members to feel empowered to make changes to the code and to our processes.We encourage a bias towards action.It's better to try something and be wrong, than to plan forever and never execute.SupportWhen we think about whether we claim to "support" something, e.g. whether Flutter supports Windows 7, we use the following frame of reference.We document [which platforms we consider to fall into each category](https://docs.flutter.dev/reference/supported-platforms) on flutter.dev.Areas of supportWe distinguish several categories along which one can describe a level of support:- Supporting for deployment (we support a platform for deployment if you can run release builds of applications on that platform).- Supporting for development (we support a platform for development if you can run debug builds of applications on that platform, connect them to a debugger, hot reload, view logs, and so forth; we support a plugin for development if it can be stepped through in a debugger).- Supporting for hosting development (we support a platform for hosting development if it is one on which you can compile a Flutter application; we support an IDE for hosting development if it has a Flutter plugin).- Supporting for Flutter development (we support a platform for Flutter development if one can contribute to Flutter itself from that platform).The list of supported platforms on flutter.dev is describing the platforms supported for deployment.Levels of supportFor each area, we consider the level to which we provide support:-We will literally help you with your code if things don't work.This is very rare.(See also "[top-tier customers](../contributing/issue_hygiene/README.md#customers)".)- We will make a best effort to ensure that well written code works (e.g. we have testing on that platform).This is a common level for target platforms that have reached a label of "stable" (e.g. Android, iOS) on devices that are widely available (e.g. 64bit ARM).This corresponds to the "Supported Google-tested platforms" category on the list of supported platforms.- We will not go out of our way to prevent code from working, but if it works it's because of luck and our best intentions rather than a coordinated effort (e.g. we do no testing on that platform).This is a common level of support for less commonly-used devices.For example, we do minimal testing of 32bit iOS devices.This corresponds to the "Best effort platforms tested by the community" category on the list of supported platforms.- We will pay no attention to whether code works, but we will accept patches that are easy to reason about.This is a common level of support for the many esoteric embedded platforms that we have no way to even manually test.For example, if you have your own SoC and are running Flutter, we want you to succeed but we don't have any way to ensure it keeps working.At this level, we would not accept what we consider "risky" PRs, or PRs that involve significant refactorings.If you are willing to provide reliable CI support for your platform, we are more than happy to work with you to move that platform to level 2 (at which point more invasive PRs become viable).- We won't accept patches.This is the appropriate response for features and platforms that are wildly outside our roadmap.For example, maintaining a Rust port of the framework is not something the Flutter project would accept patches for.This corresponds to the "Unsupported platforms" category on the list of supported platforms.💙See also:- [Code of Conduct](../../CODE_OF_CONDUCT.md)- [Contributor Guide](../../CONTRIBUTING.md)- [Flutter's Culture of Inclusivity](https://flutter.dev/culture)- [Flutter culture and how to preserve it](https://medium.com/flutter/flutter-culture-and-how-to-preserve-it-436b4ed1031d)

--------------------------------

Primary issue triage processThe process of triaging new incoming bugs consists of processing the list of [issues without team-* labels, with no assignees, and not labeled will need additional triage](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+no%3Aassignee+-label%3A%22will+need+additional+triage%22+-label%3Ateam-release%2Cteam-codelabs%2Cteam-ecosystem%2Cteam-infra%2Cteam-engine%2Cteam-framework%2Cteam-news%2Cteam-ios%2Cteam-tool%2Cteam-web%2Cteam-linux%2Cteam-macos%2Cteam-windows%2Cteam-design%2Cteam-android%2Cteam-go_router%2Cteam-games%2Cteam-text-input+) as described in this section, so as to make that list empty.See also: [Issue triage reports](https://github.com/flutter/flutter/wiki/Issue-triage-reports)GeneralTo triage an issue, first look at the bug report, and try to understand what the described problem is.Edit the original comment to remove boilerplate that the bug reporter didn't remove.Edit the original comment to add backticks (```) around blocks of stack traces, code, the output of shell scripts like `flutter doctor`, etc.Ensure that the title is a meaningful summary of the issue.These changes make the bug much easier to manage.If their report is unclear, doesn't give sufficient steps to reproduce, or is otherwise lacking in sufficient detail for us to act on it, add a polite comment asking for additional information, add the `waiting for customer response` label, then skip the remaining steps.If the bug is still unclear -- we have previously asked for more detail, and the bug reporter has had a chance to provide additional feedback, but has not been able to do so in a way that makes the bug actionable -- either apologize for us not being able to fix it and then close the bug, or add the `waiting for customer response` label, depending on your confidence that the reporter will be able to eventually provide sufficient detail.Then, skip the remaining steps.It is fine to be aggressive in closing bugs where the issue is not clear, because we have plenty of other issues where the bug is clear and there's really no value to us in having low-quality bugs open in our bug database.If the issue describes something that you know for a fact has been fixed since the bug report was filed, add a cheerful comment saying so, close the issue, and skip the remaining steps.If the bug is clear enough for us to act on it, continue with the following steps.To reach this step, the bug should be actionable, with clear steps to reproduce the problem.We have enough bugs filed that we will not run out of work any time soon; therefore, it is reasonable to be quite aggressive in establishing if a bug is sufficiently clear.Artifacts
Ideally every issue would have a sample app that demonstrated the problem.Performance bugs should have timeline traces.Crashes should have crash logs with a Flutter version so that the [flutter-symbolizer-bot](https://github.com/flutter-symbolizer-bot) can do its work (see also [Crashes](../engine/Crashes.md)).What makes an issue actionableAn actionable issue is one for which it is easy to determine if a particular PR means the issue can be closed or not.Issues whose descriptions are vague, or that express a general malaise or general desire, issues that specify a failure mode but no steps to reproduce the problem, and other issues where the nature of the problem is not clear and where it would be difficult to determine if any particular change could actually fix the problem, should be closed.One example of an unactionable issue is one with such vaguely described symptoms that lots of people claim to have the same problem even when their described situations differ in mutually exclusive ways.As a project with literally thousands of open issues, we are not lacking in feedback.Time that would be spent trying to understand an unclear issue could be more effectively spent on a bug with a clear description.Unactionable bugs are simply not valuable enough to keep around when we have many actionable bugs already.Indeed, given how such issues are likely to affect search results, confuse new users filing issues, or attract hostile comments due to remaining open for a long time, they may literally have a negative value to the project.Unactionable bugs with unusual symptomsAs discussed above, if a filed issue is unactionable due to vagueness or a lack of steps to reproduce, it should be closed, because we're never going to get to it if we don't know what the problem is given that we have many, many other bugs that we can make progress on today.In the specific case of a bug with unclear steps to reproduce but very specific symptoms, we like to leave the issue open so that other people having the same problem can congregate together and maybe together we can figure out the underlying cause.This only applies to issues that have very specific symptoms like a specific and unusual crash signature, a specific and unusual error message, or other unusual and recognizable symptoms, and where some effort was made on the part of the bug reporter to determine the cause (even if that effort was ultimately futile).DuplicatesIf you recognize that this bug is a duplicate of an existing bug, add a reference to that bug in a comment, then close the bug.Skip the remaining steps.As you triage more and more bugs you will become more and more familiar with the existing bugs and so you will get better and better at marking duplicates in this way.When closing the duplicate bug, the GitHub issue tracker does not copy the list of people being notified on the closed bug into the original bug.This can matter, especially when asking on the original bug for things like reproduction steps.Consider cc'ing the author of the duplicate issue into the original issue, especially if we're still trying to determine reproduction steps for the issue.Requests for help (documentation issues)If the bug report is a question, then it probably belongs in Stack Overflow or on our #help channel or some other forum for getting help.However, if it appears that the reporter did try to read our documentation to find the answer, and failed, or, if you look in our documentation and find it is inadequate here, then please consider it a documentation bug (and update the summary accordingly).If you are confident our official documentation (on flutter.dev or api.flutter.dev) fully answers their question, then provide a link to the relevant page and close the issue, being very polite and asking them to reopen if the documentation is not sufficiently clear for them.Labels
General rule: The more labels an issue has, the better!See also: [List of labels](https://github.com/flutter/flutter/labels)Some labels are used to track the flow of issues from the time they're filed until they're assigned to a specific team for execution.You should use these to track the state of an issue through your first-level triage process.These are:- `in triage`: You are presently looking at an issue and trying to determine what other labels you should give it.- `assigned for triage`: The issue is assigned to a domain expert for further triage.- `has reproducible steps`: The issue has a reproducible case or test, Flutter doctor output, and usable stack traces if appropriate.It is actionable in the sense that it can be routed to a domain team for action.- `needs repro info`: We need more reproduction steps in order to be able to act on this issue.- `workaround available`: A workaround is available to overcome the issue until it is properly addressed.Read more about [providing workarounds](../contributing/issue_hygiene/README.md#comments-providing-workarounds).- `will need additional triage`: Assign this if you don't know how to route it to a team.To complete the triage of an issue, add one (and only one) `team-*` label.Team labels differ from the similar category names (such as `engine` or `framework`) in that the category labels indicate what part(s) of the codebase an issue affects, while `team-*` labels indicate the team that owns that work.Most issues will have both, and they won't always match.In general the flow chart for team assignment is as follows, stopping as soon as the first `team-` label is assigned:-If it's about the flutter/news_toolkit repository, add `team-news`.- If it's about a codelab, add `team-codelab`.- If it's about the release process or tooling (e.g., `conductor`), add `team-release`.- If it's about the Flutter team's CI or infrastructure, add `team-infra`.- If it's about Impeller, add `team-engine`.- If it's about accessibility (e.g. `Semantics`, `talkBack`, `voiceOver`), add `team-accessibility`.-If it's specific to a single platform, also add that platform's fyi label.- If it's about Cupertino or Material Design, add `team-design`.- If it's about text fields or other user-facing text input issues, add `team-text-input`.-If it's specific to a single platform, also add that platform's fyi label.- If it's specific to a single platform, add that platform's team (`team-android`, `team-ios`, `team-linux`, `team-macos`, `team-web`, or `team-windows`).-If the issue is about a first-party package, also add `fyi-ecosystem`.- If it's about one of our games templates, add `team-games`.- If it's about the Flutter engine, add `team-engine`.- If it's about the Flutter framework, add `team-framework`.- If it's about the Flutter tool, add `team-tool`.- If it's about a first-party package:
- If it's about `go_router` or `go_router_builder`, add `team-go_router`.- If it's about `two_dimensional_scrollables`, add `team-framework`.- If it's about `flutter_svg` or `vector_graphics`, add `team-engine`.- Otherwise, add `team-ecosystem`.- If none of the above apply, add `will need additional triage`.It is expected that some bugs will end up being re-assigned to a different team during secondary triage.If there are specific categories of issues where this always happens, the flow chart above should be updated accordingly, but having it happen occasionally is just the process working as expected; in some cases only the engineers working on an issue will know how the work is divided among teams.Bugs relating to the developer tools should be moved to the `flutter/devtools` repo, unless it looks like the first step is a change to the core parts of Flutter (in which case it should receive the `d: devtools` label as well as the pertinent labels for where the work should occur).Issues tagged with `d: devtools` or moved to the `flutter/devtools` repo will be triaged as described by [flutter/devtools/wiki/Triage](https://github.com/flutter/devtools/wiki/Triage).Bugs relating to the IntelliJ IDEs should be moved to the `flutter/flutter-intellij` repo, unless it looks like the first step is a change to the core parts of Flutter (in which case it should receive the `d: intellij` label as well as the pertinent labels for where the work should occur).Issues tagged with `d: intellij` will be reviewed by the Flutter IntelliJ team as described by [flutter/flutter-intellij/wiki/Triaging](https://github.com/flutter/flutter-intellij/wiki/Triaging).Bugs relating to the website should be moved to the `flutter/website` repo.Additional labelsOnce the main labels above are added, consider what additional labels could be added, in particular:Add any of the applicable "c: *" labels; typically only one will apply but sometimes `c: regression` will apply in conjunction with one of the others.Add any of the applicable "a: *" labels.There are many, it's worth browsing the list to get an idea of which ones might apply.Additional commentsIf you have something to say regarding the bug, for example if you happen to notice what the problem is, or if you have some insight based on having seen many other bugs over time, feel free to add a comment to that effect.Your experience is valuable and may help both the reporter and the rest of the Flutter team.Triage process for teamsWe intend for each area of the product to go through the following triage regularly:- Look at open bugs and determine what needs to be worked on.- Look at open PRs and review them.It is recommended to do these in separate dedicated meetings.For teams with multiple areas of focus (e.g. design languages), it's recommended that each area of focus have its own meeting.Team issue triage process
Each team has a label, for example `team-engine` is the engine team's label.Each issue gets assigned to a team during primary triage.In addition, each team has a "triaged" label (e.g. `triaged-engine`) and an "FYI" label (e.g. `fyi-engine`).Each team has an incoming issue list, the issues assigned to that team (team-foo), or marked for the attention of that team (fyi-foo), that the team has not yet triaged (triaged-foo).See below for links to those issue lists for each team.Each issue in this list should be examined, cleaned up (see next section), and either:- closed, with a comment saying why (e.g. is a duplicate, is not actionable, is invalid).The [r:](https://github.com/flutter/flutter/labels?q=r%3A) labels may be of use when closing an issue.- given a [priority](../contributing/issue_hygiene/README.md#priorities), and tagged with the team's corresponding `triaged-*` label.This marks the issue as triaged.If the priority is P3 and the reporter has expressed that the issue is important to them, it will help the reporter feel welcome if a comment is added expressing empathy for their plight and explaining why it is not something we consider important.- sent to another team, by removing the current `team-*` label and adding another one.A comment should be added explaining the action.- sent back to primary triage, by removing the `team-*` label but not adding another one.A comment should be added explaining the action.- escalated to critical triage, by adding the `will need additional triage` label.A comment should be added explaining the action.In addition, each team should look at their P0 list, and ensure that progress is being made on each one.Every P0 issue should have an update posted at least once a week.Teams may also look at other lists (e.g. checking over previously-triaged regression issues, checking all P1 issues, checking assigned issues, etc), as appropriate.To flag an issue for attention by another team, the `fyi-*` label for that team can be set on the label.This does not assign the issue to that team, it just adds it to their triage queue.Checklist for cleaning up issuesWhen looking at an issue, perform the following cleanup steps:- Correct any typos and inaccuracies in the summary.- Correct the set of labels applied.- Hide low quality comments.Restrict the time you spend diagnosing each issue during triage.You don’t have to fix the issue!30 seconds for P0 and 10~15 seconds for the others is reasonable!(Plus whatever time it takes to update the issue.)
 raw HTML omitted```
//This script is intended to be run in chrome devtools console
// during triage to open PRs and Issues faster.// Before the script can be run you need to enable popups in Chrome
// 1.On your computer, open Chrome Chrome.
//2. At the top right, click More More and then Settings.// 3. Click Privacy and security and then Site Settings.// 4. Click Pop-ups and redirects.
//5. Choose the option you want as your default setting.//
// https://support.google.com/chrome/answer/95472?hl=en&co=GENIE.Platform%3DDesktopconst plural = window.location.toString().split('?')[0];
const singular = plural.substring(0, plural.length-1);
const suffix = singular.includes("issue") ? "s" : "";
const re = new RegExp("^" + singular + suffix + "/\\d+$");var urls = document.getElementsByTagName('a');var targets = []
for (url in urls) {
    var link = urls[url].href;
    if(link == undefined) continue;
    if(link.match(re) == null) continue;
    if(targets.includes(link)) continue;
    targets.push(link);
}targets.forEach((target) => window.open(target));```raw HTML omitted 
PR triage process
Teams should also go through all PRs in their area (ideally in a separate meeting).PRs can apply to multiple areas, and different teams have different methods of organizing code, so there is no uniform guidance for this process.However, in general:
- Check that PRs have an assigned reviewer.- Check that the assigned reviewers have left comments; if not, contact them to remind them.- Check that any questions on the PR from the contributor have been answered.For more guidance on reviewing PRs, see [Tree Hygiene](../contributing/Tree-hygiene.md#how).Links for teams
Accessibility team (`team-accessibility`)
- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-accessibility%2Cfyi-accessibility+-label%3Atriaged-accessibility+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-accessibility+label%3AP0+sort%3Aupdated-asc+)- [Package PRs](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+accessibility%22+sort%3Aupdated-asc+-is%3Adraft+)Android platform team (`team-android`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-android%2Cfyi-android+-label%3Atriaged-android+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-android+label%3AP0+sort%3Aupdated-asc)- [P1, No Assignee list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-android+label%3Ap1+no%3Aassignee+sort%3Aupdated-asc)- PRs: [Framework/Tool](https://github.com/flutter/flutter/pulls?q=is%3Aopen+draft%3Afalse+is%3Apr+label%3Aplatform-android+-label%3A%22work+in+progress%3B+do+not+review%22+sort%3Aupdated-asc+), [Plugins (non-dependabot)](https://github.com/flutter/packages/pulls?q=is%3Aopen+draft%3Afalse+is%3Apr+label%3Atriage-android+sort%3Aupdated-asc+-author%3Aapp%2Fdependabot+), [Plugins (dependabot)](https://github.com/flutter/packages/pulls?q=is%3Aopen+draft%3Afalse+is%3Apr+label%3Aplatform-android+sort%3Aupdated-asc+author%3Aapp%2Fdependabot+)Codelabs team (`team-codelabs`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-codelabs%2Cfyi-codelabs+-label%3Atriaged-codelabs+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-codelabs+label%3AP0+sort%3Aupdated-asc)Design Languages team (`team-design`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-design%2Cfyi-design+-label%3Atriaged-design+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+-label%3A%22waiting+for+customer+response%22+)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-design+label%3AP0+sort%3Aupdated-asc)- [Design Languages PRs](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22f%3A+material+design%22%2C%22f%3A+cupertino%22+sort%3Aupdated-asc+draft%3Afalse)Ecosystem team (`team-ecosystem`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ecosystem%2Cfyi-ecosystem+-label%3Atriaged-ecosystem+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ecosystem+label%3AP0+sort%3Aupdated-asc)- [PR list](https://github.com/flutter/packages/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-asc+-label%3A%22p%3A+go_router%22+-label%3A%22p%3A+go_router_builder%22)In addition, consider these issues that fall under another team's triage, but are things the ecosystem team might want to be aware of:

- [a: plugins issues](https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3A%22a%3A+plugins%22+-label%3Ateam-ecosystem+-label%3Atriaged-ecosystem)- [package issues](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Apackage+-label%3Ateam-ecosystem+-label%3Atriaged-ecosystem+-label%3Ateam-go_router+sort%3Acreated-desc+)- [Package regressions](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+-label%3Ateam-go_router+label%3Apackage+label%3A%22c%3A+regression%22+sort%3Acreated-desc)Engine team (`team-engine`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-engine%2Cfyi-engine+-label%3Atriaged-engine+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-engine+label%3AP0+sort%3Aupdated-asc)- [Buildroot PRs](https://github.com/flutter/buildroot/pulls)- [Approved PRs that have not yet landed](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+draft%3Afalse+-label%3A%22Work+in+progress+%28WIP%29%22+review%3Aapproved+NOT+%22Roll+Skia%22+-label%3Aplatform-web+sort%3Acreated-asc)- [PRs awaiting review](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+draft%3Afalse+-label%3A%22Work+in+progress+%28WIP%29%22+-label%3A%22waiting+for+tree+to+go+green%22+-label%3A%22platform-web%22+-review%3Aapproved+-label%3A%22waiting+for+customer+response%22+NOT+%22Roll+Skia%22+NOT+%22Roll+Dart%22+NOT+%22Roll+Fuchsia%22+sort%3Aupdated-asc++-label%3A%22platform-web%22+)- [Draft PRs](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3A%22Work+in+progress+%28WIP%29%22+-label%3A%22waiting+for+tree+to+go+green%22+-label%3A%22platform-web%22+-review%3Aapproved+-label%3A%22waiting+for+customer+response%22+NOT+%22Roll+Skia%22+sort%3Aupdated-asc++-label%3A%22platform-web%22+)Framework team (`team-framework`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-framework+label%3AP0+sort%3Aupdated-asc)- [PR list](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3Aframework+-label%3A%22f%3A+material+design%22+-label%3A%22f%3A+cupertino%22+sort%3Acreated-desc+draft%3Afalse)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-framework%2Cfyi-framework+-label%3Atriaged-framework+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+-label%3A%22waiting+for+customer+response%22+)Games team (`team-games`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-games%2Cfyi-games+-label%3Atriaged-games+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-games+label%3AP0+sort%3Aupdated-asc)- [PRs awaiting review](https://github.com/flutter/games/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-asc)Go Router team (`team-go_router`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-go_router%2Cfyi-go_router+-label%3Atriaged-go_router+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-go_router+label%3AP0+sort%3Aupdated-asc)- [Package PRs](https://github.com/flutter/packages/pulls?q=is%3Apr+is%3Aopen+label%3A%22p%3A+go_router%22%2C%22p%3A+go_router_builder%22)Infrastructure team (`team-infra`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-infra+label%3AP0+sort%3Aupdated-asc)- [Cocoon PRs](https://github.com/flutter/cocoon/pulls)- [GoB CLs](https://flutter-review.googlesource.com/q/status:open+-is:wip)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-infra%2Cfyi-infra+-label%3Atriaged-infra+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [Latest updated issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-infra%2Cfyi-infra+sort%3Aupdated-desc)
iOS and macOS platform team (`team-ios` and `team-macos`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ios%2Cteam-macos+label%3AP0+sort%3Aupdated-asc+)- [iOS incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ios%2Cfyi-ios+-label%3Atriaged-ios+-label%3A%22will+need+additional+triage%22+-label%3A%22waiting+for+customer+response%22+sort%3Aupdated-asc+)- [macOS incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-macos%2Cfyi-macos+-label%3Atriaged-macos+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+)- [Apple news](https://developer.apple.com/news) - check for updates that might affect us.PRs are reviewed weekly across the framework, packages, and engine repositories:- [iOS PRs on the engine](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3Aplatform-ios+sort%3Acreated-asc+-is%3Adraft)- [macOS PRs on the engine](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3A%22affects%3A+desktop%22+label%3Aplatform-macos+sort%3Aupdated-asc)- [iOS PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3Aplatform-ios+sort%3Acreated-asc+-is%3Adraft)- [macOS PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+desktop%22+platform-macos++sort%3Aupdated-asc)- [iOS and macOS PRs on packages](https://github.com/flutter/packages/pulls?q=is%3Aopen+is%3Apr+label%3Atriage-macos%2Ctriage-ios+sort%3Aupdated-asc+)Linux platforms team (`team-linux`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-linux%2Cfyi-linux+-label%3Atriaged-linux+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-linux+label%3AP0+sort%3Aupdated-asc)- [Linux PRs on the engine](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3A%22affects%3A+desktop%22+label%3Aplatform-linux+sort%3Aupdated-asc)- [Linux PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+desktop%22+label%3Aplatform-linux+sort%3Aupdated-asc)- [Linux PRs on packages](https://github.com/flutter/packages/pulls?q=is%3Aopen+is%3Apr+label%3Atriage-linux+sort%3Aupdated-asc)News Toolkit team (`team-news`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-news%2Cfyi-news+-label%3Atriaged-news+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-news+label%3AP0+sort%3Aupdated-asc)Release team (`team-release`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-release%2Cfyi-release+-label%3Atriaged-release+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-release+label%3AP0+sort%3Aupdated-asc)Text Input team (`team-text-input`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3A%22a%3A+text+input%22%2Cteam-text-input%2Cfyi-text-input+sort%3Aupdated-asc+label%3AP0+)- [PR list](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+sort%3Acreated-desc+draft%3Afalse+label%3A%22a%3A+text+input%22%2Cteam-text-input%2Cfyi-text-input+)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22a%3A+text+input%22%2Cteam-text-input%2Cfyi-text-input+no%3Aassignee+-label%3A%22triaged-design%22+-label%3A%22triaged-framework%22+-label%3A%22triaged-linux%22+-label%3A%22triaged-macos%22+-label%3A%22triaged-windows%22+-label%3A%22triaged-android%22+-label%3A%22triaged-ios%22+-label%3A%22triaged-web%22+-label%3A%22triaged-ecosystem%22+-label%3A%22triaged-engine%22+-label%3A%22triaged-tool%22+-label%3A%22triaged-text-input%22+-project%3Aflutter%2F111+)Flutter Tool team (`team-tool`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-tool%2Cfyi-tool+-label%3Atriaged-tool+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-tool+label%3AP0+sort%3Aupdated-asc)- [PR list](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3Atool+sort%3Aupdated-asc+-is%3Adraft)Web platform team (`team-web`)- See the [Flutter Web Triage](Flutter-Web-Triage.md) page.Windows platforms team (`team-windows`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-windows%2Cfyi-windows+-label%3Atriaged-windows+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-windows+label%3AP0+sort%3Aupdated-asc)- [Windows PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+desktop%22+label%3Aplatform-windows+sort%3Aupdated-asc)- [Windows PRs on packages](https://github.com/flutter/packages/pulls?q=is%3Aopen+is%3Apr+label%3Atriage-windows+sort%3Aupdated-asc)Adding a new teamTo add a team:
- Create the `team-*`, `triaged-*`, and `fyi-*` labels with the same colors as other teams' labels.- Add the team to the list of teams in the triage bot ([the GitHubSettings.teams set](https://github.com/flutter/cocoon/blob/main/triage_bot/lib/engine.dart#L50)) and tell Hixie so he can restart the bot.- Add the team to the list of excluded labels in the link at the top of this page.- Add a section above with the incoming issue list and P0 issue list.Critical triageEach week we have a "critical triage" meeting where we check how things are going, to make sure nothing falls through the cracks.(It's not really "critical", the name is historical.)During these meetings, we go through the following lists:
- [P0](https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3AP0+sort%3Aupdated-asc): all bugs should be assigned, and progress should be happening actively.There should be an update within the last week.If no progress is happening and owner cannot work on it immediately (e.g. they're on vacation, they're busy with their day job, family reasons, etc), find a new owner.- [Bugs flagged for additional triage](https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+no%3Aassignee): figure out what should be done with the bug, then remove the `will need additional triage` label.- [flutter-pub-roller-bot](https://github.com/flutter/flutter/pulls/flutter-pub-roller-bot): check that the pub auto roller is chugging along.If it has gotten trivially stuck, such as having a merge conflict, close the PR so that it can open a new one.If it is non-trivially stuck, file an issue for the infra ticket queue: [https://github.com/flutter/flutter/blob/main/docs/infra/Infra-Ticket-Queue.md](https://github.com/flutter/flutter/blob/main/docs/infra/Infra-Ticket-Queue.md).- [The stale PRs](https://github.com/pulls?q=is%3Aopen+is%3Apr+archived%3Afalse+user%3Aflutter+-repo%3Aflutter%2Fwebsite-cms+sort%3Aupdated-asc+): examine the 25 least-recently updated PRs, if the least recently updated one was updated more than 2 months ago.Self test issueThe automation that supports our triage processes will periodically file an issue with every team's label on it.After a couple of weeks, it then adds the `will need additional triage` label to send it to the attention of the "critical triage" meeting, at which point we discover how well the triage processes are going, and which teams are not following the process completely, or are understaffed for the volume of issues they are dealing with.

--------------------------------

tl;dr- Avoid asking about the status of an issue; if we have an update, we'll post it.- If you have permission, assign bugs to yourself if you're working on them.- Unassign bugs that you are not working on soon.- If an issue is not assigned, assume it is available to be worked on.OverviewWe use three issue trackers: the [main one on flutter/flutter](https://github.com/flutter/flutter/issues), one for [the flutter.dev Website, on flutter/website](https://github.com/flutter/website/issues), and one for [the IntelliJ and Android Studio plugins, on flutter/flutter-intellij](https://github.com/flutter/flutter-intellij/issues).This page mostly talks about how we handle things for the flutter/flutter issue tracker.Issue philosophyWe assume that Flutter, like all non-trivial software, has an infinite number of bugs.The issue tracker contains the list of bugs that we are very lucky to have had reported by our generous community.Bugs includes known defects, as well as feature requests, planned work, and proposals.Within the bug database we try to make sure each issue is actionable and discoverable.We do this by carefully updating the issue subject line, making sure every issue has steps to reproduce, and using labels to categorize the issue in ways that can be found by GitHub search.CommentsDo not add "me too" or "same" or "is there an update" comments to issues or PRsThe Flutter team prioritizes issues in part based on the number of +1 (thumbs
up) reactions on the top level comment of the bug.Adding comments like "me
too" or "same here" is generally distracting and makes it harder to find
other more meaningful content in the bug.If you have no new details to add,
consider just thumbs up-ing the issue.If you wish to subscribe to the issue,
click the "subscribe" button in the right hand column of the GitHub UI.Adding comments explaining how a bug is dire and how you will stop using Flutter
if it is not fixed is upsetting for the engineers working on Flutter (many of
whom are volunteers, not that being paid to work on Flutter makes such comments
any less upsetting).Out of a respect for the team, and as required by our [code
of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md), we
ask that you avoid adding comments that are not actively helpful.There are other
venues if you want to complain without being constructive.Asking for updates is also not generally helpful, because it just leads to issues
being full of comments asking for updates and that makes finding useful information
in a bug harder (an exception might be if you are participating in the triage process,
but even then consider reaching out to people directly if possible).If you believe
there could be information that has not been posted, ask on our Discord server instead
(see [Chat](../Chat.md)).Issues are not always the best venue for discussions
Discussions within an issue should remain focused on the topic, specifically about what the filed issue is and how to solve it.Broader discussions are best suited to happen on Discord (see [Chat](../Chat.md)) or in design docs using Google Docs (see [Design Documents](../Design-Documents.md)).This is because GitHub hides comments, doesn't have threading, notifications get lost in the swamp of other GitHub e-mails, etc.If you move to another tool for part of the discussion, remember to add a summary of the discussion and document any decisions that took place.This allows people following the issue to keep updated and continue to participate.Issues are never an appropriate venue for asking for help with your code.Issues are also not a good venue for discussing project direction.Comments providing workarounds
Providing workarounds for issues can be helpful for developers using Flutter and finding a bug,
but please keep such comments to a minimum so as to avoid disrupting the engineers trying to
fix the issue.Rather than discussing workarounds, provide a pointer to another forum
(e.g. Stack Overflow) where workarounds and temporary solutions are more appropriate.Thanks.However, when a workaround has been identified, consider applying the `workaround available` label to make that info readily available.Avoid posting screenshots of textIf you want to show code, quote someone, or show a string of text that does
not render properly with Flutter, please avoid sharing it via an image or
screenshot.Text in images cannot be copied, and cannot be automatically
translated via services like Google Translate.This makes it harder for team
members who do not speak that language to participate in the issue.It is perfectly fine to share a screenshot of text rendering invalidly, but
also include the actual string or character(s) that lead to it so that they
can be copied and pasted into a test case.Provide reduced test casesTo debug a problem, we will need to be able to reproduce it.The best way
to help us do that is to provide code, licensed according to [the BSD license
used by Flutter](https://github.com/flutter/flutter/blob/main/LICENSE), that
has been reduced as far as possible (such that removing anything further stops
showing the bug).Attach such a file or files to the issue itself.For legal reasons, we cannot debug problems that require looking at proprietary
code or, generally, code that is not publicly available.Consider posting issues in EnglishIf you are able to read and write English clearly, consider posting your issue
in English, even if it is about a language specific issue (like the way text
renders in some non-English language).It is fine to post issues in languages other than English, but consider that
many readers will rely on automatic translation services to read your issue.Please avoid using screenshots in languages other than English, as services like
Google Translate will not translate the text in images, and the pool of people
able to assist you will be reduced.Locking an issue
Closed issues that haven't received any activity in a [few weeks](https://github.com/flutter/flutter/blob/main/.github/lock.yml#L4)
are automatically locked by a [bot](https://github.com/apps/lock).This is
done to encourage developers to file new bugs, instead of piling comments
on old ones.Under normal circumstances, open issues should not regularly be locked.The most
common reason for manually locking an open issue is that issue is well
understood by the engineers working on it,
is believed to be appropriately prioritized, has a clear
path to being fixed, and is otherwise attracting
a lot of off-topic or distracting comments like "me too" or
"when will this be fixed" or "I have a similar issue that might
or might not be the same as this one".If you are concerned that such an issue is not receiving its due
attention, see Escalating an Issue, described above.If you are
not already a contributor but would like to work on that issue,
consider reaching out on an appropriate [chat](../Chat.md).If you have a similar issue and are not sure if it is the same,
it is fine to file a new issue and linking it to the other issue.Please avoid intentionally filing duplicates.Very rarely, an issue gets locked because discussion has become
unproductive and has repeatedly violated the [Code of Conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).PrioritiesThe [P0](https://github.com/flutter/flutter/labels/P0) label indicates that the issue is one of the following:- a build break, regression, or failure in an existing feature that prevents us from shipping the current build.- an important item of technical debt that we want to fix promptly because it is impacting team velocity.- an issue blocking, or about to block, a top-tier customer.(See  under "customers" for a definition of "top-tier customer".)There are generally less than twenty-five P0 bugs (one GitHub search results page).If you find yourself assigning a P0 label to an issue, please be sure that there's a positive handoff between filing and a prospective owner for the issue.Issues at this level should be resolved in a matter of weeks and should have weekly updates on GitHub.During normal work weeks (e.g. not around the new year), issues marked P0 get audited weekly during the "critical triage" meeting to ensure we do not forget about them.Issues marked P0 should get updates at least once a week, to keep the rest of the team (and anyone affected by the issues) apprised of progress.The [P1](https://github.com/flutter/flutter/labels/P1) label indicates high-priority issues that are at the top of the work list.This is the highest priority level a bug can have if it isn't affecting a top-tier customer or breaking the build.Bugs marked P1 are generally actively being worked on unless the assignee is dealing with a P0 bug (or another P1 bug).Issues at this level should be resolved in a matter of months and should have monthly updates on GitHub.The [P2](https://github.com/flutter/flutter/labels/P2) label indicates issues that we agree are important to work on, but are not at the top of the work list.This is the default level for new issues.A bug at this priority level may not be fixed for a long time.Sometimes an issue at this level will first migrate to P1 before we work on them, but that is not required.The [P3](https://github.com/flutter/flutter/labels/P3) label indicates issues that we currently consider less important to the Flutter project.We use "thumbs-up" on these issues as a signal when discussing whether to promote them to P2 or higher based on demand.(Of course, this does not mean the issues are not important to you, just that we don't view them as the especially important for Flutter itself.)Typically we would accept PRs for `P3` issues (assuming they follow our [style guide](../Style-guide-for-Flutter-repo.md) and follow our [other rules](../Tree-hygiene.md)).Issues marked with the [would require significant investment](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22would+require+significant+investment%22) label may require more than just a PR, for example, adding support for a whole new platform will require a commitment to provide CI resources for build and test, and someone to own the maintenance of those systems.When will my bug be fixed?Flutter is an open source project and many people contribute their time (or their employees' time) to fix code and implement features.Typically, people fix bugs that are relevant to their customers.For example, Google engineers who contribute to Flutter are going to prioritize issues that affect Flutter apps written by Google teams.Many of us, however, also volunteer time to fix more general issues.To determine when a bug will be fixed, look at the issue.If there's a recent status update on the issue, that is the best information we have about the bug.If there's a lot of comments on the issue, we try to link to the latest status from the top comment, so look there.(Please  for updates, though.)If the issue is labeled with priorities `P0` or `P1`, or if the issue is assigned, we are likely to address it in the near term; we just need to find time.Otherwise, we don't know when we're going to fix it.We may never get to it.In general, `P2` bugs are seen as more important than `P3` bugs.See the more detailed definitions of priorities above.See also [Popular issues](../issue_hygiene/Popular-issues.md).Escalating an issue that has the wrong priorityIf you have a relationship with the Flutter team, raise the issue with
your contact if you think the priority should be changed.If you don't, consider finding like-minded developers to either implement
the feature as a team, or to fund hiring someone to work on the feature,
or to .Please don't comment on an issue to indicate your interest.Comments should
be reserved for making progress on the issue.Thumbs-up reactionsTo vote on an issue, use the "Thumbs-up" emoji to react to the issue.When examining issues, we use the number of thumbs-up reactions to an issue to determine an issue's relative popularity.This is, of course, but one input.At the end of the day, Flutter is an open source project and everyone (or every company) who contributes does so to further their own needs.To the extent that those needs are aligned with making Flutter popular,
they tend to let their priorities be influenced by the "thumbs-up" reactions,
but if you have something on which your business depends,
the best solution is to pay someone to work on it.See also:- [All open issues sorted by thumbs-up](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc)- [Feature requests by thumbs-up](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3A%22c%3A+new+feature%22)- [Bugs by thumbs-up](https://github.com/flutter/flutter/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+-label%3A%22c%3A+new+feature%22+)We ignore other emoji reactions.LabelsWe use [many labels](https://github.com/flutter/flutter/labels).Naming conventions
Common naming conventions for labels include:

- `a: *` - The `a` ("area") prefix is used for labels that are about a specific topic that could span different layers of Flutter's implementation (for example "accessibility" or "text input").- `browser: *` - Indicates the browser for browser-specific issues for the web port of Flutter.- `c: *` - The `c` ("category") prefix says what kind of bug we're looking at (regression, crash, new feature request, etc).- `d: *` - The purple `d` ("devtools") labels are for organizing our developer tool issues.- `d: *` - The green `d` ("documentation") labels are for organizing our documentation-related issues.- `dependency: *` - Indicates the upstream team for issues that are blocked on some work from an upstream project (e.g. Skia, Dart).- `e: *` - The `e` ("engine") prefix is for subsets of the Flutter engine ([flutter/engine](https://github.com/flutter/engine)).- `f: *` - The `f` ("framework") prefix is for subsets of the Flutter framework ([flutter/flutter's packages/flutter/](https://github.com/flutter/flutter/tree/main/packages/flutter)).- `found in release: x.yy` - Used for a series of labels that indicate which versions of Flutter an issue was found in.- `from: *` - Labels that indicate where an issue originated (e.g. research, postmortems), if it wasn't filed organically.- `t: *` - The `t` ("tool") prefix is for subsets of the Flutter tool ([flutter/flutter's packages/flutter_tools/](https://github.com/flutter/flutter/tree/main/packages/flutter_tools)).- `p: *` - The `p` ("package") prefix is for specific packages ([flutter/packages](https://github.com/flutter/packages)).Light teal for packages and darker teal for plugins.- `platform-*` - The `platform` prefix is for bugs that are specific to one or more platforms.- `r: *` - The `r` ("resolution") prefix is used for labels that describe why an issue was closed.Adding labels
Labels are more or less free, so we can add them pretty easily.Please mention it to other team members first, so that they know what you are planning and can give feedback (please at a minimum mention it on `#hidden-chat` in our [Chat](../Chat.md)).Please make sure labels use a consistent color and naming scheme (e.g. all the framework-related labels are blue and start with `f:`).Labels should be used for adding information to a bug.If you plan to use a label to find all instances of a particular topic (e.g. finding all PRs where someone wrote a design doc), be aware that there's no way to force people to label issues or PRs.You can, however, rely on automation to do it, for example we have a script that labels all PRs that affect the framework.CustomersThe Flutter team is formed of engineers from many sources, including dedicated volunteers and employees of companies like Google.Each of these may have different ideas of who their customers are.For example, Google engineers consider some Google teams to be their customers, but someone who contributes on a code-for-hire basis may have their own customers.Some teams using Flutter have a special relationship with some members of the Flutter team (e.g. they're collaborating with us on a new feature, or they're working with us on a product demo for an upcoming event).This is usually a fairly short-term arrangement for a specific business purpose.We provide such customers with a label (`customer: ...`) in our GitHub issue tracker.When these customers are working closely with members of the Flutter team, we may consider them "top-tier customers" for the purposes of prioritization.Priority `P0` (see below) is sometimes used for bugs that affect these top-tier customers.Coordinating between bug systems
Some customers have their own separate bug systems, in which they track Flutter
issues.We consider our GitHub issue list to be canonical.However, if there
is a link from the issue in our bug system to the customer's issue in their bug
system, and we have been granted access, we will follow that link and may
communicate in that separate bug system when attempting to track down the issue.Special customer labelsThe `customer: product` label is used to bring issues that product management
and senior leads want resolved to the attention of the appropriate engineering
team.The `customer: crowd` label is used to represent bugs that are affecting large
numbers of people; during initial [Triage](../../triage/README.md), high-profile bugs get labeled in
this way to bring them to the attention of the engineering team."Large numbers"
is a judgement call.If dozens of people independently run into the same issue
and file a bug and we end up realizing that they're all duplicates of each other,
then that would be a good candidate.On the other hand, if there is an active
campaign to get people to comment on a bug, then it's probably not legitimately
a `customer: crowd` bug, because people generally report bugs without having to
be convinced to do so.In general, a bug should only be marked `customer: crowd` `P0` if it
is so bad that it is literally causing large numbers of people to consider changing
careers.Other noteworthy labelsThe `blocked` label can be used to indicate that a particular issue is unable to make progress until some other problem is resolved.This is particularly useful if you use your own list of assigned issues to drive your work.The `good first issue` label should be used on issues that seem like friendly introductions to contributing to Flutter.They should be relatively well-understood issues that are not controversial, do not require a design doc, and do not require a deep understanding of our stack, but are sufficiently involved that they at least require a basic test to be added.MilestonesWe do not use GitHub milestones to track work.Assigning Issues
Issues are typically self-assigned.Only assign a bug to someone else if
they have explicitly volunteered to do the task.If you don't have permissions
to assign yourself an issue you want to work on, don't worry about it, just
submit the PR (see [Tree Hygiene](../Tree-hygiene.md)).Only assign a bug to yourself when you are actively working on it
or scheduled to work on it.If you don't know when you'll be working
on it, leave it unassigned.Similarly, don't assign bugs to
people unless you know they are going to work on it.If you find
yourself with bugs assigned that you have not scheduled specific time
to work on, unassign the bug so that other people feel
empowered to work on them.Do assign a bug to yourself if you are working on it, or if you have
scheduled time to work on it and are confident you will do so!This is how
people can figure out what is happening.It also prevents duplicate
work where two people try to fix the same issue at once.You may hear team members refer to "licking the cookie".Assigning a
bug to yourself, or otherwise indicating that you will work on it,
tells others on the team to not fix it.If you then don't work on it,
you are acting like someone who has taken a cookie,
licked it to be unappetizing to other people, and then not eaten it.By extension, "unlicking the cookie" means indicating to the
rest of the team that you are not actually going to work on the bug
after all, e.g. by unassigning the bug from yourself.File bugs for everything
File bugs for anything that you come across that needs doing.When you
implement something but know it's not complete, file bugs for what you
haven't done.That way, we can keep track of what still needs doing.ExceptionsDo not file bugs that meet the following criteria:- Asking meta-questions like "why was bug #XYZ closed?"Instead, poston the original issue or raise the actual problem that is still not
resolved.- Intentional duplicates like  "This is the same as bug #ABC but thatone is not getting enough attention."Instead, upvote the original
issue or add a comment that provides new details that are not already
captured or (best of all) assign it to yourself and start working on it!How to propose a specific changeIf you have an idea that you would like to land, the recommended process is:- [File a bug](https://github.com/flutter/flutter/issues/new/choose) describing the problem.- Write a [design doc](https://flutter.dev/go/template) that references this problem and describes your solution.- Socialize your design on the bug you filed and on [Chat](../Chat.md).Collect feedback from various people.- Once you have received feedback, if it is mostly positive, implement your idea and submit it.See the [Tree Hygiene](../Tree-hygiene.md) wiki page for details on submitting PRs.Every issue should be actionable
Avoid filing issues that are on vague topics without a clear problem description.Please close issues that are not actionable.See [Triage](../../triage/README.md) for more details.Issues should have clear steps to reproduce
Every issue should have a clear description of the steps to reproduce the problem, the expected results, and the actual results.If an issue is lacking this information, request it from the commenter and close the issue if information is not forthcoming.Closing issuesAn issue should be closed if:- it is fixed!- it is a [duplicate](../../triage/README.md#duplicates).- it makes multiple requests which could be addressed independently.Encourage people to file separate bugs for each independent item.- it is describing a solution rather than a problem.For example, it has no use cases, and the use cases are not obvious, or might have other solutions.- it is not [actionable](../../triage/README.md#what-makes-an-issue-actionable) and does not [have unusual symptoms](../../triage/README.md#unactionable-bugs-with-unusual-symptoms).This covers a wide variety of cases, such as invalid bugs, bugs without steps to reproduce, bugs that have become irrelevant, or bugs that are unclear and which the reporter has not offered more details for.It also includes non-catastrophic bugs that cannot be reproduced by anyone but the original reporter.For this latter case, encourage the reporter to attempt to debug the issue themselves, potentially giving suggestions for places where they could instrument the code to find the issue, and invite them to join the Discord for help; then add the `waiting for customer response` label.The issue will get automatically closed after a few weeks if they don't respond.- it is a feature request that we are unlikely to ever address, and if we did address it, it would not be part of the core SDK (e.g. it would be in a package).(For example, anything in the [would be a good package P3](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22would+be+a+good+package%22+label%3AP3) list is a good candidate for closing without fixing.)- we would not accept a fix even if one were to be offered ([e.g. support for platforms at level of support 4](../../about/Values.md#levels-of-support)).- it is an issue regarding internal processes, tooling, or infrastructure (i.e. something that our users are not affected by), that we have no plans to get to (e.g. that would be marked P3).(For example, anything in the [c: tech-debt P3](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22c%3A+tech-debt%22+label%3AP3) list is a good candidate for closing.)- it is tracking technical debt but the suggested improvements are marginal at best or would require significant research to be evaluated.Prefer having folks who work in the relevant part of the code make improvements based on their judgment.The following are poor reasons for closing an issue:- it has not been updated for a long time.This is fine; if the issue has not changed, then it is normal for it to not be updated.- it is a low-priority user-facing issue.We would prefer to have one long-lived open bug with a single conversation, than many short-lived closed bugs with many independent conversations.- it would be hard to fix.In general, any bug that has the following characteristics should definitely not be closed:- it is a well-described problem that we can reproduce reliably.- it is a well-argued feature request with a solid use case and clear goal that cannot reasonably be implemented in a package.(If it's something we're unlikely to ever do, it should be marked P3.)- it is tracking technical debt that is clearly actionable and whose benefits are clear.- it is a request to add a customization to a material widget that fits cleanly into the existing material design library's ethos.- it was filed by a team member and is assigned to that team member.Tracking bugs for team membersIf you need to track some work item, you can file a bug and assign it to yourself.Self-assigned bugs like this are mostly ignored by the bots and you can ignore the rules for such issues.(When you leave the team, we'll likely close these issues.)Some people like to use bugs like this as "umbrella" bugs for tracking work.You may also find it useful to use GitHub projects to manage work items.Flaky testsWhen a test flakes, a P0 bug is automatically filed with the label [team: flakes](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22team%3A+flakes%22+sort%3Aupdated-asc).This issue should be investigated with all due haste, and a priority level should then be assigned to the issue.At any particular time, the most flaky tests should remain P0.However, flakes that are hard to pin down may be downgraded in priority (e.g. to P1).Please do not ignore the issue entirely, however, and make sure to close bugs once they are resolved, even if it's by magic.See also: [Reducing test flakiness](../../infra/Reducing-Test-Flakiness.md)

--------------------------------

With each beta we need to test that there are no regressions.We have lots of automated tests, but sometimes the thing that breaks is something we hadn't thought to test (or haven't figured out how to test) and so human testing is important!When to test betas
We announce betas on our Discord (see the [Chat](../contributing/Chat.md) page for the invite link), in the #releases channel, about once a month.How to get a beta buildWhen a beta build is announced, switch to the beta channel:`flutter channel beta && flutter upgrade`If you get a `git` error, then you probably have a contributor checkout of Flutter.Use git instead:
`git fetch upstream && git checkout upstream/beta`Either way, check that everything is as you expect:
`flutter --version`It should specify the version number that you are testing.How to test a beta buildThis is the easiest part: just use it!Test it on your projects, try running demos, try doing things you depend on normally.Tell others who are testing the beta branch what you're doing in #quality-assurance on Discord!In time, we will collect some specific things to try out here.

--------------------------------

This wiki is primarily aimed at engineers building or making contributions to Flutter.If you are new to Flutter, then you will find more general information on the Flutter project, including tutorials and samples, on our website at [flutter.dev](https://flutter.dev).For specific information about Flutter's APIs, consider our API reference which can be found at the [api.flutter.dev](https://api.flutter.dev/).If you want to know what we're likely to do in the future, our [roadmap](./roadmap/Roadmap.md) may be of interest.If you intend to contribute to Flutter, welcome!You are encouraged to start with [our contributor guide](../CONTRIBUTING.md), which helps onboard new team members.It points to the most relevant pages on this wiki.You are also invited to join our [Discord](./contributing/Chat.md) server.Index of notable sections- [Actionable bugs](./triage/README.md#what-makes-an-issue-actionable), and the closing of unactionable bugs- [Breaking changes](./contributing/Tree-hygiene.md#handling-breaking-changes)- [Cherrypick process](./releases/Flutter-Cherrypick-Process.md)- [Closing issues](./contributing/issue_hygiene/README.md#closing-issues)- [Dashboards](./infra/Dashboards.md)- [Debugging a broken engine autoroll](./engine/Debugging-the-engine.md#bisecting-a-roll-failure)- [Deprecations](./contributing/Tree-hygiene.md#deprecations)- [Design documents](./contributing/Design-Documents.md)- [Discord](./contributing/Chat.md)- [Engineering Philosophy](./contributing/Style-guide-for-Flutter-repo.md#philosophy)- [Flaky tests](./contributing/issue_hygiene/README.md#flaky-tests)- [flutter.dev is down](./In-case-of-emergency.md)- [Issue prioritization](./contributing/issue_hygiene/README.md#priorities)- [Labels](./contributing/issue_hygiene/README.md#labels)- [Milestones](./contributing/issue_hygiene/README.md#milestones)- [Plugin compatibility policy](./contributing/Style-guide-for-Flutter-repo.md#plugin-compatibility)- [Reviewing code](./contributing/Tree-hygiene.md#getting-a-code-review)- [RFC process](./contributing/issue_hygiene/README.md#how-to-propose-a-specific-change)- [Status of popular issues](./contributing/issue_hygiene/Popular-issues.md)- [Style guide for Flutter repo](./contributing/Style-guide-for-Flutter-repo.md)- [Submitting code, process for](./contributing/Tree-hygiene.md#overview)- [Support levels, definitions of](./about/Values.md#support)- [Symbolicating stack traces](./engine/Crashes.md)- [Threading in the Engine](./about/The-Engine-architecture.md#threading)- [When will my bug be fixed?](./contributing/issue_hygiene/README.md#when-will-my-bug-be-fixed)- [Security best practices](./infra/Security.md#best-practices)

--------------------------------

If you've already built the engine and have the configuration set up but merely need a refresher on
actually compiling the code, see [Compiling the engine](Compiling-the-engine.md).If you are checking these instructions to refresh your memory and your fork of the engine is stale,
make sure to merge up to HEAD before doing a `gclient sync`.Getting dependenciesMake sure you have the following dependencies available:- A Linux, macOS, or Windows host
- Linux supports cross-compiling artifacts for Android and Fuchsia, but not iOS.- macOS supports cross-compiling artifacts for Android and iOS.- Windows doesn't support cross-compiling artifacts for any of Android, Fuchsia, or iOS.- `git` (used for source version control).- An ssh client (used to authenticate with GitHub).- `python3` (used by many of our tools, including `gclient`).- Chromium's[depot_tools](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up)(Which includes gclient)-Add the `depot_tools` directory to the front of your `PATH`.- On macOS and Linux: `curl` and `unzip` (used by `gclient sync`).- On Linux: The `pkg-config` package.- On Windows:
- Visual Studio 2017 or later (required for non-Googlers only).- [Windows 10 SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/) (required for non-Googlers only).Be sure to install the "Debugging Tools for Windows" feature.- On macOS:
- Install the latest Xcode.- On Apple Silicon arm64 Macs, install the Rosetta translation environment by running `softwareupdate --install-rosetta`.You do not need to install [Dart](https://www.dartlang.org/downloads/linux.html).A Dart toolchain is automatically downloaded as part of the "Getting the source"
step.Similarly for the Android SDK, it is downloaded by the `gclient sync` step below.Getting the source
Run the following steps to set up your environment:
[!IMPORTANT]Non-Googler Windows users should set the following environment variables to point`depot_tools` to their Visual Studio installation directory:
- `DEPOT_TOOLS_WIN_TOOLCHAIN=0`- `GYP_MSVS_OVERRIDE_PATH=C:\Program Files\Microsoft Visual Studio\2022\Community`
- Use the path of your installation.Clone the Flutter source code.As of late 2024, the engine source is part of the main [flutter/flutter repo](https://github.com/flutter/flutter).The convention is to fork this repo and point `origin` to your fork and `upstream` to `git@github.com:flutter/flutter.git`.See [Setting up the Framework development environment](https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#set-up-your-environment) for more.[!IMPORTANT]On Windows, the following must be run as an Administrator due to [a known issue](https://github.com/flutter/flutter/issues/94580).[Setup a .gclient file](../../../../../engine/README.md) in the repository
root (the `flutter/flutter` repository root), and run `gclient sync`.The "Engine Tool" called `et` is useful when working with the engine.It is located in the [flutter/engine/src/flutter/bin](https://github.com/flutter/flutter/tree/0c3359df8c8342c8907316488b1404a216f215b6/engine/src/flutter/bin) directory.Add this to your `$PATH` in your `.rc` file: e.g. on UNIX, using `export PATH=/path/to/flutter/engine/src/flutter/bin:$PATH`.Additional Steps for Web Engine
Amend the generated `.gclient` file in the root of the source directory to add the following:```
solutions = [
  {
    # Same as above...
    "custom_vars": {
      "download_emsdk": True,
    },
  },
]```Now, run:```
gclient sync```Next steps:
- [Compiling the engine](Compiling-the-engine.md) explains how to actually get builds, now that you have the code.- [The flutter tool](https://github.com/flutter/flutter/blob/master/docs/tool/README.md) has a section explaining how to use custom engine builds.- [Signing commits](https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md), to configure your environment to securely sign your commits.Editor autocomplete supportXcode [Objective-C++]On Mac, you can simply use Xcode (e.g., `open out/host_debug_unopt/products.xcodeproj`).VSCode with C/C++ Intellisense [C/C++]VSCode can provide some IDE features using the [C/C++ extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools).It will provide basic support on install without needing any additional configuration.There will probably be some issues, like header not found errors and incorrect jump to definitions.Intellisense can also use our `compile_commands.json` for more robust functionality.Either symlink `src/out/compile_commands.json` to the project root at `src` or provide an absolute path to it in the `c_cpp_properties.json` config file.See ["compile commands" in the c_cpp_properties.json reference](https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference).This will likely resolve the basic issues mentioned above.For example, in `src/.vscode/settings.json`:```
{
  "clangd.path": "buildtools/mac-arm64/clang/bin/clangd",
  "clangd.arguments": [
    "--compile-commands-dir=out/host_debug_unopt_arm64"
  ],
  "clang-format.executable": "buildtools/mac-arm64/clang/bin/clang-format"
}```... which is built with:```
THIS IS END BLOCK MARKER.
# M1 Mac (host_debug_unopt_arm64)
./tools/gn --unopt --mac-cpu arm64 --enable-impeller-vulkan --enable-impeller-opengles --enable-unittests```For adding IDE support to the Java code in the engine with VSCode, see .Zed Editor
[Zed](https://zed.dev/) can be used to edit C++ code in the Engine.To enable analysis and auto-completion, symlink `src/out/compile_commands.json` to the project root at `src`.
cquery/ccls (multiple editors) [C/C++/Objective-C++]Alternatively, [cquery](https://github.com/cquery-project/cquery) and a derivative [ccls](https://github.com/MaskRay/ccls) are highly scalable C/C++/Objective-C language server that supports IDE features like go-to-definition, call hierarchy, autocomplete, find reference etc that works reasonably well with our engine repo.They([https://github.com/cquery-project/cquery/wiki/Editor-configuration](https://github.com/cquery-project/cquery/wiki/Editor-configuration)) [supports](https://github.com/MaskRay/ccls/wiki/Editor-Configuration) editors like VSCode, emacs, vim etc.To set up:
- Install cquery- `brew install cquery` or `brew install ccls` on osx; or- [Build from source](https://github.com/cquery-project/cquery/wiki/Getting-started)- Generate compile_commands.json which our GN tool already does such as via `src/flutter/tools/gn --ios --unoptimized`- Install an editor extension such as [VSCode-cquery](https://marketplace.visualstudio.com/items?itemName=cquery-project.cquery) or [vscode-ccls](https://marketplace.visualstudio.com/items?itemName=ccls-project.ccls)- VSCode-query and vscode-ccls requires the compile_commands.json to be at the project root.Copy or symlink `src/out/compile_commands.json` to `src/` or `src/flutter` depending on which folder you want to open.- Follow [Setting up the extension](https://github.com/cquery-project/cquery/wiki/Visual-Studio-Code#setting-up-the-extension) to configure VSCode-query.Using VSCode as an IDE for the Android Embedding [Java]- Install the extensions vscjava.vscode-java-pack (Extension Pack for Java) and vscjava.vscode-java-dependency (Project Manager for Java).- Right click on the `shell/platform/android` folder in the engine source and click on `Add Folder to Java Source Path`.This creates an anonymous workspace and turns those files from ["syntax mode"](https://code.visualstudio.com/docs/java/java-project#_syntax-mode) to "compile mode".At this point, you should see a lot of errors since none of the external imports are found.- Find the "Java Dependencies" pane in your Explorer view.Use the "Explorer: Focus on Java Dependencies View" command if hidden.- Refresh the view and find the "flutter_*" project.There should be a "_/shell/platform/android" source folder there.- In the "Referenced Libraries" sibling node, click the + button, navigate to `engine/src/third_party/android_embedding_dependencies` and add the entire folder.This is the equivalent of adding```"java.project.referencedLibraries": [
  "{path to engine}/src/third_party/android_embedding_dependencies/lib/**/*.jar"
]```to your VSCode's settings.json for your user or for your workspace.- If you previously had a `shell/platform/android/.classpath`, delete it.Using Android Studio as an IDE for the Android Embedding [Java]Alternatively, Android Studio can be used as an IDE for the Android Embedding Java code.See docs
at [https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#editing-java-code](https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#editing-java-code) for
instructions.VSCode Additional Useful Configuration
- Create [snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets) for header files with [this configuration](https://github.com/chromium/chromium/blob/master/tools/vscode/settings.json5).This will let you use `hdr` keyboard macro to create the boiler plate header code.Also consider some of [these settings](https://github.com/chromium/chromium/blob/master/tools/vscode/settings.json5) and [more tips](https://chromium.googlesource.com/chromium/src/+show/lkgr/docs/vscode.md).- To format GN files on save, [consider using this extension](https://marketplace.visualstudio.com/items?itemName=persidskiy.vscode-gnformat).

--------------------------------

If you want to write a design doc for people to review, we recommend using Google Docs.We have a template you can use, at [flutter.dev/go/template](https://flutter.dev/go/template).It describes the process for minting a `flutter.dev/go/foo` shortlink for your design doc.We recommend you use that template so that people can immediately recognize that this is a Flutter design document and that it is shared publicly.After you have created your design doc, the next step is to create a tracking GitHub issue for it.File a new issue to track the design doc using [the design doc issue template](https://github.com/flutter/flutter/issues/new?template=7_design_doc.yml).Assign it to yourself.Add the label "design doc" to the issue.Don't forget to configure your document's Sharing settings so that everyone has comment access.The idea of sharing the document in this way is not necessarily to proactively obtain feedback from the entire community; it is to make it possible for people to share the document with anyone in the community, whether they work for your employer or not, and whether you have personally shared the document with them yet or not.The template discusses how to create a shortlink for your design doc (flutter.dev/go/...).When creating the shortlink, remember to test the URL you are publishing in an incognito window!Googlers: Design docs must be created by non-corp accounts!See [Contributor Access](Contributor-access.md#fcontriborg-accounts) for details on getting `fcontrib.org` accounts if you don't want to use your personal GMail account.When you implement a design, document it in the source code in detail.The API documentation is the usual place where we document our designs.It's perfectly reasonable for API docs to be multiple pages long with subheadings (e.g. see the docs for [RenderBox](https://master-api.flutter.dev/flutter/rendering/RenderBox-class.html)!).Do not assume that anyone will ever read your design doc after the discussion has finished.Similarly, do not assume that anyone will look at closed GitHub issues or PR discussions.See also:- [design doc](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22design+doc%22) GitHub issue label: list of all design documents.- [Archive of design documents](https://github.com/flutter/flutter/issues/151486) from before the [design doc](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22design+doc%22)GitHub issue label was introduced.Purpose of design docsThe Flutter project uses design docs as a tool for guiding discussions.Decisions are made in PRs, not in design docs.Approvals are given in PRs, not in design docs.Soliciting feedbackIf you wish to get feedback on your design doc, you have many options for doing so, depending on how much feedback you want:-If there is an issue already filed on the topic, definitely put a link to the design doc there.People who have found the issue and want to get updates on the topic will have subscribed to the issue, so this is the most effective way to communicate with them.- Post the link on Discord.You can post it to #hidden-chat to just get feedback from team members.You can post it to one or more of the #hackers-* channels if you want feedback from people who are interested in the general area.You can post it to the global #hackers channel if you want feedback from anyone interested in working on Flutter.If you really want feedback, you can post a request to #announcements and publish it to any server that is following ours.- If you want feedback from the broad community, tweet out the link and let other team members know so that we can retweet it.Similarly, you can post the request to one of the Flutter reddit channels, such as r/FlutterDev.- You can ask our developer relations (devrel) team to broadcast a request for comments.(Start by asking in #hackers-devrel; if nobody responds, ping Hixie on that channel.)- You can ask our user experience researcher (UXR) team to study the proposal and potentially test it with real users, or collect relevant data from the next quarterly survey.(Start by asking in #hackers-devexp; if nobody responds, ping Hixie on that channel.)- If you have commit access, you can ask to talk about the design doc at the next Dash Forum meeting (normally held on Tuesdays at 11am US west coast time).Ping Hixie on #hidden-chat to get on the schedule, or use the form to request to be added, the link for which is pinned in the #hidden-chat channel.How to get good feedback
Often, you will solicit feedback, and get none.There are many causes of this.Maybe your proposal is unclear, and so people don't really know what to suggest.People are often reluctant to provide broad criticisms.Consider if you can improve the clarity of your design doc.Do you have a clear problem statement separate from your solution?Do you show example code of the problem?Do you have screenshots or diagrams of the problem?For your solution, do you start from first principles and explain it?Often it's easy to forget that your readers don't have the same context you do, so without a gentle introduction they'll get lost very quickly.Do you have sample code of your proposed solution(s)?Do you need more diagrams or screenshots?Ask someone you trust if they think your document is sufficiently clear.Maybe your proposal is too big for anyone to get their head around.Can it be split into smaller components, so that each one can be understood separately, before bringing all the pieces together into your grand design?(You can do this all in the same doc.)Maybe people don't know what to provide feedback about.If you have an area you are particularly interested in getting feedback about, it can be very helpful to explicitly invite such feedback.Maybe you are asking the wrong people.Consider the suggestions in the earlier section, and reach out explicitly to people who are affected by your proposal.Consider escalating, asking more and more people until you get the volume of feedback you desire.Maybe everyone agrees.Consider leaving some intentionally sketchy details in your proposal to encourage people to engage!(This is a risky strategy, sometimes people end up liking your "bad" ideas...)Maybe your proposal is too obvious or uninteresting.Sometimes, a change is so uncontroversial and simple that frankly it would be better just to write the PR and submit it.Content in design docs
Screen capturesThe easiest way to capture videos for design docs is using macOS.Press Command+Shift+5 for a whole bunch of options.DiagramsAs we use Google Docs for the text portion of design docs, the easiest way to draw diagrams is using Google Diagrams.Select `Insert` > `Drawing` > `New` to create a new diagram.

--------------------------------

tl;dr- Regressions should be [reverted first](../infra/Landing-Changes-With-Autosubmit.md) and questions asked later.Bringing the tree to green is higher priority.- A breaking change is one that breaks the tests in the flutter/tests repo, and those need a migration guide.- Expect that a new patch will be reviewed within two weeks, unless it is fixing a P0 bug in which case it should be reviewed the same day.If it has not been reviewed in that timeframe, reach out on [Chat](Chat.md).Remember that reviewers are human beings with additional professional and personal responsibilities.IntroductionThis page covers how to land a PR and other aspects of writing code for
Flutter other than the actual writing of the code.For guidance on
designing APIs, documenting, and formatting your code, see the
[Style guide for Flutter repo](Style-guide-for-Flutter-repo.md) document.OverviewThe general process for submitting code to a Flutter repository is as follows:-Fork the repository on GitHub (see the[contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md)
for advice on doing this and in general setting up your development environment).-If there is not already an issue covering the work you are interested in doing,then file a new bug to describe the issue you are addressing.Having an issue means
that if we have to revert the PR, we can reopen the issue and not lose track of the
fact that the work didn't fully land.Similarly if someone works on a PR then stops
before it can land, having an issue means we have somewhere to point to the code when
we close the PR without landing it, so other people can take it over.- Discuss your design on the issue.See [Design Documents](Design-Documents.md) for advice.You may find it useful to create a Google Doc to
solicit feedback (use the template at [flutter.dev/go/template](https://flutter.dev/go/template)).You may wish to e-mail the mailing list, or discuss the topic
on our [Chat](Chat.md) channels.The more buy-in you get from the rest of the
team (especially the relevant leads), the easier the rest of the process will be.You can put the label "proposal" on your issue to indicate that you have a design
up for discussion in the issue.-If the work you are doing affects our privacy surface, such as modifying howwe collect analytics, crash logs, or the like, then please reach out to a Googler
to discuss your changes (you'll want to start a Google Doc to
solicit feedback, use the template at [flutter.dev/go/template](https://flutter.dev/go/template)),
who will be happy to loop in one of our engineers who explicitly focus on privacy issues
so that they're able to give feedback on the work you plan to do.- Create a branch off of `main` (or if the repository has not yet switched tohaving a `main` branch, from `master`) on your GitHub fork of the repository, and implement
your change.Make sure it is tested (see the next section for details).You must follow the guidelines described in the [Style guide for Flutter repo](Style-guide-for-Flutter-repo.md).Files must not have trailing spaces.For the engine repository, C, C++, and Objective-C code should be formatted with`clang-format` before submission (use `buildtools/<OS>/clang/bin/clang-format --style=file -i`).- Submit this branch as a PR to the relevant Flutter repository.(See also: [Signing commits](./Signing-commits.md))- Get your code reviewed (see below).You should probably reach out to the relevant

expert(s) for the areas you touched and ask them to review your PR directly.GitHub sometimes recommends specific reviewers; if you're not sure who to ask,
that's probably a good place to start.- Make sure your PR passes all the pre-commit tests.Consider running some of thepost-commit tests locally (see the[devicelab](https://github.com/flutter/flutter/blob/main/dev/devicelab/README.md)
directory).If any tests break, especially the `customer_testing` tests, please
see the breaking change policy section below for details on how to proceed.The `luci-flutter` test isn't checking your PR, it's letting you know
whether the tree itself is passing the tests right now (including post-
commit tests).If the trees or dashboards are showing any regressions, only fixes
that improve the situation are allowed to go in.- Once everything is green and you have an LGTM from the owners of the code you are affecting (or someone to whom they

have delegated), and an LGTM from any other contributor who left comments, add the "autosubmit" label if you're in the flutter-hackers github group.A bot will land the patch when it feels like it.If you're not in the flutter-hackers group a reviewer will add the label for you.- Watch the post-commit tests on the [dashboard](https://dashboard.flutter.dev/#/build) to make sure everything passes.If anythinggoes wrong, revert your patch and study the problem.You should aim to be the one to revert your patch.You will be racing everyoneelse on the team who will also be trying to revert your patch.(See below for guidance on reverting PRs.)See also: [What should I work on?](What-should-I-work-on.md)
Tests
Every change in the flutter/engine, flutter/flutter, and flutter/packages repos
must be tested; consider using the code coverage tools to check that all your
new code is covered by tests (see [Test coverage for package:flutter](./testing/Test-coverage-for-package-flutter.md)).There is an automatic exception for PRs that:
- only remove code (no modified or added lines) to remove a feature or remove dead code.- removing code to fix a bug still needs a test, the exemption does not apply- only affect comments (including documentation).- only affect code inside the `.github` directory or `.ci.yaml` config files.- only affect `.md` files.- are generated by automated bots (rollers).If a reviewer says a PR should have a test, then it needs a test regardless of the exemptions above.Feel free to update the bot's logic to catch more cases that should be
automatically exempt ([in the cocoon repo](https://github.com/flutter/cocoon/blob/main/app_dart/lib/src/request_handlers/github/webhook_subscription.dart)).[!NOTE]PRs adding data-driven fixes require tests that fall under the test_fixes
directory, but are not yet recognized by the bot as being tested.The following kinds of PRs are not automatically exempt and require an exemption even if the answer may be obvious:
- refactors with no semantic change (e.g. null safety migrations)- configuration changes in the aforementioned repos- changes to analysis (fixing lints, turning on lints)- changes to test infrastructure- manual dependency rolls- fixes to existing tests- cosmetic fixes to unpublished example apps.In the repositories listed above, a bot will comment on your PR if you need an explicit exemption.[!IMPORTANT]If the PR is in a repository that is not listed above, meaning is not
supported by the bot, then it is still a responsibility of the pull request
reviewer to make sure that tests have been added to support the code change.Test Exemptions
A `@test-exemption-reviewer` member on [Discord](Chat.md) can exempt a PR by
commenting `test-exempt: <reason>`.The reviewer of the PR (not the test exemption reviewer) should first:
- ensure that the PR meets the criteria for exemption- LGTM the PR before requesting the exemption, or clarify why an LGTM was
not given.Exemption reviewers are a small volunteer group - all reviewers should
feel empowered to ask for tests.Using git
Assuming your environment has been configured according to the instructions in
[Setting up the Engine development environment](../engine/contributing/Setting-up-the-Engine-development-environment.md),
[Setting up the Framework development environment](Setting-up-the-Framework-development-environment.md), or
[Setting up the Packages development environment](../ecosystem/contributing/Setting-up-the-Packages-development-environment.md),
follow these steps to start working on a patch:
- `git fetch upstream`- `git checkout upstream/main -b name_of_your_branch`- `flutter update-packages`- Hack away.- `git commit -a -m "<your informative commit message>"`- `git push origin name_of_your_branch`GitHub provides you with a link for submitting the pull request in the message output by `git push`.Because `git pull` will often miss tags that are used to define the release of the flutter tool, it is recommended to use `git fetch` typically to avoid version mismatches when running `flutter update-packages`.Use `git fetch upstream; git rebase upstream/main; git push origin your_branch_name` to update your PRs, rather than using merge, because that way our tooling will recognize your PR as being up to date.(Otherwise it'll try testing against the tests at the time you originally branched.)Also, be wary of force pushing to your PR branch if you are dealing with golden image tests; see [gold troubleshooting instructions](./testing/Writing-a-golden-file-test-for-package-flutter.md#troubleshooting).Please make sure all your patches have detailed commit messages explaining what the problem was and
what the solution is.(Avoid GitHub @-mentions in commit messages.GitHub turns this into a notification
for the person any time someone rebases your commit on their own fork.On a project of this size, that's
rather disruptive.If you need to @-mention someone, do it as a separate comment on the PR.)You must complete the
[Contributor License Agreement](https://cla.developers.google.com/clas).You can do this online, and it only takes a minute.Getting a code review
Every PR must be code-reviewed before check-in, including things like
rolling a dependency.Getting a review means that a regular Flutter
contributor (someone with commit access; see [contributor access](Contributor-access.md) for details) has "approved" the PR in the
GitHub UI.We call this "getting an LGTM" ("looks good to me").If you are not yourself someone with commit access, then a second person
with commit access must also review and approve your PR.This ensures that
two people with commit access (trusted contributors) agree on every commit.Why
Code review serves many critical purposes.There's the obvious
purpose: catching errors.Even the most experienced engineers
frequently make errors that are caught by code review.But there are
also many other benefits of code reviews:
-It spreads knowledge among the team.Since every line of code willhave been read by two people, it's more likely that once you moveon, someone else will understand the code.- It keeps you honest.Knowing that someone will be reading yourcode, you are less tempted to cut corners and more motivated towrite code you are proud of.- It exposes you to different modes of thinking.Your code reviewerhas probably not thought about the problem in the same way youhave, and so may have a fresh perspective and may find you a better
way to solve the problem.We recommend you consider
[these suggestions](https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html)
for addressing code review comments on your PR.WhenIf you're working on a big patch, don't hesitate to get reviews early,
before you're ready to check code in.Also, don't hesitate to ask for
multiple people to review your code, and don't hesitate to provide unsolicited
comments on other people's PRs (although approvals in the GitHub UI
should be reserved for those with contributor access).The more
reviews the better.If nobody reviews your PR within two weeks, you can ask for
a review via our [Chat](Chat.md) channels.Start by asking in #hackers,
saying what your patch does and providing a link.Who
PRs are assigned reviewers weekly.The precise process varies by team but tends to be combined with issue [triage](../triage/README.md).Code should be reviewed by the owner (tech lead) of the area(s) of the codebase that you are changing,
or someone to whom they have delegated that authority.If anyone else leaves comments, please also wait for their approval (LGTM) before landing code.If nobody has reviewed your code after a week, then reach out on our [Chat](Chat.md) channels.The `#hackers-new` channel is a good place to ask for help if you're a new contributor.For PRs affecting the `material` and `cupertino` libraries, team members are expected to seek reviewers directly;
they will not be assigned during PR triage.How
Code review status is managed via GitHub's approval system.PRs should
not be merged unless one or more contributors with commit access (at
least one of which should be very familiar with the code in question)
have approved the PR in the GitHub UI.Reviewers should carefully read the code and make sure they understand
it.A reviewer should check the code for both high level concerns,
such as whether the approach is reasonable and whether the code's structure makes sense, as well as
lower-level issues like how readable the code is and adherence to the
[Flutter style guide](Style-guide-for-Flutter-repo.md).Use [these best practices](https://mtlynch.io/human-code-reviews-1/)
when reviewing code and providing comments.As a reviewer, you are the last line of defense.- Did the author sign the CLA?If not, ask them to do so and don't look at the code.- Take a step back.What problem is the PR trying to solve?Is it a real problem?- What other solutions could we consider?What could we do to make this even better?- Is it the best API?See our [philosophy](Style-guide-for-Flutter-repo.md#philosophy) section.Look for state duplication, synchronous slow work, complecting, global state, overly-specific APIs, API cliffs and API oceans, API design in a vacuum (without a customer).If these terms don't make sense, read the style guide again. :-)- Is it the best implementation?Again, see our [style guide](Style-guide-for-Flutter-repo.md#coding-patterns-and-catching-bugs-early), in particular its section on good coding patterns.Are there hacks?Are we taking on more technical debt?Think of ways in which the code could break.- Is it testable?Is it tested?All code must be tested.Are there asserts?Encourage liberal use of assertions.- Look for mistakes in indenting the code and other trivial formatting problems.- Is new code licensed correctly?- Is the documentation thorough and useful?Look for useless documentation, empty prose, and breadcrumbs.See the [documentation section](Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc) of our style guide for what that means.- Check for good grammar in API docs and comments.Check that identifiers are named according to our conventions.Once you are satisfied with the contribution, and only once you are satisfied,use the GitHub "Approval" mechanism (an "LGTM" comment is not sufficient).If you feel like you are being worn down, hand the review to someone else.Consider
our [conflict resolution](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md#conflict-resolution)
policy if you feel like you are being forced to agree to something you don't like.Reviewers should not give an LGTM unless the patch has tests that verify
all the affected code, or unless a test would make no sense.If you
review a patch, you are sharing the responsibility for the patch with
its author.You should only give an LGTM if you would feel confident
answering questions about the code.In general, reviewers should favor approving a PR once it is in a state where it definitely improves the overall code health of the system being worked on, even if the PR isn't perfect.Reviewers should also provide positive feedback throughout the process, to offset the impact of the stream of critiques that is code review.Reviewers should always feel free to leave comments expressing that something could be better, but if it's not very important, prefix it with something like "Shouldn't block this PR but: " to let the author know that it's just a point of polish that they could choose to ignore in the current PR (these should be documented in TODO comments with a tracking issue).If you are not a regular Flutter contributor (someone with commit access),
we very much welcome your reviews on code contributions in the form of comments
on the code, but please refrain from approving or LGTM'ing changes, as it
confuses PR authors, who may think your approval is authoritative and merge
the PR prematurely.When commenting on a PR, keep in mind the following mantra:
- Be polite and grateful.Graceful professionalism.- Explain what is happening.Explain why it is happening.- Provide next steps.Set expectations.It's better to close a PR than to leave it in limbo.See also: [How to review a Flutter PR](https://docs.google.com/presentation/d/1apKVLEAEqxINby49JhLWSLI-CMH0nxCcnrf90nW4cts/edit?usp=sharing) presentationWhat (to do when the patch is abandoned)Sometimes the contributor is unable to finish the work of landing the patch.In that case, if the PR has promise, we may close it but mention it on the relevant issue so that other interested parties can pick it up.Such issues are given the label [has partial patch](https://github.com/flutter/flutter/labels/has%20partial%20patch).Landing a patchOnce you have submitted your patch and received your LGTM, if you do not have commit access to
the repository yet, then wait for one of the project maintainers to submit it for you.If you do have access, add the "autosubmit" label.A bot will land the PR for you.Squashing commitsWhen you squash commits, by default, GitHub will concatenate all your commit messages to form a unified commit message.This often yields an overly verbose commit message with many unhelpful entries (e.g. "fix typo").Please double-check (and hand-edit if necessary) your commit message before merging such that the message contains a helpful description of the overall change.Tree breakage (regressions in functionality)If a check-in has caused a regression on the main branch (sometimes "master") for any of the flutter repositories,
revert (roll back) the check-in (even if it isn't yours).Do not attempt to forward-fix post-submit test failures.There is no shame in making mistakes!Reverts happen all the time and are a normal part of engineering.To revert a PR, just add the `revert` label to it.For more details, see [Landing Changes With Autosubmit](../infra/Landing-Changes-With-Autosubmit.md).Avoid "Revert "Revert "Revert "Revert "Fix foo"""" commit messages
Please limit yourself to one "Revert" per commit message, otherwise we won't
have any idea what is actually landing.Is it putting us back to where we were before?Is it adding new code?Is it a controversial new feature that actually caused
a regression before but is now fixed (we hope)?Only use "Revert" if you are actually returning us to a known-good state.Also avoid using "Reland" in the commit message.When you later revert the revert, just land the PR afresh with the original commit message,
possibly updated with the information since collected, and include a link
to the original PR and to the revert PR so that people can follow the breadcrumbs later.Regressions in performance
After each check-in, please monitor the [performance dashboards](https://flutter-dashboard.appspot.com/).If you see a regression (any of the charts increasing after your commit), please
follow these steps:
- Comment on the PR acknowledging the regression.- If the regression is expected and is a desirable trade-off (e.g. disk size
increased slightly in exchange for a significant improvement in speed), thenrebaseline the relevant benchmarks (log in, then click the magnifying glass
at the top right of each chart, then click the button to auto rebaseline and
commit).- If the regression is not expected, and may be a problem in your PR, revertyour PR and investigate.- If the regression is not expected, and is quite severe, revert your PR andinvestigate.- If the regression is not expected, and is not severe, and is definitely nota problem in your PR (e.g. you changed a comment and the analyzer performancegot worse, or you deleted a README and the rasterizer slowed down), then file
a bug, labeled with the "regression", "performance", `P0` labels, and either
investigate or delegate to someone to investigate.The investigation should be
considered a high priority.It is your responsibility to make sure that the
cause is understood within a few days.Performance regressions are not a problem so long as they are promptly dealt with.Therefore, Flutter considers all unexpected performance regressions to be `P0` until
we have it under control (e.g. we know what caused it and either have a fix under
way or have determined it is an acceptable trade-off).Performance regressions caused by auto-roller commits
Although reverting a normal commit that caused performance regressions is the default
behavior, reverting an [auto-roller](../infra/Autorollers.md)
(e.g., an engine-roller commit like [https://github.com/flutter/flutter/commit/fdcb57b69eff2162e9aead6dec0f8058788e7608](https://github.com/flutter/flutter/commit/fdcb57b69eff2162e9aead6dec0f8058788e7608))
commit could cause some complications:
- The auto-roller commit usually include multiple commits of the source repo (e.g., engine-rollercommit includes multiple commits of [https://github.com/flutter/engine](https://github.com/flutter/engine)).This can be appliedrecursively as the engine-roller commit includes a dart-roller commit, or a skia-roller commit.Therefore, a roller commit could actually include a ton of leaf-level commits, which makes it
really hard to triage which leaf commit actually caused the regression.- The auto-roller will try to roll again as soon as possible that will reland any changes revertedby a Flutter commit revert.So in order to keep the revert effective, one has to either(1) pause the auto-roller, or (2) revert the leaf commit in the source repo.- If the auto-roller is paused for a long time (say 1 day), the source repo will accumulate manycommits.That makes the next roll very hard to manage: it's difficult to triage a build failureor a new performance regression caused by the next roll, since that roll will include all the commits
in the paused period.Therefore, reverting a roller commit or pausing the auto-roller is
NOT the default action if it causes a performance regression.The default action should be to file an issue with labels "performance", "regression", and `P0`
immediately, and start investigating which leaf-commit caused the regression.Once the leaf-commit
is identified, check if it's an expected trade-off.If so, remove the `P0` label and try to see
if there's any way to mitigate the regression.If not, revert the leaf commit in the source repo
and let the auto-roller apply that revert.Once the revert is rolled into Flutter, close the issue.Handling interdependent/multi-repo changesIf you're working on a feature that requires changes in both the [framework](https://github.com/flutter/flutter) and [engine](https://github.com/flutter/flutter) repos, you'll need to make 2 separate PRs.In such situation CI on the framework PR may fail because it depends on engine code that is not (yet) on engine repo's main branch.In such situation, you need to land the changes in the engine first, wait for them to roll into the framework's main branch, and then rebase your framework PR.Handling breaking changesIn general, we want to avoid making changes to Flutter, our plugins, or our packages, that force developers using Flutter to change their code in order to upgrade to new versions of Flutter.See [our compatibility policy](https://flutter.dev/docs/resources/compatibility).Sometimes, however, doing this is necessary for the greater good.We want our APIs to be
intuitive; if being backwards-compatible requires making an API into something that we would
never have designed that way unless forced to by circumstances, then we should instead break
the API and make it good.The process for making breaking changes is as follows:1. Determine if your change is a breaking changeImplement the change you wish to see and run the existing tests against your new code (without having changed the tests first).Changes that break (i.e. require changes to) one or more of the contributed tests are considered "breaking changes".The "contributed tests" are:
- Those in the [customer_testing](https://github.com/flutter/tests) shard on `flutter/flutter` PRs.- Additional test suites that we have been allowed to run but that are not public.(Notably, Google allows us to run several tens of thousands of [proprietary tests](../infra/Understanding-Google-Testing.md) on each commit.)There are no exemptions to this policy, because these tests run in our CI and breaking them will close the tree.In cases where these tests pass but we can nonetheless imagine reasonable scenarios where developers would be affected negatively, by courtesy, once the change has landed, engineers are encouraged to announce the changes by sending an e-mail to [flutter-announce@](https://groups.google.com/g/flutter-announce), a message to the `#announcements` channel on our [Chat](Chat.md), and tagging the relevant issues with the [c: API break label](https://github.com/flutter/flutter/labels/c%3A%20API%20break) (such that they will be included in our release notes).However, we do not consider these breaking changes.(One reason to do this would be if we see our own tests being significantly affected, even if no contributed test actually fails.)2. Evaluate the breaking changeIf your change counts as a breaking change, seriously consider whether it is truly necessary and beneficial.Consider writing a [design document](Design-Documents.md).Discuss it with your code reviewer.Raise it in [Chat](Chat.md).3. Prepare your change.If you decide your change is valuable enough to deploy, adjust your PR so that it introduces the new functionality, API, behavior change, etc, in an opt-in fashion, thus avoiding the immediate breakage.For example, rather than replacing a widget with another, introduce the new widget and discourage use of the old one.Rather than changing the order in which a certain argument is processed, provide a flag that selects which order the arguments will be processed in.When changing the semantics of an API with a temporary opt-in, a three-phase change is needed (adding the new API and opt-in, then removing the old API, then removing the opt-in.)If possible, avoid four-phase deprecations (adding a new API with a temporary name and deprecating an old API, removing the old API, changing the new API to the old name and deprecating the temporary name, and finally removing the temporary name), because they involve a lot of churn and will irritate our developers.Stage your change and the documentation for your change.Typically this will be two or more PRs, plus PRs to fix the tests that were broken (see step 1), as well as writing a migration guide as a PR to the Website repository.If possible, include flutter fixes to aid users in migration.Whether or not the change is supported by flutter fix should be included in the migration guide.To learn about authoring fixes, see [Data driven Fixes](Data-driven-Fixes.md).Use our [breaking change migration guide template](https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/template.md) (follow all the instructions in the comments) to create the migration guide that describes the change.Do not land the migration guide at this time.You will need to update it before you land it in the last step.4. Land your change.Once you are ready, have received feedback, iterated on your design and your migration guide, land your initial change and start migrating clients.Do not yet land the migration guide.Once all the clients are migrated, land your final change.(You may have several iterations here if you have a multiphase roll-out.)During this process, each individual PR does not break any tests, so it should not block any autorollers.5. Document the change, including clear documentation for migrating code, with samples, and clear rationales for each changeOnce everything has landed:- update your migration guide based on your experience migrating everyone,- update the timeline on the guide, and push it to [the flutter.dev Web site](https://flutter.dev/docs/release/breaking-changes)(don't forget to update the [index](https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/index.md) of that directory as well),- e-mail a copy to [flutter-announce@](https://groups.google.com/g/flutter-announce),- notify the `#announcements` channel on our [Chat](Chat.md), and- add the [c: API break label](https://github.com/flutter/flutter/labels/c%3A%20API%20break) to the relevant issues, so they get listed in the upcoming Release notes.DeprecationsOld APIs can be marked as deprecated as part of this process.Deprecation is not a way to avoid making a breaking change; you should consider deprecating an API to be equivalent to removing it, as some of our customers (and we ourselves) consider using a deprecated API to be anathema (triggering a build failure).The syntax for deprecations must match the following pattern:```
@Deprecated(
  'Call prepareFrame followed by owner.requestVisualUpdate() instead. '
  'This will enable an improvement to performance in a future version of Flutter.'
  'This feature was deprecated after v2.9.0-0.1.pre.'
)```In other words:```
@Deprecated(
  '[description of how to migrate] '
  '[brief motivation for why we are breaking the API] '
  'This feature was deprecated after [beta version at time of deprecation].'
)```Using this standard form ensures that we can write a script to detect all deprecated APIs and remove them.We have a test that verifies that this syntax is followed.To determine the latest beta version, see [https://flutter.dev/docs/development/tools/sdk/releases](https://flutter.dev/docs/development/tools/sdk/releases).When adding a deprecation notice to the framework, a flutter fix should be included with your change.This helps users migrate to the new API as easily as possible.To learn more about authoring fixes, see [Data driven Fixes](Data-driven-Fixes.md).If a fix cannot be written for the new API, please file an issue in [https://github.com/dart-lang/sdk](https://github.com/dart-lang/sdk) and link to it in your change.When deprecating features, be aware that you will not by default be informed when the Flutter code itself uses the deprecated feature (there is a `deprecated_member_use_from_same_package: ignore` line in the root `analysis_options.yaml` file).To find places where the old feature is used, rename its declaration and see where the compiler complains.(You can't just comment out the "ignore" in the `analysis_options.yaml` file because it's hiding hundreds of other warnings...)Removing deprecated APIs from the framework are not currently planned.In the past, deprecations were removed after a set
amount of time.This is not currently in practice.If and when we do resume removing deprecated APIs, it will be announced
across several channels like the [flutter-announce group](https://groups.google.com/g/flutter-announce), and the
[Discord](../contributing/Chat.md).Skipped Tests
Tests can be skipped using the `skip` parameter of `test()`, `group()` and `testWidgets()`.However, they  should be kept to a minimum and only done for the following two reasons.The first is if there is a test that is flaky, we can mark is as temporarily skipped to keep the tree green while a fix for it is developed.For these types of skips you need to file a tracking issue so we can ensure there is follow up to remove the skip.This tracking issue should be tagged with the `skip-test` label.Then in a comment on the same line as the parameter, include a link to this issue:```
  skip: true, // https://github.com/flutter/flutter/issues/XXXXX```The other reason to use the skip parameter is to mark a test that by design doesn't make sense to test under a specific condition.An example would be a test that only tests a feature available on a specific platform or environment.For these cases, include a comment on the same line as the skip parameter with the text `[intended]` and a short description of why the skip is needed:```
  skip: isBrowser, // [intended]There are no default transitions to test on the web.```If the analyzer script sees a skip without a comment containing either an issue link or an `[intended]` tag, it will report and error and fail the check.

--------------------------------

Style guide for Flutter repo
Summary
Optimize for readability.Write detailed documentation.Make error messages useful.Never use timeouts or timers.Avoid `is`, `print`, `part of`, `extension` and `_`.IntroductionThis document contains some high-level philosophy and policy decisions for the Flutter
project, and a description of specific style issues for some parts of the codebase.The style portion describes the preferred style for code written as part of the Flutter
project (the framework itself and all our sample code).Flutter application developers
are welcome to follow this style as well, but this is by no means required.Flutter
will work regardless of what style is used to author applications that use it.Code under the `engine` subdirectory uses [other style guides for non-Dart code](../../engine/src/flutter/CONTRIBUTING.md#style).The language-neutral sections in this document still apply to engine code, however.OverviewThis document describes our approach to designing and programming Flutter,
from high-level architectural principles all the way to naming rules.These are our norms, written down so that we can easily convey our shared
understanding with new team members.The primary goal of these style guidelines is to improve code readability so
that everyone, whether reading the code for the first time or
maintaining it for years, can quickly determine what the code does.Secondary goals are to design systems that are simple; to increase the
likelihood of catching bugs quickly; and to avoid arguments when there are
disagreements over subjective matters.For anything not covered by this document, check the
[Dart style guide](https://www.dartlang.org/guides/language/effective-dart/)
for more advice.That document is focused primarily on Dart-specific
conventions, while this document is more about Flutter conventions.In some cases the Dart style guide differs from the Flutter guide.For Flutter project code,
the Flutter guide governs.The differences are a result of slightly different
priorities.The Flutter guide is designed for making code highly readable
even to people who have never seen the code before and are new to Dart, as
the Flutter framework code will be read millions of times more than it is written.The Dart guide, on the other hand, is designed to provide a more balanced approach
that assumes that the writing of the code will be a bigger proportion of the
interactions with the code, and that the reader is more experienced with Dart.A word on designing APIs
Designing an API is an art.Like all forms of art, one learns by practicing.The best way to get good at designing APIs is to spend a decade or more designing them, while working closely with people who are using your APIs.Ideally, one would first do this in very controlled situations, with small numbers of developers using one's APIs, before graduating to writing APIs that will be used by hundreds of thousands or even millions of developers.In the absence of one's own experience, one can attempt to rely on the experience of others.The biggest problem with this is that sometimes explaining why an API isn't optimal is a very difficult and subtle task, and sometimes the reasoning doesn't sound convincing unless you already have a lot of experience designing them.Because of this, and contrary to almost any other situation in engineering, when you are receiving feedback about API design from an experienced API designer, they will sometimes seem unhappy without quite being able to articulate why.When this happens, seriously consider that your API should be scrapped and a new solution found.This requires a different and equally important skill when designing APIs: not getting attached to one's creations.One should try many wildly different APIs, and then attempt to write code that uses those APIs, to see how they work.Throw away APIs that feel frustrating, that lead to buggy code, or that other people don't like.If it isn't elegant, it's usually better to try again than to forge ahead.An API is for life, not just for the one PR you are working on.Philosophy
Lazy programming
Write what you need and no more, but when you write it, do it right.Avoid implementing features you don't need.You can't design a feature
without knowing what the constraints are.Implementing features "for
completeness" results in unused code that is expensive to maintain,
learn about, document, test, etc.When you do implement a feature, implement it the right way.Avoid
workarounds.Workarounds merely kick the problem further down the
road, but at a higher cost: someone will have to relearn the problem,
figure out the workaround and how to dismantle it (and all the places
that now use it), and implement the feature.It's much better to
take longer to fix a problem properly, than to be the one who fixes
everything quickly but in a way that will require cleaning up later.You may hear team members say "embrace the [yak shave](http://www.catb.org/jargon/html/Y/yak-shaving.html)!".This is
an encouragement to [take on the larger effort necessary](https://www.youtube.com/watch?v=AbSehcT19u0) to perform a
proper fix for a problem rather than just applying a band-aid.Write Test, Find BugWhen you fix a bug, first write a test that fails, then fix the bug
and verify the test passes.When you implement a new feature, write tests for it.(See also: [Running and writing tests](./testing/Running-and-writing-tests.md), and the section on writing tests below.)Check the code coverage
to make sure every line of your new code is tested.See also: [Test coverage for package:flutter](./testing/Test-coverage-for-package-flutter.md).If something isn't tested, it is very likely to regress or to get "optimized away".If you want your code to remain in the codebase, you should make sure to test it.Don't submit code with the promise to "write tests later".Just take the
time to write the tests properly and completely in the first place.Avoid duplicating stateThere should be no objects that represent live state that reflect
some state from another source, since they are expensive to maintain.(The Web's `HTMLCollection` object is an example of such an object.)In other words, keep only one source of truth, and don't replicate
live state.Getters feel faster than methods
Property getters should be efficient (e.g. just returning a cached
value, or an O(1) table lookup).If an operation is inefficient, it
should be a method instead.(Looking at the Web again: we would have`document.getForms()`, not `document.forms`, since it walks the entire tree).Similarly, a getter that returns a Future should not kick-off the work
represented by the future, since getters appear idempotent and side-effect free.Instead, the work should be started from a method or constructor, and the
getter should just return the preexisting Future.No synchronous slow workThere should be no APIs that require synchronously completing an
expensive operation (e.g. computing a full app layout outside of the
layout phase).Expensive work should be asynchronous.LayersWe use a layered framework design, where each layer addresses a
narrowly scoped problem and is then used by the next layer to solve
a bigger problem.This is true both at a high level (widgets relies
on rendering relies on painting) and at the level of individual
classes and methods (e.g. `Text` uses `RichText` and `DefaultTextStyle`).Convenience APIs belong at the layer above the one they are simplifying.Avoid interleaving multiple concepts together
Each API should be self-contained and should not know about other features.Interleaving concepts leads to complexity.For example:
- Many Widgets take a `child`.Widgets should be entirely agnostic about the type
of that child.Don't use `is` or similar checks to act differently based on the
type of the child.- Render objects each solve a single problem.Rather than having a render objecthandle both clipping and opacity, we have one render object for clipping, and onefor opacity.- In general, prefer immutable objects over mutable data.Immutable objects canbe passed around safely without any risk that a downstream consumer will changethe data.(Sometimes, in Flutter, we pretend that some objects are immutable even
when they technically are not: for example, widget child lists are often technically
implemented by mutable `List` instances, but the framework will never modify them
and in fact cannot handle the user modifying them.)Immutable data also turns out
to make animations much simpler through lerping.Avoid secret (or global) state
A function should operate only on its arguments and, if it is an instance
method, data stored on its object.This makes the code significantly easier
to understand.For example, when reading this code:```
// ... imports something that defines foo and bar ...void main() {
  foo(1);
  bar(2);
}```...the reader should be confident that nothing in the call to `foo` could affect anything in thecall to `bar`.This usually means structuring APIs so that they either take all relevant inputs as arguments, or so
that they are based on objects that are created with the relevant input, and can then be called to
operate on those inputs.This significantly aids in making code testable and in making code understandable and debuggable.When code operates on secret global state, it's much harder to reason about.Prefer general APIs, but use dedicated APIs where there is a reason
For example, having dedicated APIs for performance reasons is fine.If one
specific operation, say clipping a rounded rectangle, is expensive
using the general API but could be implemented more efficiently
using a dedicated API, then that is where we would create a dedicated API.Avoid the lowest common denominatorIt is common for SDKs that target multiple platforms (or meta-platforms that
themselves run on multiple platforms, like the Web) to provide APIs that
work on all their target platforms.Unfortunately, this usually means that
features that are unique to one platform or another are unavailable.For Flutter, we want to avoid this by explicitly aiming to be the best way
to develop for each platform individually.Our ability to be used cross-
platform is secondary to our ability to be used on each platform.For example,
[TextInputAction](https://master-api.flutter.dev/flutter/services/TextInputAction-class.html)
has values that only make sense on some platforms.Similarly, our platform
channel mechanism is designed to allow separate extensions to be created on
each platform.Avoid APIs that encourage bad practicesFor example, don't provide APIs that walk entire trees, or that encourage
O(N^2) algorithms, or that encourage sequential long-lived operations where
the operations could be run concurrently.In particular:
- String manipulation to generate data or code that will subsequentlybe interpreted or parsed is a bad practice as it leads to codeinjection vulnerabilities.- If an operation is expensive, that expense should be representedin the API (e.g. by returning a `Future` or a `Stream`).Avoidproviding APIs that hide the expense of tasks.Avoid exposing API cliffs
Convenience APIs that wrap some aspect of a service from one environment
for exposure in another environment (for example, exposing an Android API
in Dart), should expose/wrap the complete API, so that there's no cognitive cliff
when interacting with that service (where you are fine using the exposed
API up to a point, but beyond that have to learn all about the underlying
service).Avoid exposing API oceans
APIs that wrap underlying services but prevent the underlying API from
being directly accessed (e.g. how `dart:ui` exposes Skia) should carefully
expose only the best parts of the underlying API.This may require refactoring
features so that they are more usable.It may mean avoiding exposing
convenience features that abstract over expensive operations unless there's a
distinct performance gain from doing so.A smaller API surface is easier
to understand.For example, this is why `dart:ui` doesn't expose `Path.fromSVG()`: we checked,
and it is just as fast to do that work directly in Dart, so there is no benefit
to exposing it.That way, we avoid the costs (bigger API surfaces are more
expensive to maintain, document, and test, and put a compatibility burden on
the underlying API).Avoid heuristics and magic
Predictable APIs that the developer feels gives them control are generally preferred
over APIs that mostly do the right thing but don't give the developer any way to adjust
the results.Predictability is reassuring.Solve real problems by literally solving a real problemWhere possible, especially for new features, you should partner with a real
customer who wants that feature and is willing to help you test it.Only by
actually using a feature in the real world can we truly be confident that a
feature is ready for prime time.Listen to their feedback, too.If your first customer is saying that your
feature doesn't actually solve their use case completely, don't dismiss their
concerns as esoteric.Often, what seems like the problem when you start a
project turns out to be a trivial concern compared to the real issues faced
by real developers.Get early feedback when designing new APIsIf you're designing a new API or a new feature, consider [writing a design doc](Design-Documents.md).Then, get feedback from the relevant people, e.g. post it on the [relevant chat channel](Chat.md#existing-channels).Start designing APIs from the closest point to the developerWhen we create a new feature that requires a change to the entire stack, it's tempting to design the lowest-level API first, since that's the closest to the "interesting" code (the "business end" of the feature, where we actually do the work).However, that then forces the higher level APIs to be designed against the lower-level API, which may or may not be a good fit, and eventually the top-level API, which developers will primarily be using, may be forced to be a tortured and twisted mess (either in implementation or in terms of the exposed API).It may even be that the final API doesn't fit how people think about the problem or solve their actual issues, but instead merely exposes the lowest-level feature almost verbatim.Instead, always design the top-level API first.Consider what the most ergonomic API would be at the level that most developers will be interacting with it.Then, once that API is cleanly designed and usability-tested, build the lower levels so that the higher level can be layered atop.Concretely, this means designing the API at the `material` or `widgets` layer first, then the API in the `rendering`, `scheduler`, or `services` layer, then the relevant binding, then the `dart:ui` API or the message channel protocol, then the internal engine API or the plugin API.(The details may vary from case to case.)Only log actionable messages to the consoleIf the logs contain messages that the user can safely ignore, then they will do so, and eventually their logs
will be so chatty and verbose that they will miss the critical messages.Therefore, only log actual errors and
actionable warnings (warnings that can always be dealt with and fixed).Never log "informational" messages by default.It is possible that it may be useful to have messages on certain topics while debugging those topics.To deal with that, have debug flags you can enable that enable extra logging for particular topics.For example, setting `debugPrintLayouts` to true enables logging of layouts.This also applies to our unopt builds.It's annoying for other people on the team to have to wade through messages that aren't directly relevant to their work.Rely on feature flags, not verbosity levels, when deciding
to output messages.The one exception to this is reporting useful milestones; for example, the `flutter` tool in
verbose mode (`-v`) reports meaningful steps that it is executing because those are almost always useful.Error messages should be useful
Every time you find the need to report an error (e.g. throwing an exception in the framework, handling some bad state in the engine, reporting a syntax error in the Dart compiler, etc), consider how you can make this the most useful and helpful error message ever.Put yourself in the shoes of whoever sees that error message.Why did they see it?What can we do to help them?They are at a crossroads, having seen your error message: they can either get frustrated and hate Flutter, or they can feel thankful that the error helped them resolve an actual issue.Every error message is an opportunity to make someone love our product.Template values should set developers up for success
Template defaults should focus on providing the best developer experience.Templates should help developers understand the code, be easy to run now and support in the future.Help developers by picking dependencies that are broadly used and/or broadly supported and by leaving .See flutter create's templates for an example.PoliciesThis section defines some policies that we have decided to honor.In the absence of a very specific policy in this section, the general philosophies in the section above are controlling.Plugin compatibilityWe guarantee that a plugin published with a version equal to or greater than 1.0.0 will require no more recent a version of Flutter than the latest stable release at the time that the plugin was released.(Plugins may support older versions too, but that is not guaranteed.)WorkaroundsWe are willing to implement temporary (one week or less) workarounds (e.g. `//ignore` hacks) if it helps a high profile developer or prolific contributor with a painful transition.Please contact @Hixie ([ian@hixie.ch](mailto:ian@hixie.ch)) if you need to make use of this option.Avoid abandonware
Code that is no longer maintained should be deleted or archived in some way that clearly indicates
that it is no longer maintained.For example, we delete rather than commenting out code.Commented-out code will bitrot too fast to be
useful, and will confuse people maintaining the code.Similarly, all our repositories should have an owner that does regular triage of incoming issues and PRs,
and fixes known issues.Repositories where nobody is doing triage at least monthly, preferably more often,
should be deleted, hidden, or otherwise archived.Widget libraries follow the latest OEM behavior
For our material and cupertino libraries, we generally implement the latest behavior unless doing so
would be a seriously disruptive breaking change.For example, we use the latest stylings for iOS
switch controls, but when Material Design introduced a whole new type of button, we created a new
widget for that rather than updating the existing buttons to have the new style.Code that is not copyrighted "The Flutter Authors"
All code in all Flutter repositories must be contributed by developers who have signed [the Google CLA](https://cla.developers.google.com/), and must be licensed using our normal BSD license with a copyright referencing "The Flutter Authors", except if it is "third party code"."Third party code" that is not part of a Dart package must be in a subdirectory of a `third_party` directory located:
- [/third_party](../../third_party) for the Flutter Framework- [/engine/src/flutter/third_party](../../engine/src/flutter/third_party) for the Flutter Engine.The subdirectory in question must contain a `LICENSE` file that details the license covering that code and a `README` describing the provenance of that code."Third party code" that is part of a Dart package and is not Dart code must be in a subdirectory of a `third_party` directory at the root of the package, and the subdirectory in question must contain a `LICENSE` file that details the license covering that code and a `README` describing the provenance of that code.The license must then also be duplicated into the package's `LICENSE` file using the syntax described in the [LicenseRegistry](https://master-api.flutter.dev/flutter/foundation/LicenseRegistry-class.html)API docs."Third party code" that is part of a Dart package and is Dart code must be in a subdirectory of the package's `lib/src/third_party` directory, and the subdirectory in question must contain a `LICENSE` file that details the license covering that code and a `README` describing the provenance of that code.The license must then also be duplicated into the package's `LICENSE` file using the syntax described in the [LicenseRegistry](https://master-api.flutter.dev/flutter/foundation/LicenseRegistry-class.html)API docs.All licenses included in this manner must have been reviewed and determined to be legally acceptable licenses.All such "third party code" must either be a fork for which we take full responsibility, or there must be an automated rolling mechanism that keeps the code up to date when the upstream source changes.In general it is strongly recommended that we avoid any such code unless strictly necessary.In particular, we aim for all Flutter Framework code in the flutter/flutter repository to be single-licensed.Documentation (dartdocs, javadocs, etc)We use "dartdoc" for our Dart documentation, and similar technologies for the documentation
of our APIs in other languages, such as ObjectiveC and Java.All public members in Flutter
libraries should have a documentation.In general, follow the
[Dart documentation guide](https://www.dartlang.org/effective-dart/documentation/#doc-comments)
except where that would contradict this page.Answer your own questions straight awayWhen working on Flutter, if you find yourself asking a question about
our systems, please place whatever answer you subsequently discover
into the documentation in the same place where you first looked for
the answer.That way, the documentation will consist of answers to real
questions, where people would look to find them.Do this right away;
it's fine if your otherwise-unrelated PR has a bunch of documentation
fixes in it to answer questions you had while you were working on your PR.We try to avoid reliance on "oral tradition".It should be possible
for anyone to begin contributing without having had to learn all the
secrets from existing team members.To that end, all processes should
be documented (typically on the wiki), code should be self-explanatory
or commented, and conventions should be written down, e.g. in our style
guide.Avoid useless documentationIf someone could have written the same documentation without knowing
anything about the class other than its name, then it's useless.Avoid checking
in such documentation.Example (from [CircleAvatar](http://docs.flutter.io/flutter/material/CircleAvatar-class.html)):```
// BAD:///The background color.final Color backgroundColor;///Half the diameter of the circle.final double radius;// GOOD:///The color with which to fill the circle.///
///Changing the background color will cause the avatar to animate to the new color.final Color backgroundColor;///The size of the avatar.
///
///Changing the radius will cause the avatar to animate to the new size.final double radius;```Writing prompts for good documentationIf you are having trouble coming up with useful documentation, here are some prompts that might help you write more detailed prose:
-If someone is looking at this documentation, it means that they have a question which they couldn't answer by guesswork or by looking at the code.What could that question be?Try to answer all questions you can come up with.- If you were telling someone about this property, what might they want to know that they couldn't guess?For example, are there edge cases that aren't intuitive?- Consider the type of the property or arguments.Are there cases that are outside the normal range that should be discussed?e.g. negative numbers, non-integer values, transparent colors, empty arrays, infinities, NaN, null?Discuss any that are non-trivial.- Does this member interact with any others?For example, can it only be non-null if another is null?Will this member only have any effect if another has a particular range of values?Will this member affect whether another member has any effect, or what effect another member has?- Does this member have a similar name or purpose to another, such that we should point to that one, and from that one to this one?Use the `See also:` pattern.- Are there timing considerations?Any potential race conditions?- Are there lifecycle considerations?For example, who owns the object that this property is set to?Who should `dispose()` it, if that's relevant?- What is the contract for this property/method?Can it be called at any time?Are there limits on what values are valid?If it's a `final` property set from a constructor, does the constructor have any limits on what the property can be set to?If this is a constructor, are any of the arguments not nullable?- If there are `Future` values involved, what are the guarantees around those?Consider whether they can complete with an error, whether they can never complete at all, what happens if the underlying operation is canceled, and so forth.Introduce terms as if every piece of documentation is the first the reader has ever seenIt's easy to assume that the reader has some basic knowledge of Dart or Flutter when writing API documentation.Unfortunately, the reality is that everyone starts knowing nothing, and we do not control where they will begin their journey.For this reason, avoid using terms without first defining them, unless you are linking to more fundamental documentation that defines that term without reference to the API you are documenting.For example, a fancy widget in the Material library can refer to the `StatefulWidget` documentation and assume that the reader either knows about the `StatefulWidget` class, or can learn about it by following the link and then later returning to the documentation for the fancy widget.However, the documentation for the `StatefulWidget` class should avoid assuming that the reader knows what a `State` class is, and should avoid deferring to it for its definition, because `State` could is likely to defer back to `StatefulWidget` and the reader would be stuck in a loop unable to grasp the basic principles.This is the documentation equivalent of a bootstrapping problem.Another way to express this is that API documentation should follow a similar layering philosophy as code.The goal of documentation is not just to act as a refresher for experts, but to act as a tutorial for new developers.Avoid empty proseIt's easy to use more words than necessary.Avoid doing so
where possible, even if the result is somewhat terse.```
// BAD:/// Note:It is important to be aware of the fact that in the
/// absence of an explicit value, this property defaults to 2.// GOOD:/// Defaults to 2.```In particular, avoid saying "Note:", or starting a sentence with "Note that".It adds nothing.Leave breadcrumbs in the commentsThis is especially important for documentation at the level of classes.If a class is constructed using a builder of some sort, or can be
obtained via some mechanism other than merely calling the constructor,
then include this information in the documentation for the class.If a class is typically used by passing it to a particular API, then
include that information in the class documentation also.If a method is the main mechanism used to obtain a particular object,
or is the main way to consume a particular object, then mention that
in the method's description.Typedefs should mention at least one place where the signature is used.These rules result in a chain of breadcrumbs that a reader can follow
to get from any class or method that they might think is relevant to
their task all the way up to the class or method they actually need.Example:```
// GOOD:/// An object representing a sequence of recorded graphical operations.
///
///To create a [Picture], use a [PictureRecorder].
///
/// A [Picture] can be placed in a [Scene] using a [SceneBuilder], via
/// the [SceneBuilder.addPicture] method.A [Picture] can also be
/// drawn into a [Canvas], using the [Canvas.drawPicture] method.abstract class Picture ...```You can also use "See also" links, as in:```
///See also:
///
/// * [FooBar], which is another way to peel oranges./// * [Baz], which quuxes the wibble.```Each line should end with a period.Prefer "which..." rather than parentheticals on such lines.There should be a blank line between "See also:" and the first item in the bulleted list.Refactor the code when the documentation would be incomprehensible
If writing the documentation proves to be difficult because the API is
convoluted, then rewrite the API rather than trying to document it.Canonical terminologyThe documentation should use consistent terminology:
- method - a member of a class that is a non-anonymous closure- function - a callable non-anonymous closure that isn't a member of a class- parameter - a variable defined in a closure signature and possibly used in the closure body.- argument - the value passed to a closure when calling it.Prefer the term "call" to the term "invoke" when talking about jumping to a closure.Prefer the term "member variable" to the term "instance variable" when talking about variables associated with a specific object.Typedef dartdocs should usually start with the phrase "Signature for...".Use correct grammar
Avoid starting a sentence with a lowercase letter.```
// BAD/// [foo] must not be null.// GOOD/// The [foo] argument must not be null.```Similarly, end all sentences with a period.Use the passive voice; recommend, do not require; never say things are simple
Never use "you" or "we".Avoid the imperative voice.Avoid value judgements.Rather than telling someone to do something, use "Consider", as in "`To obtain the foo, consider using [bar].`".In general, you don't know who is reading the documentation or why.Someone could have inherited a terrible codebase and be reading our documentation to find out how to fix it; by saying "you should not do X" or "avoid Y" or "if you want Z", you will put the reader in a defensive state of mind when they find code that contradicts the documentation (after all, they inherited this codebase, who are we to say that they're doing it wrong, it's not their fault).For similar reasons, never use the word "simply", or say that the reader need "just" do something, or otherwise imply that the task is easy.By definition, if they are looking at the documentation, they are not finding it easy.Provide sample code
Sample code helps developers learn your API quickly.Writing sample code also helps you think through how your API is going to be used by app developers.Sample code should go in a documentation comment that typically begins with `/// {@tool dartpad}`, and ends with `/// {@end-tool}`, with the example source and corresponding tests placed in a file under [the API examples directory](https://github.com/flutter/flutter/blob/main/examples/api).This will then be checked by automated tools, and formatted for display on the API documentation web site [api.flutter.dev](https://api.flutter.dev).For details on how to write sample code, see [the API example documentation](https://github.com/flutter/flutter/blob/main/examples/api/README.md#authoring).Provide full application samples.Our UX research has shown that developers prefer to see examples that are in the context of an entire app.So, whenever it makes sense, provide an example that can be presented as part of an entire application instead of just a snippet that uses the `{@tool snippet}` or ```dart ... ``` indicators.An application sample can be created using the `{@tool dartpad}` ... `{@end-tool}` or `{@tool sample}` ... `{@end-tool}` dartdoc indicators.See [here](https://github.com/flutter/flutter/blob/main/examples/api/README.md#authoring) for more details about writing these kinds of examples.Dartpad examples (those using the dartdoc `{@tool dartpad}` indicator) will be presented on the [API documentation website](https://api.flutter.dev) as an in-page executable and editable example.This allows developers to interact with the example right there on the page, and is the preferred form of example.Here is [one such example](https://api.flutter.dev/flutter/widgets/AnimatedSwitcher-class.html#widgets.AnimatedSwitcher.1).For examples that don't make sense in a web page (for example, code that interacts with a particular platform feature), application examples (using the dartdoc `{@tool sample}` indicator) are preferred, and will be presented on the API documentation website along with information about how to instantiate the example as an application that can be run.Supported IDEs viewing the Flutter source code using the Flutter plugin also offer the option of creating a new project with either kind of example.Provide illustrations, diagrams or screenshots
For any widget that draws pixels on the screen, showing how it looks like in its API doc helps developers decide if the widget is useful and learn how to customize it.All illustrations should be easily reproducible, e.g. by running a Flutter app or a script.Examples:
- A diagram for the AppBar widget- A screenshot for the Card widgetWhen creating diagrams, make sure to provide alternative text [as described in the HTML specification](https://html.spec.whatwg.org/multipage/images.html#alt).Link to Widget of the Week videos
Link to a widget's Flutter Widget of the Week video if it has one:```
/// {@youtube 560 315 https://www.youtube.com/watch?v=<id>}```The first two arguments are the video's width and height.These should be `560` and `315` respectively.Clearly mark deprecated APIsWe have conventions around deprecation.See the [Tree Hygiene](Tree-hygiene.md#deprecations) page for more details.Use `///` for public-quality private documentationIn general, private code can and should also be documented.If that documentation is of good enough
quality that we could include it verbatim when making the class public (i.e. it satisfies all the
style guidelines above), then you can use `///` for those docs, even though they're private.Documentation of private APIs that is not of sufficient quality should only use `//`.That way, if
we ever make the corresponding class public, those documentation comments will be flagged as missing,
and we will know to examine them more carefully.Feel free to be conservative in what you consider "sufficient quality".It's ok to use `//` even if
you have multiple paragraphs of documentation; that's a sign that we should carefully rereview the
documentation when making the code public.Dartdoc templates and macros
Dartdoc supports creating templates that can be reused in other parts of the code.They are defined
like so:```
/// {@template <id>}
/// ...
/// {@endtemplate}```and used via:```
/// {@macro <id>}```The `<id>` should be a unique identifier that is of the form `flutter.library.Class.member[.optionalDescription]`.For example:```
// GOOD:
/// {@template flutter.rendering.Layer.findAnnotations.aboutAnnotations}
///Annotations are great!/// {@endtemplate// BAD:
/// {@template the_stuff!}
///This is some great stuff!/// {@endtemplate}```The `optionalDescription` component of the identifier is only necessary if there is more than one
template defined in one Dartdoc block.If a symbol is not part of a library, or not part of a class, then
just omit those parts from the ID.Dartdoc-specific requirementsThe first paragraph of any dartdoc section must be a short self-contained sentence that explains the purpose
and meaning of the item being documented.Subsequent paragraphs then must elaborate.Avoid having the first paragraph have multiple sentences.(This is because the first paragraph gets extracted and used in tables of
contents, etc, and so has to be able to stand alone and not take up a lot of room.)When referencing a parameter, use backticks.However, when referencing a parameter that also corresponds to a property, use square brackets instead.(This contradicts the Dart style guide, which says to use square brackets for both.We do this because of [dartdoc issue 1486](https://github.com/dart-lang/dartdoc/issues/1486).Currently, there's no way to unambiguously reference a parameter.We want to avoid cases where a parameter that happens to be named the same as a property despite having no relationship to that property gets linked to the property.)```
// GOOD/// Creates a foobar, which allows a baz to quux the bar.///
  ///The [bar] argument must not be null.///
  ///The `baz` argument must be greater than zero.Foo({ this.bar, int baz }) : assert(bar != null), assert(baz > 0);```Avoid using terms like "above" or "below" to reference one dartdoc section from another.Dartdoc sections are often shown alone on a Web page, the full context of the class is not present.Coding patterns and catching bugs early
Use asserts liberally to detect contract violations and verify invariants
`assert()` allows us to be diligent about correctness without paying a
performance penalty in release mode, because Dart only evaluates asserts in
debug mode.It should be used to verify contracts and invariants are being met as we expect.Asserts do not enforce contracts, since they do not run at all in release builds.They should be used in cases where it should be impossible for the condition
to be false without there being a bug somewhere in the code.The following example is from `box.dart`:```
abstract class RenderBox extends RenderObject {
  // ...double getDistanceToBaseline(TextBaseline baseline, {bool onlyReal: false}) {
    // simple asserts:
    assert(!needsLayout);
    assert(!_debugDoingBaseline);
    // more complicated asserts:
    assert(() {
      final RenderObject parent = this.parent;
      if (owner.debugDoingLayout) {
        return (RenderObject.debugActiveLayout == parent) && parent.debugDoingThisLayout;
      }
      if (owner.debugDoingPaint) {
        return ((RenderObject.debugActivePaint == parent) && parent.debugDoingThisPaint)
            || ((RenderObject.debugActivePaint == this)   && debugDoingThisPaint);}assert(parent == this.parent);
      return false;
    });
    // ...
    return 0.0;
  }// ...
}```Prefer specialized functions, methods and constructorsUse the most relevant constructor or method, when there are multiple
options.Example:```
// BAD:
const EdgeInsets.TRBL(0.0, 8.0, 0.0, 8.0);// GOOD:
const EdgeInsets.symmetric(horizontal: 8.0);```Minimize the visibility scope of constants
Prefer using a local const or a static const in a relevant class than using a
global constant.As a general rule, when you have a lot of constants, wrap them in a
class.For examples of this, see
[lib/src/material/colors.dart](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/src/material/colors.dart).Avoid using `if` chains or `?:` or `==` with enum valuesUse `switch` with no `default` case if you are examining an enum, since the analyzer will warn you if you missed any of the values when you use `switch`.The `default` case should be avoided so that the analyzer will complain if a value is missing.Unused values can be grouped together with a single `break` or `return` as appropriate.Avoid using `if` chains, `? ... : ...`, or, in general, any expressions involving enums.Avoid using `var` and `dynamic`All variables and arguments are typed; avoid `dynamic` or `Object` in
any case where you could figure out the actual type.Always specialize
generic types where possible.Explicitly type all list and map
literals.Give types to all parameters, even in closures and even if you
don't use the parameter.This achieves two purposes: it verifies that the type that the compiler
would infer matches the type you expect, and it makes the code self-documenting
in the case where the type is not obvious (e.g. when calling anything other
than a constructor).Always avoid `var` and `dynamic`.If the type is unknown, prefer using
`Object` (or `Object?`) and casting, as using `dynamic` disables all
static checking.Avoid using `library` and `part of`.Prefer that each library be self-contained.Only name a `library` if you are documenting it (see the
documentation section).We avoid using `part of` because that feature makes it very hard to reason about how private a private
really is, and tends to encourage "spaghetti" code (where distant components refer to each other) rather
than "lasagna" code (where each section of the code is cleanly layered and separable).Avoid using `extension`.Extension methods are confusing to document and discover.To an end developer,
they appear no different than the built-in API of the class, and discovering
the documentation and implementation of an extension is more challenging than
for class members.Prefer instead adding methods directly to relevant classes.If that is not
possible, create a method that clearly identifies what object(s) it works with
and is part of.(A rare exception can be made for extensions that provide temporary workarounds
when deprecating features.In those cases, however, the extensions and all their
members must be deprecated in the PR that adds them, and they must be removed
in accordance with our deprecation policy.)Avoid using `FutureOr<T>`The `FutureOr` type is a Dart-internal type used to explain certain aspects of the `Future` API.In public APIs, avoid the temptation to create APIs that are both synchronous and asynchronous by returning this type, as it usually only results in the API being more confusing and less type safe.In certain extreme cases where the API absolutely needs to be asynchronous but a synchronous "escape hatch" is needed for performance, consider using `SynchronousFuture` (but be aware that this still suffers from many of the same risks of making the API only subtle and complicated).This is used, for example, when loading images in the Flutter framework.You may use `FutureOr` to accept a callback that may or may not return a `Future`.Avoid using `Expando`
Generally speaking, `Expando` objects are a sign of an architectural problem.Carefully consider whether your usage is actually necessary.When your classes have clear documented ownership rules, there is usually a better solution.Expando objects tend to invite code that is hard to understand because one cannot simply follow references to find all the dependencies.Avoid using `@visibleForTesting`The [@visibleForTesting](https://api.flutter.dev/flutter/meta/visibleForTesting-constant.html) annotation marks a public API so that developers that have not disabled the `invalid_use_of_visible_for_testing_member` analyzer error get a warning when they use this API outside of a `test` directory.This means that the API has to be treated as being public (nothing prevents a developer from using the API even in non-test code), meaning it must be designed to be a public API, it must be documented, it must be tested, etc.At which point, there's really no reason not to just make it a public API.If anything, the use of `@visibleForTesting` becomes merely a crutch to convince ourselves that it's ok that we're making something public that we should really not have made public.So rather than rely on `@visibleForTesting`, consider designing your APIs so that they are directly testable using the public API, without exposing any sensitive internals.(One exception is combining `@visibleForTesting` with `@protected`.The `@protected` annotation marks a member as one that is intended for subclasses, so it is already a public API and considered as such.The `@visibleForTesting` annotation in that case merely enables the member to be called directly in tests without having to create a fake subclass and without having to add `//ignore` pragmas.)Never check if a port is available before using it, never add timeouts, and other race conditions.If you look for an available port, then try to open it, it's extremely likely that several times a week some other code will open that port between your check and when you open the port, and that will cause a failure.Instead, have the code that opens the port pick an available port and return it, rather than being given a (supposedly) available port.If you have a timeout, then it's very likely that several times a week some other code will happen to run while your timeout is running, and your "really conservative" timeout will trigger even though it would have worked fine if the timeout was one second longer, and that will cause a failure.Instead, have the code that would time out just display a message saying that things are unexpectedly taking a long time, so that someone interactively using the tool can see that something is fishy, but an automated system won't be affected.Race conditions like this are the primary cause of flaky tests, which waste everyone's time.Similarly, avoid delays or sleeps that are intended to coincide with how long something takes.You may think that waiting two seconds is fine because it normally takes 10ms, but several times a week your 10ms task will actually take 2045ms and your test will fail because waiting two seconds wasn't long enough.Instead, wait for a triggering event.Avoid mysterious and magical numbers that lack a clear derivation
Numbers in tests and elsewhere should be clearly understandable.When the provenance of a number is not obvious,
consider either leaving the expression or adding a clear comment (bonus points for leaving a diagram).```
// BAD
expect(rect.left, 4.24264068712);// GOOD
expect(rect.left, 3.0 * math.sqrt(2));```Have good hygiene when using temporary directories
Give the directory a unique name that starts with `flutter_` and ends with a period (followed by the autogenerated random string).For consistency, name the `Directory` object that points to the temporary directory `tempDir`, and create it with `createTempSync` unless you need to do it asynchronously (e.g. to show progress while it's being created).Always clean up the directory when it is no longer needed.In tests, use the `tryToDelete` convenience function to delete the directory.(We use `tryToDelete` because on Windows it's common to get "access denied" errors when deleting temporary directories.We have no idea why; if you can figure it out then that could simplify a lot of code!)Perform dirty checks in setters
Dirty checks are processes to determine whether a changed values have been synchronized with the rest of the app.When defining mutable properties that mark a class dirty when set, use
the following pattern:```
/// Documentation here (don't wait for a later commit).TheType get theProperty => _theProperty;
TheType _theProperty;
void set theProperty(TheType value) {
  assert(value != null);
  if (_theProperty == value) {
    return;
  }
  _theProperty = value;
  markNeedsWhatever(); // the method to mark the object dirty
}```The argument is called 'value' for ease of copy-and-paste reuse of
this pattern.If for some reason you don't want to use 'value', use
'newProperty' (where 'Property' is the property name).Start the method with any asserts you need to validate the value.Don't do anything else in setters, other than marking the object as dirty and updating internal state.Getters and setters should not have significant side-effects.For example, setting a property whose value
is a callback should not result in that callback being invoked.Setting a property whose value is an object
of some sort should not result in any of that object's methods being called.Common boilerplates for `operator ==` and `hashCode`We have many classes that override `operator ==` and `hashCode` ("value classes").To keep the code consistent,
we use the following style for these methods:```
  @override
  bool operator ==(Object other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is Foo
        && other.bar == bar
        && other.baz == baz
        && other.quux == quux;
  }@override
  int get hashCode => Object.hash(bar, baz, quux);```For objects with a lot of properties, consider adding the following at the top of the `operator ==`:```
    if (identical(other, this)) {
      return true;
    }```(We don't yet use this exact style everywhere, so feel free to update code you come across that isn't yet using it.)In general, consider carefully whether overriding `operator ==` is a good idea.It can be expensive, especially
if the properties it compares are themselves comparable with a custom `operator ==`.If you do override equality,
you should use `@immutable` on the class hierarchy in question.Override `toString`
Use [Diagnosticable](https://api.flutter.dev/flutter/foundation/Diagnosticable-mixin.html) (rather than directly overriding `toString`) on all but the most trivial classes.That allows us to inspect the object from [devtools](https://pub.dartlang.org/packages/devtools) and IDEs.For trivial classes, override `toString` as follows, to aid in debugging:```
  @override
  String toString() => '${objectRuntimeType(this, 'NameOfObject')}($bar, $baz, $quux)';```...but even then, consider using `Diagnosticable` instead.Avoid using `$runtimeType`, since it adds a non-trivial cost even in release and profile mode.The `objectRuntimeType` method handles this for you, falling back to a supplied constant string when asserts are disabled.Be explicit about `dispose()` and the object lifecycleEven though Dart is garbage collected, having a defined object lifecycle and explicit ownership model (describing in the API documentation who is allowed to mutate the object, for instance) is important to avoid subtle bugs and confusing designs.If your class has a clear "end of life", for example, provide a `dispose()` method to clean up references such as listeners that would otherwise prevent some objects from getting garbage collected.For example, consider a widget that has a subscription on a global broadcast stream (that might have other listeners).That subscription will keep the widget from getting garbage collected until the stream itself goes away (which, for a global stream, might never happen).In general, pretending that Dart does not have garbage collection is likely to lead to less confusing and buggy code, because it forces you to think about the implications of object ownership and lifecycles.Test APIs belong in the test frameworks
Mechanisms that exist for test purposes do not belong in the core libraries, they belong in test harnesses.This keeps the cost of the main library down in production and avoids the risk that people might abuse test APIs.Immutable classes should not have hidden state
Immutable classes (those with `const` constructors) should not have hidden state.For example, they should not use private statics or Expandos.If they are stateful, then they should not be `const`.Avoid `sync*`/`async*`Using generator functions (`sync*`/`async*`) can be a powerful improvement when callers will
actually lazily evaluate the iterable and each iteration is expensive or there are a very
large number of iterations.It should not be used in place of building and returning a `List`, particularly for trivial methods
that only yield a small number of members or when callers will evaluate the whole collection
anyway.It should also be avoided in very large functions.It incurs runtime overhead in maintaining and using an iterator, and space overhead for the compiler
to actually desugar the generator into something that uses an iterator class.Writing testsMake each test entirely self-contained
Embrace code duplication in tests.It makes it easier to make new tests by copying and pasting them and
tweaking a few things.Avoid using `setUp`, `tearDown`, and similar features, as well as test-global variables or other state
shared between tests.They make writing tests easier but make maintaining them, debugging them, and
refactoring code much harder.(These are commonly used in Flutter's codebase today, but that is almost
always a mistake.When you are editing a file that uses those features, aim to reduce the number of
tests using them while you're there.)Specifically, we are trying to avoid shared state, which could persist across tests, and non-local
side-effects, which would prevent being able to move a test to another file without breaking the test.(It's fine to factor out code into functions that are called by tests, so long as the functions don't
have side-effects that might change how other tests run.)Prefer more test files, avoid long test files
Avoid adding tests to files that already have more than one or two hundred lines of code.It's easier
to understand a test file when it has only a few related tests, rather than when it has an entire test
suite.(It also makes developing the tests faster because you can run the test file faster.)Avoid using `pumpAndSettle`As per the API docs for [pumpAndSettle](https://main-api.flutter.dev/flutter/flutter_test/WidgetController/pumpAndSettle.html), prefer using explicit [pump](https://main-api.flutter.dev/flutter/flutter_test/WidgetController/pump.html) calls rather than `pumpAndSettle`.Using `pumpAndSettle`, especially without checking its return value, makes it very easy for bugs to sneak in where we trigger animations across multiple frames instead of immediately.It is almost always the case that a call to `pumpAndSettle` is more strictly correctly written as two `pump` calls, one to trigger the animations and one (with a duration) to jump to the point after the animations.Naming
Begin global constant names with prefix "k"
Examples:```
const double kParagraphSpacing = 1.5;
const String kSaveButtonTitle = 'Save';```However, where possible avoid global constants.Rather than `kDefaultButtonColor`, consider `Button.defaultColor`.If necessary, consider creating an `abstract final class` to hold relevant constants.Avoid abbreviations
Unless the abbreviation is more recognizable than the expansion (e.g. XML, HTTP, JSON), expand abbreviations
when selecting a name for an identifier.In general, avoid one-character names unless one character is idiomatic
(for example, prefer `index` over `i`, but prefer `x` over `horizontalPosition`).Avoid anonymous parameter names
Provide full type information and names even for parameters that are otherwise unused.This makes it easier for
people reading the code to tell what is actually going on (e.g. what is being ignored).For example:```
  onTapDown: (TapDownDetails details) { print('hello!'); }, // GOOD
  onTapUp: (_) { print('good bye'); }, // BAD```Naming rules for typedefs and function variablesWhen naming callbacks, use `FooCallback` for the typedef, `onFoo` for
the callback argument or property, and `handleFoo` for the method
that is called.If `Foo` is a verb, prefer the present tense to the
past tense (e.g. `onTap` instead of `onTapped`).If you have a callback with arguments but you want to ignore the
arguments, give the type and names of the arguments anyway.That way,
if someone copies and pastes your code, they will not have to look up
what the arguments are.Never call a method `onFoo`.If a property is called `onFoo` it must be
a function type.(For all values of "Foo".)Prefer using `typedef`s to declare callbacks.Typedefs benefit from having
documentation on the type itself and make it easier to read and find
common callsites for the signature.Spell words in identifiers and comments correctly
Our primary source of truth for spelling is the
[Material Design Specification](https://material.google.com/).Our secondary source of truth is dictionaries.Avoid "cute" spellings.For example, 'colors', not 'colorz'.Prefer US English spellings.For example, 'colorize', not 'colourise', and 'canceled', not 'cancelled'.Prefer compound words over "cute" spellings to avoid conflicts with reserved words.For example, 'classIdentifier', not 'klass'.Capitalize identifiers consistent with their spelling
In general, we use [Dart's recommendations](https://dart.dev/guides/language/effective-dart/style#identifiers) for naming identifiers.Please consider the following additional guidelines:If a word is correctly spelled (according to our sources of truth as described in the previous section) as a single word, then it should not have any inner capitalization or spaces.For examples, prefer `toolbar`, `scrollbar`, but `appBar` ('app bar' in documentation), `tabBar` ('tab bar' in documentation).Similarly, prefer `offstage` rather than `offStage`.Avoid using class names with `iOS` when possible.The capitalization of `iOS` is supposed to be exactly that, but that doesn't work well with camelCase and even less with UpperCamelCase; use alternatives like "Cupertino" or "UIKit" instead when possible.If you really really must use "iOS" in an identifier, capitalize it to `IOS`.Whether or not [the two-letter exception](https://dart.dev/guides/language/effective-dart/style#do-capitalize-acronyms-and-abbreviations-longer-than-two-letters-like-words) applies to "iOS" is debatable, but `IOS` is consistent with Dart APIs, and the alternatives (`IOs`, `Ios`) are even more jarring.(Previous versions of this guide incorrectly indicated that `Ios` was the correct capitalization when necessary; this form should not be used in new code.)Avoid double negatives in APIs
Name your boolean variables in positive ways, such as "enabled" or "visible", even if the default value is true.This is because, when you have a property or argument named "disabled" or "hidden", it leads to code such as `input.disabled = false` or `widget.hidden = false` when you're trying to enable or show the widget, which is very confusing.Prefer naming the argument to a setter `value`
Unless this would cause other problems, use `value` for the name of a setter's argument.This makes it easier to copy/paste the setter later.Qualify variables and methods used only for debuggingIf you have variables or methods (or even classes!) that are only used in debug mode,
prefix their names with `debug` or `_debug` (or, for classes, `_Debug`).Do not use debugging variables or methods (or classes) in production code.Avoid naming undocumented librariesIn other words, do not use the `library` keyword, unless it is a
documented top-level library intended to be imported by users.Avoid "new/old" modifiers in codeThe definition of "New" changes as code grows and time passes.If the code
needed a replacement version the odds of needing another replacement in the
future is higher.Instead find a name that represents the idea being used
or replaced.Comments
Avoid checking in comments that ask questions
Find the answers to the questions, or describe the confusion, including
references to where you found answers.If commenting on a workaround due to a bug, also leave a link to the issue and
a TODO to clean it up when the bug is fixed.Example:```
// BAD://What should this be?//This is a workaround.// GOOD:// According to this specification, this should be 2.0, but according to that
// specification, it should be 3.0.We split the difference and went with
// 2.5, because we didn't know what else to do.// TODO(username): Converting color to RGB because class Color doesn't support
//                 hex yet.See http://link/to/a/bug/123```TODOs should include the string TODO in all caps, followed by the GitHub username of
the person with the best context about the problem referenced by the TODO in
parentheses.A TODO is not a commitment that the person referenced will fix the
problem, it is intended to be the person with enough context to explain the problem.Thus, when you create a TODO, it is almost always your username that is given.Including an issue link in a TODO description is required.(See also [#37519](https://github.com/flutter/flutter/issues/37519),
which tracks a proposal to change the syntax of TODOs to not include usernames.)Comment all `// ignores`
Sometimes, it is necessary to write code that the analyzer is unhappy with.If you find yourself in this situation, consider how you got there.Is the analyzer actually correct but you
don't want to admit it?Think about how you could refactor your code so that the analyzer is happy.If such a
refactor would make the code better, do it.(It might be a lot of work... embrace the yak shave.)If you are really really sure that you have no choice but to silence the analyzer, use `// ignore: `.The ignore
directive should be on the same line as the analyzer warning.If the ignore is temporary (e.g. a workaround for a bug in the compiler or analyzer, or a workaround for some known problem in Flutter that you cannot fix), then add a link to the relevant bug, as follows:```
  foo(); // ignore: lint_code, https://link.to.bug/goes/here```If the ignore directive is permanent, e.g. because one of our lints has some unavoidable false positives and in this case violating the lint is definitely better than all other options, then add a comment explaining why:```
  foo(); // ignore: lint_code, sadly there is no choice but to do
  // this because we need to twiddle the quux and the bar is zorgle.```Comment all test skipsOn very rare occasions it may be necessary to skip a test.To do that, use the `skip` argument.Any time you use the `skip` argument, file an issue describing why it is skipped and
include a link to that issue in the code.Comment empty closures to `setState`
Generally the closure passed to `setState` should include all the code that changes the state.Sometimes this is not possible because the state changed elsewhere and the `setState` is called in response.In those cases, include a comment in the `setState` closure that explains what the state is that changed.```
  setState(() {
    //The animation ticked.We use the animation's value in the build method.
  });```FormattingThese guidelines have no technical effect, but they are still important purely
for consistency and readability reasons.We use `dart format` to auto-format all Dart code.This is enforced by our CI.Beyond whitespace formatting handled by the formatter, this section discusses
additional guidelines for code structure to ensure consistency and readibility.Constructors come first in a classThe default (unnamed) constructor should come first, then the named
constructors.They should come before anything else (including, e.g., constants or static methods).This helps readers determine whether the class has a default implied constructor or not at a glance.If it was possible for a constructor to be anywhere in the class, then the reader would have to examine every line of the class to determine whether or not there was an implicit constructor or not.Order other class members in a way that makes senseThe methods, properties, and other members of a class should be in an order that
will help readers understand how the class works.If there's a clear lifecycle, then the order in which methods get invoked would be useful, for example an  `initState` method coming before `dispose`.This helps readers because the code is in chronological order, so
they can see variables get initialized before they are used, for instance.Fields should come before the methods that manipulate them, if they are specific to a particular group of methods.For example, RenderObject groups all the layout fields and layout
methods together, then all the paint fields and paint methods, because layout
happens before paint.If no particular order is obvious, then the following order is suggested, with blank lines between each one:
- Constructors, with the default constructor first.- Constants of the same type as the class.- Static methods that return the same type as the class.- Final fields that are set from the constructor.- Other static methods.- Static properties and constants.- Members for mutable properties, without new lines separating the members of a property, each property in the order:
- getter- private field- setter- Read-only properties (other than `hashCode`).- Operators (other than `==`).- Methods (other than `toString` and `build`).- The `build` method, for `Widget` and `State` classes.- `operator ==`, `hashCode`, `toString`, and diagnostics-related methods, in that order.Be consistent in the order of members.If a constructor lists multiplefields, then those fields should be declared in the same order, and
any code that operates on all of them should operate on them in the
same order (unless the order matters).Prefer a maximum line length of 100 characters for comments and docs
Aim for a maximum line length of roughly 100 characters for comments and docs.Existing docs may use a
line length of 80 characters and should not be reflowed to a maximum line length of 100 to simplify
reviewing docs in PRs.Line length for code is automatically handled by `dart format`, which is configured to use a maximum
line length of 100.Consider using `=>` for short functions and methodsBut only use `=>` when everything, including the function declaration, fits
on a single line.Example:```
// BAD:
String capitalize(String s) =>
  '${s[0].toUpperCase()}${s.substring(1)}';// GOOD:
String capitalize(String s) => '${s[0].toUpperCase()}${s.substring(1)}';String capitalize(String s) {
  return '${s[0].toUpperCase()}${s.substring(1)}';
}```Use `=>` for getters and callbacks that just return literals or switch expressions```
// GOOD:
List<Color> get favorites => <Color>[
  const Color(0xFF80FFFF),
  const Color(0xFF00FFF0),
  const Color(0xFF4000FF),
  _mysteryColor(),
];// GOOD:
bool get isForwardOrCompleted => switch (status) {
  AnimationStatus.forward || AnimationStatus.completed => true,
  AnimationStatus.reverse || AnimationStatus.dismissed => false,
};```It's important to use discretion, since there are cases where a function body
is easier to visually parse:```
// OKAY, but the code is more dense than it could be:
String?get validated => switch(input[_inputIndex]?.trim()) {
  final String value when value.isNotEmpty => value,
  _ => null,
}// BETTER (more verbose, but also more readable):
String?get validated {
  final String?value = input[_inputIndex]?.trim();if (value != null && value.isNotEmpty) {
    return value;
  }
  return null;
}```If your code is passing an inline closure containing only a `return` statement,
you can instead use the `=>` form.When doing this, the closing `]`, `}`, or `)` bracket will have the same
indentation as the line where the callback starts.For example:```
    // GOOD, but slightly more verbose than necessary since it doesn't use =>
    @override
    Widget build(BuildContext context) {
      return PopupMenuButton<String>(
        onSelected: (String value) { print('Selected: $value'); },
        itemBuilder: (BuildContext context) {
          return <PopupMenuItem<String>>[
            PopupMenuItem<String>(
              value: 'Friends',
              child: MenuItemWithIcon(Icons.people, 'Friends', '5 new'),
            ),
            PopupMenuItem<String>(
              value: 'Events',
              child: MenuItemWithIcon(Icons.event, 'Events', '12 upcoming'),
            ),
          ];
        }
      );
    }// GOOD, does use =>, slightly briefer
    @override
    Widget build(BuildContext context) {
      return PopupMenuButton<String>(
        onSelected: (String value) { print('Selected: $value'); },
        itemBuilder: (BuildContext context) => <PopupMenuItem<String>>[
          PopupMenuItem<String>(
            value: 'Friends',
            child: MenuItemWithIcon(Icons.people, 'Friends', '5 new'),
          ),
          PopupMenuItem<String>(
            value: 'Events',
            child: MenuItemWithIcon(Icons.event, 'Events', '12 upcoming'),
          ),
        ]
      );
    }```The important part is that the closing punctuation lines up with the start
of the line that has the opening punctuation, so that you can easily determine
what's going on by just scanning the indentation on the left edge.Use braces for long functions and methods
Use a block (with braces) when a body would wrap onto more than one line (as opposed to using `=>`; the cases where you can use `=>` are discussed in the previous two guidelines).Prefer `+=` over `++`We generally slightly prefer `+=` over `++`.In some languages/compilers postfix `++` is an antipattern because of performance reasons, and so it's easier to just avoid it in general.Because of the former, some people will use the prefix `++`, but this leads to statements that lead with punctuation, which is aesthetically displeasing.In general, mutating variables as part of larger expressions leads to confusion about the order of operations, and entwines the increment with another calculation.Using `++` does not make it obvious that the underlying variable is actually being mutated, whereas `+=` more clearly does (it's an assignment with an `=` sign).Finally, `+=` is more convenient when changing the increment to a number other than 1.Use double literals for double constantsTo make it clearer when something is a double or an integer, even if the number is a round number, include a decimal point in double literals.For example, if a function `foo` takes a double, write `foo(1.0)` rather than `foo(1)` because the latter makes it look like the function takes an integer.Conventions
Expectations around potential crashes in the engineThe engine should never crash in an uncontrolled fashion.In unopt mode, the engine C++ code should have asserts that check for contract violations.In opt debug mode, the `dart:ui` code should have asserts that check for contract violations.These asserts should have messages that are detailed and useful, if they are not self-explanatory.In opt release mode, the exact behavior can be arbitrary so long as it is defined and non-vulnerable for every input.For example, a contract violation could be checked in Dart, with an exception thrown for invalid data; but equally valid would be for the C++ code to return early when faced with invalid data.The idea is to optimize for speed in the case where the data is valid.For practical purposes we don't currently check for out-of-memory errors.Ideally we would.Features we expect every widget to implement
Now that the Flutter framework is mature, we expect every new widget to implement all of the following:
- full accessibility, so that on both Android and iOS the widget works with the native accessibility tools.- full localization with default translations for all our default languages.- full support for both right-to-left and left-to-right layouts, driven by the ambient Directionality.- full support for text scaling up to at least 3.0x.- documentation for every member; see the section above for writing prompts to write documentation.- good performance even when used with large amounts of user data.- a complete lifecycle contract with no resource leaks (documented, if it differs from usual widgets).- tests for all the above as well as all the unique functionality of the widget itself.It's the job of the programmer to provide these before submitting a PR.It's the job of the reviewer to check that all these are present when reviewing a PR.Use of streams in Flutter framework codeIn general we avoid the use of `Stream` classes in Flutter framework code (and `dart:ui`).Streams in general are fine and we encourage people to use them.However, they have some disadvantages and we prefer to keep them out of the framework for this reason.For example:
- Streams have a heavy API.For example, they can be synchronous or asynchronous, broadcast or single-client, and they can be paused and resumed.It is non-trivial to determine the right semantics for a particular stream when it will be used in all the ways framework code could be used, and it is non-trivial to fully implement the semantics correctly.- Streams don't have a "current value" accessor, which makes them difficult to use in `build` methods.- The APIs for manipulating streams are non-trivial (e.g. transformers).We generally prefer `Listenable` subclasses (e.g. `ValueNotifier` or `ChangeNotifier`).In the specific case of exposing a value from `dart:ui` via a callback, we expect the bindings in the framework to register a single listener and then provide a mechanism to fan the notification to multiple listeners.Sometimes this is a rather involved process (e.g. the `SchedulerBinding` exists almost entirely for the purpose of doing this for `onBeginFrame`/`onDrawFrame`, and the `GesturesBinding` exists exclusively for the purpose of doing this for pointer events).Sometimes it's simpler (e.g. propagating changes to life cycle events).Packages
StructureAs per normal Dart conventions, a package should have a single import
that reexports all of its API.For example,
[rendering.dart](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/rendering.dart)
exports all of lib/src/rendering/*.dartIf a package uses, as part of its exposed API, types that it imports
from a lower layer, it should reexport those types.For example,
[material.dart](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/material.dart)
reexports everything from
[widgets.dart](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/widgets.dart).Similarly, the latter
[reexports](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/src/widgets/basic.dart)
many types from
[rendering.dart](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/rendering.dart),
such as `BoxConstraints`, that it uses in its API.On the other
hand, it does not reexport, say, `RenderProxyBox`, since that is not
part of the widgets API.Flutter packages should not have "private" APIs other than those that are
prefixed with underscores.Every file in a Flutter package should be exported.("Private" files can still be imported so they are still actually public APIs;
by not exporting them explicitly we are tricking ourselves into thinking of
them as private APIs which may lead to poor design.)When developing new features in Flutter packages, one should follow the philosophy:Only expose the APIs that are necessities to the features.Since the private classes in dart language are file-bound, this may often result in
large file sizes.In Flutter, this is considered to be more preferable than creating
multiple smaller files but exposing intermediate classes that are not needed to use
the features.Import conventions
Under `lib/src`, for in-folder import, use relative import.For cross-folder import,
import the entire package with absolute import.When importing the `rendering.dart` library into higher level libraries,
if you are creating new
`RenderObject` subclasses, import the entire library.If you are only
referencing specific `RenderObject` subclasses, then import the
`rendering.dart` library with a `show` keyword explicitly listing the
types you are importing.This latter approach is generally good for
documenting why exactly you are importing particularly libraries and
can be used more generally when importing large libraries for very
narrow purposes.By convention, `dart:ui` is imported using `import 'dart:ui' show ...;` for
common APIs (this isn't usually necessary because a lower
level will have done it for you), and as `import 'dart:ui' as ui show ...;`
for low-level APIs, in both cases listing all the identifiers being imported.See [basic_types.dart](https://github.com/flutter/flutter/blob/main/packages/flutter/lib/src/painting/basic_types.dart)
in the `painting` package for details of which identifiers we import
which way.Other packages are usually imported undecorated unless they
have a convention of their own (e.g. `path` is imported `as path`).The `dart:math` library is always imported `as math`.Deciding where to put code
As a general rule, if a feature is entirely self-contained (not requiring low-level integration into the Flutter framework) and is not something with universal appeal, we would encourage that that feature be provided as a package.We try to be very conservative with what we put in the core framework, because there's a high cost to having anything there.We have to commit to supporting it for years to come, we have to document it, test it, create samples, we have to consider everyone's varied desires which they may have as they use the feature, we have to fix bugs.If there are design problems, we may not find out for a long time but then once we do we then have to figure out how to fix them without breaking downstream code, or we have to migrate all our existing widgets to the new architecture, etc.Basically, code is expensive.So before we take it, if possible, we like to see if we can prove the code's value.By creating a package, we can see if people use the feature, how they like it, whether it would be useful for the framework, etc, without having to take on the costs.We have two main kinds of packages that are maintained by the Flutter team, both of which live in [flutter/packages](https://github.com/flutter/packages):
- Regular packages, which are pure Dart.Packages can also be written and maintained by people outside the Flutter team.- Plugin packages, which provide access to platform features and therefore include native code (such as Java or Objective-C) as well as Dart.You can also consider making an independent package.Packages are published to [pub](https://pub.dartlang.org/).Often once we have made a package we find that that is actually sufficient to solve the problem that the code sets out to solve, and there ends up being no need to bring it into the framework at all.

--------------------------------

Contributing to utilsThis is a short guide on how to contribute to the project.Submitting a pull requestIf you find a bug that you'd like to fix, or a new feature that you'd like to implement then please submit a pull request via GitHub.Fork the Repository:- Visit [https://github.com/kashifkhan0771/utils](https://github.com/kashifkhan0771/utils)- Click the "Fork" button to create your own fork- Clone your fork locally:git clone [git@github.com](mailto:git@github.com): raw HTML omitted /utils.git
cd utilsMake a branch to add your new feature```
git checkout -b my-new-feature main```And get hacking.When ready - run the unit tests for the code you changed```
make test```Make sure you
-Add documentation for a new feature- Add unit tests for a new feature- squash commits down to one per feature- rebase to develop `git rebase main`When you are done with that```
git push origin my-new-feature```Your patch will get reviewed, and you might get asked to fix some stuff.If so, then make the changes in the same branch, squash the commits, rebase it to develop then push it to GitHub with `--force`.Test
Tests are run using a testing framework, so at the top level you can run this to run all the tests.```
# runs all tests
make test```Adding New Dependency```
RUNTHIS='go get <package>'```Example```
RUNTHIS='go get github.com/sirupsen/logrus'``````
RUNTHIS='go get github.com/sirupsen/logrus@1.7.0'```

--------------------------------

title: "Contributing to Kubernetes"
weight: 4
description: |
An entrypoint to getting started with contributing to the Kubernetes project.Contributing

---------Kubernetes is open source, but many of the people working on it do so as their day job.In order to avoid forcing people to be "at work" effectively 24/7, we want to establish some semi-formal protocols around development.Hopefully, these rules make things go more smoothly.If you find that this is not the case, please complain loudly.As a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays.Please do not ever hesitate to ask a question or send a pull request.Check out our [community guiding principles](/contributors/guide/expectations.md#code-review) on how to create great code as a big group.Beginner focused information can be found below in  and .For quick reference on contributor resources, we have a handy [contributor cheatsheet](./contributor-cheatsheet/).CommunicationIt is best to contact your [SIG](first-contribution.md#learn-about-sigs) for issues related to the SIG's topic.Your SIG will be able to help you much more quickly than a general question would.For general questions and troubleshooting, use the [standard lines of communication](/communication/README.md) and work through the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).GitHub workflowTo check out code to work on, please refer to [the GitHub Workflow Guide](./github-workflow.md).The full workflow for a pull request is documented here:- [Kubernetes-specific github workflow](pull-requests.md#the-testing-and-merge-workflow).That document is comprehensive and detailed, for purposes of a typical pull request we will cover the initial and simple use case here:
Opening a Pull Request
Pull requests are often called a "PR".Kubernetes generally follows the standard [github pull request](https://help.github.com/articles/about-pull-requests/) process, but there is a layer of additional kubernetes specific (and sometimes SIG specific) differences:The first difference you'll see is that a bot will begin applying structured labels to your PR.The bot may also make some helpful suggestions for commands to run in your PR to facilitate review.These `/command` options can be entered in comments to trigger auto-labeling and notifications.Refer to its [command reference documentation](https://go.k8s.io/bot-commands).Common new contributor PR issues are:-Not having correctly signed the CLA ahead of your first PR.See the [CLA page](/CLA.md) for troubleshooting help, in some cases you might need to file a ticket with the CNCF to resolve a CLA problem.- Finding the right SIG or reviewer(s) for the PR (see  section) and following any SIG or repository specific contributing guidelines (see [Learn about SIGs](first-contribution.md#learn-about-sigs) section)- Dealing with test cases which fail on your PR, unrelated to the changes you introduce (see [Test Flakes](/contributors/devel/sig-testing/flaky-tests.md))- Not following [scalability good practices](scalability-good-practices.md)- Include mentions (like @person) and [keywords](https://help.github.com/en/articles/closing-issues-using-keywords) which could close the issue (like fixes #xxxx) in commit messages.Code ReviewFor a brief description of the importance of code review, please read [On Code Review](/contributors/guide/expectations.md#code-review).There are two aspects of code review: giving and receiving.To make it easier for your PR to receive reviews, consider the reviewers will need you to:- Follow the project [coding conventions](coding-conventions.md)- Write [good commit messages](https://chris.beams.io/posts/git-commit/)- Break large changes into a logical series of smaller patches which individually make easily understandable changes, and in aggregate solve a broader issue- Label PRs with appropriate SIGs and reviewers: to do this read the messages the bot sends you to guide you through the PR processReviewers, the people giving the review, are highly encouraged to revisit the [Code of Conduct](/code-of-conduct.md) as well as [community expectations](./expectations.md#expectations-of-reviewers-review-latency) and must go above and beyond to promote a collaborative, respectful community.When reviewing PRs from others [The Gentle Art of Patch Review](http://sage.thesharps.us/2014/09/01/the-gentle-art-of-patch-review/) suggests an iterative series of focuses which is designed to lead new contributors to positive collaboration without inundating them initially with nuances:-Is the idea behind the contribution sound?- Is the contribution architected correctly?- Is the contribution polished?Note: if your pull request isn't getting enough attention, you can use the [#pr-reviews](https://kubernetes.slack.com/messages/pr-reviews) channel on Slack to get help finding reviewers.Best practices- Write clear and meaningful git commit messages.- If the PR will completely fix a specific issue, include `fixes #123` in the PR body (where 123 is the specific issue number the PR will fix.This will automatically close the issue when the PR is merged.- Make sure you don't include `@mentions` or `fixes` keywords in your git commit messages.These should be included in the PR body instead.- When you make a PR for small change (such as fixing a typo, style change, or grammar fix), please squash your commits so that we can maintain a cleaner git history.- Make sure you include a clear and detailed PR description explaining the reasons for the changes, and ensuring there is sufficient information for the reviewer to understand your PR.- Additional Readings:
- [chris.beams.io/posts/git-commit/](https://chris.beams.io/posts/git-commit/)- [github.com/blog/1506-closing-issues-via-pull-requests ](https://github.com/blog/1506-closing-issues-via-pull-requests)- [davidwalsh.name/squash-commits-git ](https://davidwalsh.name/squash-commits-git)- [https://mtlynch.io/code-review-love/](https://mtlynch.io/code-review-love/)Testing
Testing is the responsibility of all contributors and is in part owned by all SIGs, but is also coordinated by [sig-testing](/sig-testing).Refer to the [Testing Guide](/contributors/devel/sig-testing/testing.md) for more information.There are multiple types of tests.The location of the test code varies with type, as do the specifics of the environment needed to successfully run the test:- Unit: These confirm that a particular function behaves as intended.Golang includes a native ability for unit testing via the [testing](https://golang.org/pkg/testing/) package.Unit test source code can be found adjacent to the corresponding source code within a given package.For example: functions defined in [kubernetes/cmd/kubeadm/app/util/version.go](https://git.k8s.io/kubernetes/cmd/kubeadm/app/util/version.go) will have unit tests in [kubernetes/cmd/kubeadm/app/util/version_test.go](https://git.k8s.io/kubernetes/cmd/kubeadm/app/util/version_test.go).These are easily run locally by any developer on any OS.- Integration: These tests cover interactions of package components or interactions between kubernetes components and some other non-kubernetes system resource (eg: etcd).An example would be testing whether a piece of code can correctly store data to or retrieve data from etcd.Integration tests are stored in [kubernetes/test/integration/](https://git.k8s.io/kubernetes/test/integration).Running these can require the developer set up additional functionality on their development system.- End-to-end ("e2e"):These are broad tests of overall system behavior and coherence.These are more complicated as they require a functional kubernetes cluster built from the sources to be tested.A separate [document detailing e2e testing](/contributors/devel/sig-testing/e2e-tests.md) and test cases themselves can be found in [kubernetes/test/e2e/](https://git.k8s.io/kubernetes/test/e2e).- Conformance:These are a set of testcases, currently a subset of the integration/e2e tests, that the Architecture SIG has approved to define the core set of interoperable features that all Kubernetes deployments must support.For more information on Conformance tests please see the [Conformance Testing](/contributors/devel/sig-architecture/conformance-tests.md)Document.Continuous integration will run these tests either as pre-submits on PRs, post-submits against master/release branches, or both.The results appear on [testgrid](https://testgrid.k8s.io).sig-testing is responsible for that official infrastructure and CI.The associated automation is tracked in the [test-infra repo](https://git.k8s.io/test-infra).If you're looking to run e2e tests on your own infrastructure, [kubetest](https://git.k8s.io/test-infra/kubetest) is the mechanism.Security- [Security Release Page](https://git.k8s.io/security/security-release-process.md) - outlines the procedures for the handling of security issues.- [Security and Disclosure Information](https://kubernetes.io/docs/reference/issues-security/security/) - check this page if you wish to report a security vulnerability.Documentation- [Contributing to Documentation](https://kubernetes.io/editdocs/)Issues Management or TriageHave you ever noticed the total number of [open issues](https://issues.k8s.io)?Helping to manage or triage these open issues can be a great contribution and a great opportunity to learn about the various areas of the project.Triaging is the word we use to describe the process of adding multiple types of descriptive labels to GitHub issues, in order to speed up routing issues to the right folks.Refer to the [Issue Triage Guidelines](/contributors/guide/issue-triage.md) for more information.

--------------------------------

title: "Community Expectations"
weight: 17
description: |
Expectations of conduct and code review that govern all members of the
community.Kubernetes is a community project.Consequently, it is wholly dependent on its community to provide a productive, friendly and collaborative environment.The first and foremost goal of the Kubernetes community is to develop orchestration
technology that radically simplifies the process of creating reliable
distributed systems.However a second, equally important goal is the creation
of a community that fosters easy, agile development of such orchestration
systems.We therefore describe the expectations for members of the Kubernetes community.This document is intended to be a living one that evolves as the community evolves via the same PR and code review process that shapes the rest of the project.It currently covers the expectations of conduct that govern all members of the community as well as the expectations around code review that govern all active contributors to Kubernetes.Code review
As a community we believe in the value of code review for all contributions.Code review increases both the quality and readability of our codebase, which
in turn produces high quality software.See the [pull request documentation](/contributors/guide/pull-requests.md) for more information on code review.Consequently, as a community we expect that all active participants in the
community will also be active reviewers.The [community membership](/community-membership.md) outlines the responsibilities
of the different contributor roles.Expect reviewers to request that you avoid [common go style
mistakes](https://github.com/golang/go/wiki/CodeReviewComments) in your PRs.Expectations of reviewers: Review comments
Because reviewers are often the first points of contact between new members of
the community and can significantly impact the first impression of the
Kubernetes community, reviewers are especially important in shaping the
Kubernetes community.Reviewers are highly encouraged to not only abide by the [code of conduct](/governance.md#code-of-conduct) but are strongly encouraged to go above and beyond the code of conduct to promote a collaborative, respectful Kubernetes community.Expectations of reviewers: Review latency
Reviewers are expected to respond in a timely fashion to PRs that are assigned
to them.Reviewers are expected to respond to an active PRs with reasonable latency, and if reviewers fail to respond, those PRs may be assigned to other reviewers.If reviewers are unavailable to review for some time, they are expected to set their [user status](https://help.github.com/en/articles/personalizing-your-profile#setting-a-status) to "busy" so that the bot will not request reviews from them on new PRs automatically.If they are unavailable for a longer period of time, they are expected to remove themselves from the OWNERS file and potentially nominate someone else.Active PRs are considered those which have a proper CLA (`cla:yes`) label
and do not need rebase to be merged.PRs that do not have a proper CLA, or require a rebase are not considered active PRs.Thanks
Many thanks in advance to everyone who contributes their time and effort to
making Kubernetes both a successful system as well as a successful community.The strength of our software shines in the strengths of each individual
community member.Thanks!

--------------------------------

title: "Making your First Contribution"
weight: 3
description: |
Not sure where to make your first contribution?This doc has some tips and
ideas to help get you started.Your First Contribution- - -- ----Find something to work on
The first step to getting starting contributing to Kubernetes is to find something
to work on.Help is always welcome, and no contribution is too small (but see below)!Here are some things you can do today to get started contributing:- Help improve the Kubernetes documentation- Clarify code, variables, or functions that can be renamed or commented on- Write test coverage- Help triage issuesIf the above suggestions don't appeal to you, you can browse the
[issues labeled as a good first issue](https://go.k8s.io/good-first-issue) to see who is looking for help.Those interested
in contributing without writing code can also find ideas in the
[Non-Code Contributions Guide](./non-code-contributions.md).Note: although contributions are welcome, beware that every pull
request creates work for maintainers and costs for testing it.Fixing linter warnings is often not worth it because the
existing code is fine.Always discuss with maintainers first
before creating such PRs.Find a good first topicThere are [multiple repositories](https://github.com/kubernetes/) within the Kubernetes organization.Each repository has beginner-friendly issues that are a great place to
get started on your contributor journey.For example, [kubernetes/kubernetes](https://git.k8s.io/kubernetes) has
[help wanted](https://go.k8s.io/help-wanted) and [good first issue](https://go.k8s.io/good-first-issue) labels for issues that don't need high-level
Kubernetes knowledge to contribute to.The `good first issue` label also indicates
that Kubernetes Members have committed to providing [extra assistance](./help-wanted.md) for new
contributors.Another way to get started is to find a documentation improvement,
such as a missing/broken link, which will give you exposure to the code
submission/review process without the added complication of technical depth.Issue Assignment in GithubWhen you've found an issue to work on, you can assign it to yourself.- Reply with `/assign` or `/assign @yourself` on the issue you'd like to work on- The [K8s-ci-robot](https://github.com/k8s-ci-robot) will automatically assign the issue to you.- Your name will then be listed under, `Assignees`.Learn about SIGs
Some repositories in the Kubernetes Organization are owned by
[Special Interest Groups], or SIGs.The Kubernetes community is broken out into SIGs in order to improve its workflow,
and more easily manage what is a very large community project.The developers
within each SIG have autonomy and ownership over that SIG's part of Kubernetes.Understanding how to interact with SIGs is an important part of contributing
to Kubernetes.Check out the [list of SIGs](/sig-list.md) for contact information.SIG structure
A SIG is an open, community effort.Anybody is welcome to jump into a SIG and begin fixing issues, critique design
proposals, and review code.SIGs have regular [video meetings](https://kubernetes.io/community/) which everyone
is welcome to attend.Each SIG has a Slack channel, meeting notes, and their own
documentation that is useful to read and understand.There is an entire SIG
([sig-contributor-experience](/sig-contributor-experience/README.md)) devoted to improving your experience as a contributor.If you have an idea for  improving the contributor experience, please consider
attending one of the Contributor Experience SIG's [weekly meetings](https://docs.google.com/document/d/1qf-02B7EOrItQgwXFxgqZ5qjW0mtfu5qkYIF1Hl4ZLI/edit).Find a SIG that is related to your contribution
Finding the appropriate SIG for your contribution and adding a SIG label will
help you ask questions in the correct place and give your contribution higher
visibility and a faster community response.For Pull Requests, the automatically assigned reviewer will add a SIG label
if you haven't already done so.For Issues, please note that the community is working on a more automated workflow.Since SIGs do not directly map onto Kubernetes subrepositories, it may be
difficult to find which SIG your contribution belongs in.Review the
[list of SIGs](/sig-list.md) to determine which SIG is most likely related to your
contribution.Example: if you are filing a CNI issue (that's [Container Networking Interface](https://github.com/containernetworking/cni))
you'd choose the [Network SIG](https://git.k8s.io/community/sig-network).Add the SIG label in a new comment on GitHub
by typing the following:```
/sig network```Follow the link in the SIG name column to reach each SIG's README.Most SIGs will have a set of GitHub Teams with tags that can be mentioned in a
comment on issues and pull requests for higher visibility.If you are not sure
about the correct SIG for an issue, you can try [SIG-contributor-experience](/sig-contributor-experience/README.md),
or [ask in Slack](http://slack.k8s.io/).SIG-specific contributing guidelines
Some SIGs have their own `CONTRIBUTING.md` files, which may contain extra information
or guidelines in addition to these general ones.These are located in the SIG-specific
community directories:
- [/sig-apps/CONTRIBUTING.md](/sig-apps/CONTRIBUTING.md)- [/sig-cli/CONTRIBUTING.md](/sig-cli/CONTRIBUTING.md)- [/sig-multicluster/CONTRIBUTING.md](/sig-multicluster/CONTRIBUTING.md)- [/sig-node/CONTRIBUTING.md](/sig-node/CONTRIBUTING.md)- [/sig-storage/CONTRIBUTING.md](/sig-storage/CONTRIBUTING.md)- [/sig-windows/CONTRIBUTING.md](/sig-windows/CONTRIBUTING.md)File an IssueNot ready to contribute code, but see something that needs work?While the community encourages everyone to contribute code, it is also appreciated
when someone reports an issue.Issues should be filed under the appropriate Kubernetes
subrepository.For example, a documentation issue should be opened in
[kubernetes/website](https://github.com/kubernetes/website/issues).Make sure to adhere to the prompted submission guidelines
while opening an issue.Check the [issue triage guide](./issue-triage.md) for more information.

--------------------------------

CommunicationThe Kubernetes community abides by the [Kubernetes code of conduct](/code-of-conduct.md) on all of
the communication platforms that we moderate listed below with noted exceptions.Here is an excerpt from the code of conduct:As contributors and maintainers of this project, and in the interest
of fostering an open and welcoming community, we pledge to respect
all people who contribute through reporting issues, posting feature
requests, updating documentation, submitting pull requests or patches,
and other activities.Purpose of This Doc
A detailed list of upstream communication platforms and resources for contributors.Since upstream contributors are generally consumers, many of our channels intertwine.See  for more end
user/troubleshooting targeted paths.Community Groups
Kubernetes encompasses many projects, organized into [community groups](/governance.md#community-groups).Upstream communication flows through those channels, most notably in the Special
Interest Groups [SIGs](/sig-list.md) that own the docs and codebases.Their communication
channels may include mailing lists, slack channels, zoom meetings, meeting
agenda/notes, and can be found on their READMEs and on the community
groups/[SIGs](/sig-list.md) page.You can actively or passively participate in one of the following ways:-The community group's public meeting(s) listed on the above community groups page- Every Third Thursday at our [monthly community meeting](https://docs.google.com/document/d/1VQDIAB0OqiSjIHI8AWMvSdceWhnz56jNpZrLs6o7NJY/edit#) over [zoom](https://zoom.us/my/kubernetescommunity) at [10am US Pacific Time](https://www.thetimezoneconverter.com/?t=10:00&tz=PT%20%28Pacific%20Time%29)- Intro sessions at KubeCon/CloudNativeCon live or [recordings on YouTube](https://www.youtube.com/channel/UCvqbFHwN-nwalWPjPUKpvTA)Nevertheless, below find a list of many general channels, groups, and meetings
devoted to the Kubernetes project.Please check the guidelines and any relevant
chat/conversation history before posting.Spam and sales pitches are not tolerated
on these platforms.Appropriate Content for Community ResourcesAll communications properties are under the [Kubernetes code of conduct](/code-of-conduct.md).Additionally, these resources are for the contributors and users of Kubernetes; commercial usage of these properties is heavily moderated.Note that commercial content is allowed, unsolicited commercial content mostly is NOT:
Examples of inappropriate content:- Posting unsolicited content of a commercial nature on Slack or other community forums- Messaging people individually on a platform with content of an unsolicited commercial nature- Unsolicited pitching of commercial products during a Kubernetes meetingExamples of appropriate content:- Asking about commercial products in an appropriate channel.For example most clouds have a channel in Slack, asking how to use GKE on the GKE channel or AKS on the Azure channels is fine.- "Does anyone have experience with project foo?" is fine- Some OSS projects are also hosted on the Kubernetes Slack that also have a commercial offering, these are allowed.Decisions Are Made HereThe project is very large with a robust community group ecosystem and bubbling up
information is important.Transparency is necessary and these channels are key:- [kubernetes-dev](https://groups.google.com/a/kubernetes.io/g/dev) mailing list - all upstream Kubernetes news and discussion.Many community groups have charters that state they have to post here for
certain topics like project wide changes.Joining this mailing list is required
[k-dev moderators](./moderators.md#kubernetes-dev)
for GitHub [org membership](/community-membership.md) and will get you access to all community docs that are
not in GitHub.- GitHub Issues and PRs in an [associated repository](/github-management#actively-used-github-organizations) and- KEPs[(Kubernetes Enhancement Proposals)](https://git.k8s.io/enhancements/keps)
-We don't recommend following or watching any repository unless you are using[heavy email filters](./best-practices.md).Getting involved with the community
group(s) directly is the best way to find out how to best watch what you need
on GitHub.Discussions Happen HereWe talk a lot, too.Slack
Our real-time platform with Kubernetes enthusiasts spread across 250+ channels.Owned and operated by sig-contributor-experience.[Join](http://slack.k8s.io) | [Slack Guidelines](/communication/slack-guidelines.md) | [slack moderators](./moderators.md#slack) | [#kubernetes-contributors](https://app.slack.com/client/T09NY5SBT/C09R23FHP)Pro-tip:If you want to add a new channel, simply file a request following
[these instructions](/communication/slack-guidelines.md#requesting-a-channel).Mailing lists and forums
Most of the Kubernetes mailing lists are hosted through Google Groups or
[Discuss Kubernetes](https://discuss.kubernetes.io).These also power most of the access to our documentation
and calendar items like SIG meetings.[mailing list guidelines](./mailing-list-guidelines.md) | [email filtering tips](./best-practices.md)- [kubernetes-announce](https://groups.google.com/forum/#!forum/kubernetes-announce) broadcasts major project announcements such as releasesand security issues- [kubernetes-dev](https://groups.google.com/a/kubernetes.io/g/dev) hosts contributor announcements and discussions for upstream- [Discuss Kubernetes](https://discuss.kubernetes.io) is a forum where Kubernetes users trade notes with sectionsfor contributors and all kinds of ecosystem related content- Additional Google groups exist and can be joined for discussion related to eachcommunity group as noted above.These are linked from the [SIG list](/sig-list.md).Calendar & MeetingsWe use Zoom for all of our community group meetings and contributor programs.-
[Zoom Guidelines](./zoom-guidelines.md)We keep a [shared calendar](https://calendar.google.com/calendar/embed?src=calendar%40kubernetes.io) with all of our community group meetings.If you'd
like a contributor event published, please reach out to [#sig-contribex](https://app.slack.com/client/T09NY5SBT/C1TU9EB9S) on slack.Website
Documentation is published at [https://kubernetes.io](https://kubernetes.io)- [website guidelines](./website-guidelines.md)Social Media & Blogs
Twitter- [@kubernetesio](https://twitter.com/kubernetesio)
- owned and operated by CNCF.Contact: [social@cncf.io](mailto:social@cncf.io)- [Last Week in Kubernetes Development](http://lwkd.info/)
- owned and operated by [Josh Berkus](https://github.com/jberkus)YouTube
Owned and operated by sig-contribex [community management](/sig-contributor-experience#community-management) subproject.[Kubernetes Community channel](https://www.youtube.com/c/kubernetescommunity) - recordings of community group meetings, Thursday
community call, and more [YouTube Guidelines](./youtube/youtube-guidelines.md).Kubernetes Blog
The [Kubernetes Blog](https://kubernetes.io/blog/) is owned by SIG Docs and operated by the [blog team](/sig-docs/blog-subproject).[submit a blog post](https://kubernetes.io/docs/contribute/start/#write-a-blog-post)Misc Community Resources
Issues & Troubleshooting
For questions about installing, running, or troubleshooting Kubernetes,
please start with the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).If that doesn't answer your question(s),
try to post on discuss.kubernetes.io or if you think you found a bug, please [file an issue](https://github.com/kubernetes/kubernetes/issues/new).Other- [r/kubernetes](https://www.reddit.com/r/kubernetes/) - reddit channel owned and operated by community members andnot an official channel for the project.- [awesome kubernetes list](https://github.com/ramitsurana/awesome-kubernetes) - not an official repo; maintained by a community member.a repo with a huge collection of links to books, talks, and other Kubernetes learning
resources.- [kubeweekly](https://kubeweekly.io/) - owned by cncf and curated by community members listed on the site.Collection of news, blogs, talks, and events for all things Kubernetes.send submissions to [kubeweekly@cncf.io](mailto:kubeweekly@cncf.io)- [LWKD](https://lwkd.info) - a weekly newsletter that summarizes changes to Kubernetes code, development,and release schedules.Written by two members of SIG-Contribex.Conferences, Meetups, Summits, and Face to Face Meetings
CNCF is the main driver for all KubeCon + CloudNativeCons, Kubernetes Forums,
and the [Kubernetes Meetup Pro](https://github.com/cncf/meetups) program on meetup.com.KubeCon + CloudNativeCon,
is held every spring in Europe, summer in China, and winter in North America.Information about these and other community events is available on the CNCF [events](https://www.cncf.io/events/)
pages.The project also has several face to face meetings and contributor summits
throughout the year.To stay updated, check the calendar, your community group of
interest, and/or the #contributor-summit slack channel for more information.ThankYou
A special thanks to all of our volunteer [moderators](./moderators.md) who work in different time
zones all over the world to make all of our communication platforms an enjoyable
place!

--------------------------------

title: "Pull Request Process"
weight: 5
description: |
Explains the process and best practices for submitting a pull request
to the Kubernetes project and its associated sub-repositories.It should serve
as a reference for all contributors, and be useful especially to new or
infrequent submitters.This doc explains the process and best practices for submitting a pull request to the [Kubernetes project](https://github.com/kubernetes/kubernetes) and its associated sub-repositories.It should serve as a reference for all contributors, and be useful especially to new and infrequent submitters.- -- -------- -------------- -Before You Submit a Pull RequestThis guide is for contributors who already have a pull request to submit.If you're looking for information on setting up your developer environment and creating code to contribute to Kubernetes, see the [development guide](/contributors/devel/development.md).First-time contributors should head to the [Contributor Guide](/contributors/guide/README.md) to get started.Make sure your pull request adheres to our best practices.These include following project conventions, making small pull requests, and commenting thoroughly.Please read the more detailed section on  at the end of this doc.Run Local VerificationsYou can run these local verifications before you submit your pull request to predict the pass or fail of continuous integration.- Run and pass `make verify` (can take 30-40 minutes)- Run and pass `make test`- Run and pass `make test-integration`The Pull Request Submit Process
Merging a pull request requires the following steps to be completed before the pull request will be merged automatically.- [Open a pull request](https://help.github.com/articles/about-pull-requests/)
-For kubernetes/kubernetes repository only: Add [release notes](/contributors/guide/release-notes.md) if needed.- Follow the EasyCLA steps to [sign the CLA](https://git.k8s.io/community/CLA.md) (prerequisite)- Pass all e2e tests- Get all necessary approvals from reviewers and code ownersMarking Unfinished Pull RequestsIf you want to solicit reviews before the implementation of your pull request is complete, you should hold your pull request to ensure that Tide does not pick it up and attempt to merge it.There are two methods to achieve this:-You may add the `/hold` or `/hold cancel` comment commands- You may add or remove a `WIP` or `[WIP]` prefix to your pull request titleThe GitHub robots will add and remove the `do-not-merge/hold` label as you use the comment commands and the `do-not-merge/work-in-progress` label as you edit your title.While either label is present, your pull request will not be considered for merging.Pull Requests and the Release Cycle
If a pull request has been reviewed but held or not approved, it might be due to the current phase in the [Release Cycle](/contributors/devel/sig-release/release.md).Occasionally, a SIG may freeze their own code base when working towards a specific feature or goal that could impact other development.During this time, your pull request could remain unmerged while their release work is completed.If you feel your pull request is in this state, contact the appropriate [SIG](https://git.k8s.io/community/sig-list.md) or [SIG-Release](https://git.k8s.io/sig-release) for clarification.Check the  at the end of this document if you're interested in the details on how exactly the automation processes pull requests.Comment Commands Reference[The commands doc](https://go.k8s.io/bot-commands) contains a reference for all comment commands.Automation
The Kubernetes developer community uses a variety of automation to manage pull requests.This automation is described in detail [in the automation doc](/contributors/devel/automation.md).How the e2e Tests Work
The end-to-end tests will post the status results to the pull request.If an e2e test fails, `@k8s-ci-robot` will comment on the pull request with the test history and the comment-command to re-run that test.e.g.The following tests failed, say /retest to rerun them all.Why was my pull request closed?Pull requests older than 90 days will be closed.Exceptions can be made for pull requests that have active review comments, or that are awaiting other dependent pull requests.Closed pull requests are easy to recreate, and little work is lost by closing a pull request that subsequently needs to be reopened.We want to limit the total number of pull requests in flight to:- Maintain a clean project- Remove old pull requests that would be difficult to rebase as the underlying code has changed over time- Encourage code velocityWhy is my pull request not getting reviewed?A few factors affect how long your pull request might wait for review.If it's the last few weeks of a milestone, we need to reduce churn and stabilize.Or, it could be related to best practices.One common issue is that the pull request is too big to review.Let's say you've touched 39 files and have 8657 insertions.When your would-be reviewers pull up the diffs, they run away - this pull request is going to take 4 hours to review and they don't have 4 hours right now.They'll get to it later, just as soon as they have more free time (ha!).There is a detailed rundown of best practices, including how to avoid too-lengthy pull requests, in the next section.But, if you've already followed the best practices and you still aren't getting any pull request love, here are some things you can do to move the process along:-Make sure that your pull request has an assigned reviewer (assignee in GitHub).If not, reply to the pull request comment stream asking for a reviewer to be assigned.This is done via a [bot command](https://prow.k8s.io/command-help) (the bot may have suggestions for this) and looks like this: `/assign @username`.- Ping the assignee (@username) on the pull request comment stream, and ask for an estimate of when they can get to the review.- Ping the assignee on [Slack](http://slack.kubernetes.io).Remember that a person's GitHub username might not be the same as their Slack username.- Ping the assignee by email (many of us have publicly available email addresses).- If you're a member of the organization ping the [team](https://github.com/orgs/kubernetes/teams) (via @team-name) that works in the area you're submitting code to.- If you have fixed all the issues from a review, and you haven't heard back, you should ping the assignee on the comment stream with a "please take another look" (`PTAL`) or similar comment indicating that you are ready for another review.- If you still don't hear back, post a link to the pull request in the `#pr-reviews` channel on Slack to find additional reviewers.Read on to learn more about how to get faster reviews by following best practices.Best Practices for Faster Reviews
Most of this section is not specific to Kubernetes, but it's good to keep these best practices in mind when you're making a pull request.You've just had a brilliant idea on how to make Kubernetes better.Let's call that idea Feature-X.Feature-X is not even that complicated.You have a pretty good idea of how to implement it.You jump in and implement it, fixing a bunch of stuff along the way.You send your pull request - this is awesome!And it sits.And sits.A week goes by and nobody reviews it.Finally, someone offers a few comments, which you fix up and wait for more review.And you wait.Another week or two go by.This is horrible.Let's talk about best practices so your pull request gets reviewed quickly.Familiarize yourself with project conventions- [Development guide](/contributors/devel/development.md)- [Coding conventions](../guide/coding-conventions.md)- [API conventions](/contributors/devel/sig-architecture/api-conventions.md)- [Kubectl conventions](/contributors/devel/sig-cli/kubectl-conventions.md)Is the feature wanted?File a Kubernetes Enhancement ProposalAre you sure Feature-X is something the Kubernetes team wants or will accept?Is it implemented to fit with other changes in flight?Are you willing to bet a few days or weeks of work on it?It's better to get confirmation beforehand.When you want to make a large or otherwise significant change, you should follow the [Kubernetes Enhancement Proposal process](https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/0000-kep-process/README.md).Even for small changes, it is often a good idea to gather feedback on an issue you filed, or even simply ask in the appropriate SIG's Slack channel to invite discussion and feedback from code owners.Here's a [list of SIGs](/sig-list.md), this includes their public meetings.KISS, YAGNI, MVP, etc.Sometimes we need to remind each other of core tenets of software design - Keep It Simple, You Aren't Gonna Need It, Minimum Viable Product, and so on.Adding a feature "because we might need it later" is antithetical to software that ships.Add the things you need NOW and (ideally) leave room for things you might need
later - but don't implement them now.Smaller Is Better: Small Commits, Small Pull Requests
Small commits and small pull requests get reviewed faster and are more likely to be correct than big ones.Attention is a scarce resource.If your pull request takes 60 minutes to review, the reviewer's eye for detail is not as keen in the last 30 minutes as it was in the first.It might not get reviewed at all if it requires a large continuous block of time from the reviewer.Breaking up commits
Break up your pull request into multiple commits, at logical break points.Making a series of discrete commits is a powerful way to express the evolution of an idea or the different ideas that make up a single feature.Strive to group logically distinct ideas into separate commits.For example, if you found that Feature-X needed some prefactoring to fit in, make a commit that JUST does that prefactoring.Then make a new commit for Feature-X.Strike a balance with the number of commits.A pull request with 25 commits is still very cumbersome to review, so use your best judgment.Breaking up Pull RequestsOr, going back to our prefactoring example, you could also fork a new branch, do the prefactoring there and send a pull request for that.If you can extract whole ideas from your pull request and send those as pull requests of their own, you can avoid the painful problem of continually rebasing.Kubernetes is a fast-moving codebase - lock in your changes ASAP with your small pull request, and make merges be someone else's problem.Multiple small pull requests are often better than multiple commits.Don't worry about flooding us with pull requests.We'd rather have 100 small,obvious pull requests than 10 unreviewable monoliths.We want every pull request to be useful on its own, so use your best judgment on what should be a pull request vs.a commit.As a rule of thumb, if your pull request is directly related to Feature-X and nothing else, it should probably be part of the Feature-X pull request.If you can explain why you are doing seemingly no-op work ("it makes the Feature-X change easier, I promise") we'll probably be OK with it.If you can imagine someone finding value independently of Feature-X, try it as a pull request.(Do not link pull requests by `#` in a commit description, because GitHub creates lots of spam.Instead, reference other pull requests via the pull request your commit is in.)Open a Different Pull Request for Fixes and Generic FeaturesPut changes that are unrelated to your feature into a different pull request.Often, as you are implementing Feature-X, you will find bad comments, poorly named functions, bad structure, weak type-safety, etc.You absolutely should fix those things (or at least file issues, please) - but not in the same pull request as your feature.Otherwise, your diff will have way too many changes, and your reviewer won't see the forest for the trees.Look for opportunities to pull out generic features.For example, if you find yourself touching a lot of modules, think about the dependencies you are introducing between packages.Can some of what you're doing be made more generic and moved up and out of the Feature-X package?Do you need to use a function or type from an otherwise unrelated package?If so, promote!We have places for hosting more generic code.Likewise, if Feature-X is similar in form to Feature-W which was checked in last month, and you're duplicating some tricky stuff from Feature-W, consider prefactoring the core logic out and using it in both Feature-W and
Feature-X.(Do that in its own commit or pull request, please.)Don't Open Pull RequestsThat Span the Whole Repository
Often a new contributor will find some problem that exists in many places across the main`kubernetes/kubernetes` repository, and file a PR to fix it everywhere at once.Maybe
there's a cool new function in the latest golang release that everyone ought to be using,
or a recently-deprecated function that ought to be replaced with calls to its replacement.Sometimes a contributor will run a linter or security scanner across the code to find
problems, or fix a particular spelling mistake in comments or variable names.(It's
"deprecated", not "depreciated"!)The problem with this approach is that different parts of `kubernetes/kubernetes` are
maintained by different SIGs, and so changes to those different parts require approvals
from different people.A PR containing 20 one-line changes scattered across the repository
could end up needing 5 or 10 approvals or more before it can be merged.(While there are a
handful of people who can approve changes across large portions of the repository, those
are generally the people who are the most busy and hardest to get reviews from, especially
when you're a new contributor with no connections within the community yet.)If you really want to try to get such a PR merged, your best bet is to break up the PR
into separate PRs for each SIG whose code it touches.You can look at the `OWNERS` files
in a directory (or its parent directory) to see who owns that code, and then group the
changes together accordingly (e.g., with one PR touching files in `cmd/kube-proxy` and
`pkg/util/iptables`, which are owned by SIG Network, and another PR touching files in
`pkg/kubelet` and `pkg/controller/nodelifecycle`, which are owned by SIG Node.)Comments MatterIn your code, if someone might not understand why you did something (or you won't remember why later), comment it.Many code-review comments are about this exact issue.If you think there's something pretty obvious that we could follow up on, add a TODO.Read up on [GoDoc](https://blog.golang.org/godoc-documenting-go-code) - follow those general rules for comments.Test
Nothing is more frustrating than starting a review, only to find that the tests are inadequate or absent.Very few pull requests can touch the code and NOT touch tests.If you don't know how to test Feature-X, please ask!We'll be happy to help you design things for easy testing or to suggest appropriate test cases.Squashing
Your reviewer has finally sent you feedback on Feature-X.Make the fixups, and don't squash yet.Put them in a new commit, and re-push.That way your reviewer can look at the new commit on its own, which is much faster than starting over.We might still ask you to clean up your commits at the very end for the sake of a more readable history, but don't do this until asked: typically at the point where the pull request would otherwise be tagged `LGTM`.Each commit should have a good title line (<70 characters) and include an additional description paragraph describing in more detail the change intended.For more information, see [squash commits](./github-workflow.md#squash-commits).General squashing guidelines:
- Sausage =>squashDo squash when there are several commits to fix bugs in the original commit(s), address reviewer feedback, etc.Really we only want to see the end state, and commit message for the whole pull request.- Layers => don't squashDon't squash when there are independent changes layered to achieve a single goal.For instance, writing a code munger could be one commit, applying it could be another, and adding a precommit check could be a third.One could argue they should be separate pull requests, but there's really no way to test/review the munger without seeing it applied, and there needs to be a precommit check to ensure the munged output doesn't immediately get out of date.Note: you can also use the `tide/merge-method-squash` label on your PR to let the bot handle squashing
all commits, which can be done by commenting `/label tide/merge-method-squash`.As opposed to squashing by hand, this will prevent removal of the `lgtm` label (if already applied) and re-run of the CI tests.Although,
if this label is used, please know the following:
- All commit messages will be squashed and combined and the final commit message will be a combination of allcommit messages according to how GitHub generates the [message for a squash merge](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#merge-message-for-a-squash-merge), for example, if this is the lifecycle of your PR:```
# commit 1
Original commit msgSome useful information
Some more useful information``````
# commit 2
Address review comments``````
# commit 3
Fix test```After applying the label, if the PR is merged, the final commit message will end up being:```
Title of your PR (#PR-number)* Original commit msgSome useful informationSome more useful information* Address review comments* Fix test```Since commit messages are meant to be a record of the "why" and "what" of your changes, having
messages like "Address review comments" in the final commit message adds no real value in terms
of communicating the "what"s and "why"s of your change.Please see  for more details on writing better commit messages.Using this label can help when squashing by hand is considered too challenging or not worth the
extra effort.It can also speed up merging because squashing by hand implies getting another LGTM
from a reviewer and re-run of the CI tests.Commit Message Guidelines
PR comments are not represented in the commit history.Commits and their commit messages are the "permanent record" of the changes being done in your PR and their commit messages should accurately describe both what and why it is being done.Commit messages are comprised of two parts; the subject and the body.The subject is the first line of the commit message and is often the only part
that is needed for small or trivial changes.Those may be done as "one liners" with the `git commit -m` or the `--message` flag, but only if the what and especially why can be fully described in that few words.The commit message body is the portion of text below the subject when you run
`git commit` without the `-m` flag which will open the commit message for editing
in your [preferred editor](https://help.github.com/en/github/using-git/associating-text-editors-with-git).Typing a few further sentences of clarification is a useful investment in time both for your reviews and overall later project maintenance.```
This is the commit message subjectAny text here is the commit message body
Some text
Some more text
...# Please enter the commit message for your changes.Lines starting# with '#' will be ignored, and an empty message aborts the commit.#
#On branch example
# Changes to be committed:
#   ...
#```Use these guidelines below to help craft a well formatted commit message.These can be largely attributed to the previous work of [Chris Beams](https://chris.beams.io/), [Tim Pope](https://tpo.pe/),
[Scott Chacon](https://scottchacon.com/) and [Ben Straub](https://ben.straub.cc/).--------
 raw HTML omitted 
Try to keep the subject line to 50 characters or less; do not exceed 72 charactersThe 50 character limit for the commit message subject line acts as a focus to
keep the message summary as concise as possible.It should be just enough to describe what is being done.The hard limit of 72 characters is to align with the max body size.When viewing the history of a repository with `git log`, git will pad the body text with additional blank spaces.Wrapping the width at 72 characters ensures the body text will be centered and easily viewable on an 80-column terminal.raw HTML omitted 
Providing additional contextYou can provide additional context with fewer characters by prefixing your
commit message with the [kind](https://github.com/kubernetes/kubernetes/labels?q=kind) or [area](https://github.com/kubernetes/kubernetes/labels?q=area) that your PR is impacting.These are commonly used labels that other members of the Kubernetes community will
understand.Examples:
- `cleanup: remove unused portion of script foo`- `deprecation: add notice for bar feature removal in future release`- `etcd: update default server to 3.4.7`- `kube-proxy: add a test case for HostnameOverride`These can serve as a good subject before expanding further on the what and whywithin the commit message body.raw HTML omittedThe first word in the commit message subject should be capitalized unless it starts with a lowercase symbol or other identifierThe commit message subject is like an abbreviated sentence.The first word should be capitalized unless the message begins with symbol, acronym or other identifier such as [kind](https://github.com/kubernetes/kubernetes/labels?q=kind) or [area](https://github.com/kubernetes/kubernetes/labels?q=area) that would regularly be lowercase.raw HTML omittedDo not end the commit message subject with a periodThis is primary intended to serve as a space saving measure, but also aids in
driving the subject line to be as short and concise as possible.raw HTML omittedUse imperative mood in your commit message subject
Imperative mood can be be thought of as a "giving a command"; it is a
present-tense statement that explicitly describes what is being done.Good Examples:
- Fix x error in y- Add foo to bar- Revert commit "baz"- Update pull request guidelines
Bad Examples- Fixed x error in y- Added foo to bar- Reverting bad commit "baz"- Updating the pull request guidelines- Fixing more things
A general guideline from [Chris Beams](https://chris.beams.io/) on forming an imperative commit subjectis it should complete this sentence:```
If applied, this commit will <your subject line here>```Examples:
- If applied, this commit will Fix x error in y- If applied, this commit will Add foo to bar- If applied, this commit will Revert commit "baz"- If applied, this commit will Update the pull request guidelines
 raw HTML omitted 
Add a single blank line before the commit message bodyGit uses the blank line to determine which portion of the commit message is the
subject and body.Text preceding the blank line is the subject, and text following is considered the body.raw HTML omitted 
Wrap the commit message body at 72 charactersThe default column width for git is 80 characters.Git will pad the text of the message body with an additional 4 spaces when viewing the git log.This would leave you with 76 available spaces for text, however the text would be "lop-sided".To center the text for better viewing, the other side is artificially padded
with the same amount of spaces, resulting in 72 usable characters per line.Think of them as the margins in a word doc.raw HTML omittedDo not use GitHub keywords or (@)mentions within your commit message
 raw HTML omitted 
GitHub Keywords
Using [GitHub keywords](https://help.github.com/articles/closing-issues-using-keywords) followed by a `#<issue number>` reference within your
commit message will automatically apply the `do-not-merge/invalid-commit-message`
label to your PR preventing it from being merged.[GitHub keywords](https://help.github.com/articles/closing-issues-using-keywords) in a PR to close issues is considered a convenience item, but
can have unexpected side-effects when used in a commit message; often closing something they shouldn't.Blocked Keywords:
- close- closes- closed- fix- fixes- fixed- resolve- resolves- resolved
 raw HTML omitted 
(@)Mentions

(@)mentions within the commit message will send a notification to that user, and
will continually do so each time the PR is updated.raw HTML omittedUse the commit message body to explain the what and why of the commit
Commits and their commit messages are the "permanent record" of the changes
being done in your PR.Describing why something has changed and what effects it may have.You are providing context to both your reviewer and the next person that has to touch your code.If something is resolving a bug, or is in response to a specific issue, you can
link to it as a reference with the message body itself.These sorts of breadcrumbs become essential when tracking down future bugs or regressions and further help explain the "why" the commit was made.Additional Resources:
- [How to Write a Git Commit Message - Chris Beams](https://chris.beams.io/posts/git-commit/)- [Distributed Git - Contributing to a Project (Commit Guidelines)](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project)- [What’s with the 50/72 rule?- Preslav Rachev](https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/)- [A Note About Git Commit Messages - Tim Pope](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)It's OK to Push BackSometimes reviewers make mistakes.It's OK to push back on changes your reviewer requested.If you have a good reason for doing something a certain way, you are absolutely allowed to debate the merits of a requested change.Both the reviewer and reviewee should strive to discuss these issues in a polite and respectful manner.You might be overruled, but you might also prevail.We're pretty reasonable people.Another phenomenon of open-source projects (where anyone can comment on any issue)
is the dog-pile - your pull request gets so many comments from so many people it
becomes hard to follow.In this situation, you can ask the primary reviewer (assignee) whether they want you to fork a new pull request to clear out all the comments.You don't HAVE to fix every issue raised by every person who feels like commenting, but you should answer reasonable comments with an explanation.Common Sense and CourtesyNo document can take the place of common sense and good taste.Use your best judgment, while you put a bit of thought into how your work can be made easier to review.If you do these things your pull requests will get merged with less friction.Trivial Edits
Each incoming Pull Request needs to be reviewed, checked, and then merged.While automation helps with this, each contribution also has an engineering cost.Therefore it is appreciated if you do NOT make trivial edits and fixes, but
instead focus on giving the entire file a review.If you find one grammatical or spelling error, it is likely there are more in
that file, you can really make your Pull Request count by checking the formatting,
checking for broken links, and fixing errors and then submitting all the fixes
at once to that file.Some questions to consider:
- Can the file be improved further?- Does the trivial edit greatly improve the quality of the content?Fixing linter issuesKubernetes has a set of linter checks.Some of those must pass in the entire
code base, some must pass in new or modified code, and some are merely hints
to developers how to improve their code.Please do not create Pull Requests for issues found by linters without first
reaching out to maintainers on the `#code-organization`
[Slack](http://slack.kubernetes.io) channel to determine whether there is
sufficient interest in fixing such issues.When it was discussed, make sure to include people who gave the preliminary
approval of this work as well as the link to the discussion on Slack or GitHub
issue into the PR description.This is a good example to follow:
/area code-organizationThis PR fixes linter rules discussed in the Slack [https://kubernetes.slack.com/archives/Foo/Bar](https://kubernetes.slack.com/archives/Foo/Bar).Preliminary agreement to address those issues were given by @GHHandle1 and @GHHandle2./assign @GHHandle1
/assign @GHHandle2This PR fixes issues in the package:
pkg/kubelet
Related PRs for other packages:
- github.com/link-to-other-PR1- github.com/link-to-other-PR2It does not matter whether the linter is enabled in Kubernetes or not:-If a linter is enabled in[golangci.yaml](https://github.com/kubernetes/kubernetes/blob/master/hack/golangci.yaml),then it has already been determined that sweeping changes in the existing
code aren't necessary or just are not worth the cost (e.g. causing rebases of other
Pull Requests or obscuring authorship).- If a linter is not enabled, then it might not be important enough.- If the check is performed by third party tools which are not integrated in
the Kubernetes CI or proprietary, file a bug or start a discussion about it first.Such Pull Requests are often large and thus hard to review.When the linter
enforces some opinion or policy, then this is not necessarily something that
applies to Kubernetes.Kubernetes uses the formatting rules enforced by Go.
Stricter rules like specific usage of
[whitespace](https://golangci-lint.run/usage/linters/#whitespace) or using
[standard library constants](https://golangci-lint.run/usage/linters/#usestdlibvars)
are opinionated and not worth the cost of introducing them now.Linters worth considering are those which actually improve code correctness,
for example by warning about suspicious code like calling a function and then
not checking the error result.The Testing and Merge Workflow
The Kubernetes merge workflow uses labels, applied by [commands](https://prow.k8s.io/command-help) via comments.These will trigger actions on your pull request.Different Kubernetes repositories may require different labels on the path to approval.A generic explanation of how labels are used in pull requests can be found [here](/contributors/guide/owners.md#code-review-using-owners-files).The pull request bot will also automatically apply and/or suggest labels.Example: To apply a SIG label, you would type in a comment:```
/sig apps```NOTE: For pull requests that are in progress but not ready for review,
prefix the pull request title with `WIP` or `[WIP]` and track any remaining TODOs
in a checklist in the pull request description.Here's the process the pull request goes through on its way from submission to merging:
- Make the pull request- `@k8s-ci-robot` assigns reviewers- If you're not a member of the Kubernetes organization, a Reviewer/Kubernetes Member checks that the pull request is safe to test.If so, they comment `/ok-to-test`.Pull requests by Kubernetes organization [members](/community-membership.md) do not need this step.Now the pull request is considered to be trusted, and the pre-submit tests will run:
- Automatic tests run.See the current list of tests at this [link](https://prow.k8s.io/?repo=kubernetes%2Fkubernetes&type=presubmit)- If tests fail, resolve issues by pushing edits to your pull request branch- If the failure is a flake, anyone on trusted pull requests can comment `/retest` to rerun failed tests- Reviewer suggests edits- Push edits to your pull request branch- Repeat the prior two steps as needed until the reviewer(s) add `/lgtm` label.The `/lgtm` label, when applied by someone listed as a `reviewer` in the corresponding project `OWNERS` file, is a signal that the code has passed review from one or more trusted reviewers for that project- (Optional) Some reviewers prefer that you squash commits at this step- Follow the bot suggestions to assign an OWNER who will add the `/approve` label to the pull request.The `/approve` label, when applied by someone listed as an `approver` in the corresponding project `OWNERS`, is a signal that the code has passed final review and is ready to be automatically mergedThe behavior of Prow is configurable across projects.You should be aware of the following configurable behaviors.-If you are listed as an `/approver` in the `OWNERS` file, an implicit `/approve` can be applied to your pull request.This can result in a merge being triggered by a `/lgtm` label.This is the configured behavior in many projects, including `kubernetes/kubernetes`.You can remove the implicit `/approve` with `/approve cancel`- `/lgtm` can be configured so that from someone listed as both a `reviewer` and an `approver` will cause both labels to be applied.For `kubernetes/kubernetes` and many other projects this is not the default behavior, and `/lgtm` is decoupled from `/approve`Once the tests pass, and the reviewer adds the `lgtm` and `approved` labels, the pull request enters the final merge pool.The merge pool is needed to make sure no incompatible changes have been introduced by other pull requests since the tests were last run on your pull request.raw HTML omitted 
[Tide](https://sigs.k8s.io/prow/cmd/tide) will manage the merge pool
automatically.It uses GitHub queries to select PRs into “tide pools”,
runs as many in a batch as it can (“tide comes in”), and merges them (“tide goes out”).-The pull request enters the [merge pool](https://prow.k8s.io/tide)if the merge criteria are met.The [PR dashboard](https://prow.k8s.io/pr) showsthe difference between your PR's state and the merge criteria so that you can
easily see all criteria that are not being met and address them.- If tests fail, resolve issues by pushing edits to your pull request branch- If the failure is a flake, anyone can comment `/retest` if the pull request is trusted- If tests pass, Tide automatically merges the pull requestThat's the last step.Your pull request is now merged.More About `Ok-To-Test`
-The ok-to-test label is applied by org members to PRs from external contributors, it signals that the PR can be tested.- For a Contributor, an `ok-to-test` label means the regular CI tests will be run for their PR.- For the reviewer or the member, labelling the PR with `ok-to-test` it means a lot more:
-They need to take care if the PR is not a wastage of our `CI/CD` resources.- Is the PR worth testing or does it need more changes before going through the `CI/CD` process?- Is the PR getting used to run malicious code to misuse our resources ?- An `ok-to-test` label may reduce the workload and smoothens the contributors experience as they can know if there is any failing test.If there is, you can fix the test and they don't have to wait for a long time to get a review from `maintainer/assignee`.- There are various other factors on which labelling of `ok-to-test` depends :
- Size of PR :
-If the PR is of `size/S` or `size/M` which is just to fix a grammatical error or spelling mistake, the reviewer can trigger the `CI/CD` without having a second thought.- If the PR is of `size/XXL` which aims at adding a new feature, a new API endpoint or any new substantial feature.There needs to other conventions & process to be followed regarding the change made.Hence, it may have a slight delay to get labelled with `ok-to-test`.- Other org members who are not assigned to the following PR may also label `ok-to-test` , if the change is small.- If the PR is labelled with `cncf-cla: no`, then it is better to wait before labelling `ok-to-test`.- PRs with tag `do-not-merge/hold` or `needs-rebase` should make the appropriate changes before the PR can be labelled `ok-to-test`.- PRs created by mistake without to meaningful change of code should not be labelled `ok-to-test` and closed.

--------------------------------

title: "GitHub Workflow"
weight: 6
description: |
This document is an overview of the GitHub workflow used by the
Kubernetes project.It includes tips and suggestions on keeping your
local environment in sync with upstream and how to maintain good
commit hygiene.1. Fork in the cloud
- Visit [https://github.com/kubernetes/kubernetes](https://github.com/kubernetes/kubernetes)- Click `Fork` button (top right) to establish a cloud-based fork.2. Clone fork to local storageIn your shell, define a local working directory as `working_dir`.```
export working_dir="${HOME}/src/k8s.io"# Change to your preferred location for source code```Set `user` to match your github profile name:```
export user=<your github profile name>```Both `$working_dir` and `$user` are mentioned in the figure above.Create your clone:```
mkdir -p $working_dir
cd $working_dir
git clone https://github.com/$user/kubernetes.git
# or: git clone git@github.com:$user/kubernetes.gitcd $working_dir/kubernetes
git remote add upstream https://github.com/kubernetes/kubernetes.git# or: git remote add upstream git@github.com:kubernetes/kubernetes.git# Never push to upstream master
git remote set-url --push upstream no_push# Confirm that your remotes make sense:
git remote -v```3. Create a Working BranchGet your local master up to date.Note that depending on which repository you are working from,the default branch may be called "main" instead of "master".```
cd $working_dir/kubernetes
git fetch upstream
git checkout master
git rebase upstream/master```Create your new branch.```
git checkout -b myfeature```You may now edit files on the `myfeature` branch.Building KubernetesThis workflow is process-specific.For quick-start build instructions for [kubernetes/kubernetes](https://git.k8s.io/kubernetes), please [see here](/contributors/devel/development.md#building-kubernetes-on-a-local-osshell-environment).4. Keep your branch in syncYou will need to periodically fetch changes from the `upstream`repository to keep your working branch in sync.Note that depending on which repository you are working from,
the default branch may be called 'main' instead of 'master'.Make sure your local repository is on your working branch and run the
following commands to keep it in sync:```
git fetch upstream
git rebase upstream/master```Please don't use `git pull` instead of the above `fetch` and
`rebase`.Since `git pull` executes a merge, it creates merge commits.These make the commit history messy
and violate the principle that commits ought to be individually understandable
and useful (see below).You might also consider changing your `.git/config` file via
`git config branch.autoSetupRebase always` to change the behavior of `git pull`, or another non-merge option such as `git pull --rebase`.5. Commit Your ChangesYou will probably want to regularly commit your changes.It is likely that you will go back and edit,build, and test multiple times.After a few cycles of this, you might
[amend your previous commit](https://www.w3schools.com/git/git_amend.asp).```
git commit```6. Push to GitHubWhen your changes are ready for review, push your working branch toyour fork on GitHub.```
git push -f <your_remote_name>myfeature```7. Create a Pull Request- Visit your fork at `https://github.com/<user>/kubernetes`- Click the Compare & Pull Request button next to your `myfeature` branch.- Check out the pull request [process](/contributors/guide/pull-requests.md) for more details and
advice.If you have upstream write access, please refrain from using the GitHub UI for
creating PRs, because GitHub will create the PR branch inside the main
repository rather than inside your fork.Get a code review
Once your pull request has been opened it will be assigned to one or more
reviewers.Those reviewers will do a thorough code review, looking for
correctness, bugs, opportunities for improvement, documentation and comments,
and style.Commit changes made in response to review comments to the same branch on your
fork.Very small PRs are easy to review.Very large PRs are very difficult to review.Squash commits
After a review, prepare your PR for merging by squashing your commits.All commits left on your branch after a review should represent meaningful milestones or units of work.Use commits to add clarity to the development and review process.Before merging a PR, squash the following kinds of commits:
- Fixes/review feedback- Typos- Merges and rebases- Work in progress
Aim to have every commit in a PR compile and pass tests independently if you can, but it's not a requirement.In particular, `merge` commits must be removed, as they will not pass tests.To squash your commits, perform an [interactive rebase](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History):
-Check your git branch:```git status```The output should be similar to this:```
On branch your-contribution
Your branch is up to date with 'origin/your-contribution'.```- Start an interactive rebase using a specific commit hash, or count backwards from your last commit using `HEAD~<n>`, where `<n>` represents the number of commits to include in the rebase.```git rebase -i HEAD~3```The output should be similar to this:```
pick 2ebe926 Original commit
pick 31f33e9Address feedback
pick b0315fe Second unit of work# Rebase 7c34fc9..b0315ff onto 7c34fc9 (3 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message...```- Use a command line text editor to change the word `pick` to `squash` for the commits you want to squash, then save your changes and continue the rebase:```pick 2ebe926Original commit
squash 31f33e9Address feedback
pick b0315fe Second unit of work...```The output after saving changes should look similar to this:```
[detached HEAD 61fdded] Second unit of work
 Date: Thu Mar 5 19:01:32 2020 +0100
 2 files changed, 15 insertions(+), 1 deletion(-)...Successfully rebased and updated refs/heads/master.```- Force push your changes to your remote branch:```git push --force-with-lease```For mass automated fixups such as automated doc formatting, use one or more
commits for the changes to tooling and a final commit to apply the fixup en
masse.This makes reviews easier.An alternative to this manual squashing process is to use the Prow and Tide based automation that is configured in GitHub: adding a comment to your PR with `/label tide/merge-method-squash` will trigger the automation so that GitHub squash your commits onto the target branch once the PR is approved.Using this approach simplifies things for those less familiar with Git, but there are situations in where it's better to squash locally; reviewers will have this in mind and can ask for manual squashing to be done.By squashing locally, you control the commit message(s) for your work, and can separate a large PR into logically separate changes.For example: you have a pull request that is code complete and has 24 commits.You rebase this against the same merge base, simplifying the change to two commits.Each of those two commits represents a single logical change and each commit message summarizes what changes.Reviewers see that the set of changes are now understandable, and approve your PR.Merging a commitOnce you've received review and approval, your commits are squashed, your PR is ready for merging.Merging happens automatically after both a Reviewer and Approver have approved the PR.If you haven't squashed your commits, they may ask you to do so before approving a PR.Reverting a commitIn case you wish to revert a commit, use the following instructions.If you have upstream write access, please refrain from using the
`Revert` button in the GitHub UI for creating the PR, because GitHub
will create the PR branch inside the main repository rather than inside your fork.- Create a branch and sync it with upstream.Note that depending on which repository you are working from, the default branch may be called 'main' instead of 'master'.```# create a branch
git checkout -b myrevert# sync the branch with upstream
git fetch upstream
git rebase upstream/master```- If the commit you wish to revert is a merge commit, use this command:```# SHA is the hash of the merge commit you wish to revert
git revert -m 1 <SHA>```If it is a single commit, use this command:```
# SHA is the hash of the single commit you wish to revert
git revert <SHA>```- This will create a new commit reverting the changes.Push this new commit to your remote.```git push <your_remote_name>myrevert```- Finally,  using this branch.

--------------------------------

The Contributor License Agreement
The [Cloud Native Computing Foundation](https://www.cncf.io) (CNCF) defines
the legal status of the contributed code in two different types of Contributor License Agreements
(CLAs), [individual contributors](https://github.com/cncf/cla/blob/master/individual-cla.pdf) and [corporations](https://github.com/cncf/cla/blob/master/corporate-cla.pdf).Kubernetes can only accept original source code from CLA signatories.This policy does not apply to [third_party](https://git.k8s.io/kubernetes/third_party)
and [vendor](https://git.k8s.io/kubernetes/vendor).It is important to read and understand this legal agreement.How do I sign?After creating your first Pull Request, the linux-foundation-easycla bot will respond with information regarding your CLA status along with a link to sign the CLA.raw HTML omitted1. If you are signing up as a corporate contributor, ensure that you have linked your corporate email address to your GitHub profile (it doesn't have to be your primary email address for GitHub) or else it can lead to issues with the CLA system.For more information, please see [Adding an email address to your GitHub account](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-email-preferences/adding-an-email-address-to-your-github-account).2. Authorize EasyCLA to read some of your GitHub information
 raw HTML omitted 
- Click on the Please click here to be authorized link to navigate to the GitHub Authorize Linux Foundation: EasyCLA page.- Then click Authorize LF-Engineering to give the Linux Foundation read-only access to list the email addresses associated with your GitHub account.3. Select from the two types of contributor
 raw HTML omittedAfter authorizing EasyCLA, you will be redirected to a page to identify which type of contributor you are.Select the most appropriate option:- Individual Contributor: You are contributing as yourself, and not as part of another organization.- Corporate Contributor: You are contributing on behalf of your employer or other organization.4. Sign the CLAOnce you select the type of contributor, proceed to Sign the CLA and follow the instructions to complete the signing process through DocuSign.After you have filled out  the information, Click "Finish" and you will be redirected back to your Pull Request.5. Look for an email indicating successful signup.Hello,This is a notification email from EasyCLA regarding the project Cloud Native Computing > Foundation (CNCF).The CLA has now been signed.You can download the signed CLA as a PDF here.If you need help or have questions about EasyCLA, you can read the documentation or reach out to us for support.Thanks,
EasyCLASupport Team6. Validate your CLAOnce you are redirected back to your GitHub Pull Request, reply with a comment `/easycla` to update the CLA status of your PR.Changing your AffiliationIf you've changed employers and still contribute to Kubernetes, your affiliation
needs to be updated.The Cloud Native Computing Foundation uses [gitdm](https://github.com/cncf/gitdm)
to track who is contributing and from where.Create a pull request on the [gitdm](https://github.com/cncf/gitdm)
repository with a change to the corresponding developer affiliation text file.Your entry should look similar to this:```
Jorge O. Castro*: jorge!heptio.com, jorge!ubuntu.com, jorge.castro!gmail.comHeptio
Canonical until 2017-03-31```TroubleshootingIf you encounter any problems signing the CLA and need further assistance, log a ticket by clicking on the link [please submit a support request ticket](https://jira.linuxfoundation.org/plugins/servlet/theme/portal/4) from the EasyCLA bot's response.Someone from the CNCF will respond to your ticket to help.Should you have any issues using the LF Support Site, send a message to the
backup email support address [login-issues@jira.linuxfoundation.org](mailto:login-issues@jira.linuxfoundation.org)Setting up the CNCF CLA checkIf you are a Kubernetes GitHub organization or repo owner and would like to setup the Linux Foundation CNCF CLA check for your repositories, [read the docs on setting up the CNCF CLA check](/github-management/setting-up-cla-check.md)

--------------------------------

This document is written for contributors who would like to avoid their code being reverted for performance reasons
Table of Contents

--- -------Who should read this document and what is in it?This document is targeted at developers of "vanilla Kubernetes" who do not want their
changes rolled-back or blocked because they cause performance regressions.It contains
some of the knowledge and experience gathered by the scalability team over more than two years.It is presented as a set of examples from the past which broke scalability tests,
followed by some explanations and general suggestions on how to avoid causing similar problems.What does it mean to "break scalability"?"Breaking scalability" means causing performance SLO violations in one of our performance tests.Performance SLOs for Kubernetes are  raw HTML omitted  raw HTML omitted :- 99th percentile of API call latencies <= 1s- 99th percentile of e2e Pod startup, excluding image pulling, latencies <= 5sWe run density and load tests, and we invite anyone interested in the details to read the code.We run those tests on large clusters (100+ Nodes).This means tests are somewhat
resistant to limited concurrency in Kubelet (e.g. they are routinely failing on
very small clusters, when the Scheduler cannot spread Pod creations broadly enough).Examples
Inefficient use of memory
Consider the following sample code snippet:```
func (s Scheduler) ScheduleOne(pod v1.Pod, nodes []v1.Nodes) v1.Node {
  for _, node := range nodes {
    if s.FitsNode(pod, node) {
      …
    }
  }
}func (s Scheduler) DoSchedule(podsChan chan v1.Pod) {
  for {
    …
    node := s.ScheduleOne(pod, s.nodes)
    …
  }
}```This snippet contains a number of problems that were always present in the Kubernetes
codebase, and continue to appear.We try to address them in the most important places,
but the work never ends.The first problem is that `func (s Scheduler) ScheduleOne…` means each call of `ScheduleOne`
will run on a new copy of the Scheduler object.This in turn means Golang will need to copy
the entire `Scheduler` struct every time the `ScheduleOne` function is called.The copy will
then be discarded when the function returns.Clearly, this is a waste of resources, and
in some cases may be incorrect.Next, `(pod v1.Pod, nodes []v1.Nodes)` has much in common with the first problem.By default,
Golang passes arguments as values, i.e. copies them when they are passed to the function.Note that this is very different from Java or Python.Of course, some things are fine to
pass directly.Slices, maps, strings and interfaces are actually pointers
(in general interfaces might not be pointers, but in our code they are - see first point),
so only a pointer value is copied when they are passed as an argument.For flat structures,
copying is sometimes necessary (e.g. when doing asynchronous modifications), but most often
it is not.In such cases, use pointers.As there are no constant references in Golang, this is the only option for passing objects
without copying them (except creating read-only interfaces for all types, but that is not feasible).Note that it is (and should be) scary to pass a pointer to your object to strangers.Before you do so, make sure the code to which you are passing the pointer will not modify the object.Races are bad as well.Note that all `Informers` (see next paragraph) caches are expected to be immutable.We could go on and on, but the point is clear -- when writing code that will be executed often,
you need to think about memory management.From time to time we all occasionally forget to keep
this in mind, but we are reminded of it when we look at performance.General rules are:
- Using heap is very expensive (garbage collection)- Avoid unnecessary heap operations altogether- Repeatedly copying objects is noticeable and should be minimized.- Learn how Golang manages memory.This is especially important in components running
on the control plane.Otherwise we may end up in the situation where the API serveris starved on CPU and cannot respond quickly to requests.Explicit lists from the API server
Some time ago most of our controllers looked like this:```
func (c *ControllerX) Reconcile() {
  items, err := c.kubeClient.X(v1.NamespaceAll).List(&v1.ListOptions{})
  if err != nil {
    ...}
  for _, item := range items {
    ...
  }
}func (c *ControllerX) Run() {
  wait.Until(c.Reconcile, c.Period, wait.NeverStop)
  ...}```This may look OK, but List() calls are expensive.Objects can have sizes of a few
kilobytes, and there can be 150,000 of those.This means List() would need to send
hundreds of megabytes through the network, not to mention the API server would need
to do conversions of all this data along the way.It is not the end of the world,
but it needs to be minimized.The solution is simple (quoting Clayton):As a rule, use Informer.If using Informer, use shared Informers.If your use case does not look like an Informer, look harder.If at the very end of that it still does not look like an Informer,
consider using something else after talking to someone.But probably use Informer.`Informer` is our library which provides a read interface to the store - it is a
read-only cache that provides you with a local copy of the store that contains
only the object you are interested in (matching given selector).From it you
can Get(), List() or whatever read operations you desire.`Informer` also allows
you to register functions that will be called when an object is created, modified or deleted.The magic behind `Informers` is that they are populated by the WATCH,
so they create minimal stress on the API server.Code for Informer is
[here](https://git.k8s.io/kubernetes/staging/src/k8s.io/client-go/tools/cache/shared_informer.go).In general: use `Informers` - if we were able to rewrite most vanilla controllers to use them,
you should be able to do so as well.Otherwise, you may dramatically increase the CPU
requirements of the API server which will starve it and make it too slow to meet our SLOs.Superfluous API callsOne past regression was caused by `Secret` refreshing logic in Kubelet.By contract
we want to update values of `Secrets` (update env variables, contents of `Secret` volume)
when the contents of `Secret` are updated in the API server.Normally we would use
`Informer` (see above), but there is an additional security constraint; Kubelet should
know only `Secrets` that are attached to `Pods` scheduled on the corresponding `Node`,
so there should be no watching of all `Secret` updates (which is how `Informers` work).We already know that List() calls are also bad (not to mention that they have the same
security problem as WATCH), so the only way we can read `Secrets` is through GET.For each `Secret` we were periodically GETting its value and updating underlying
variables/volumes as necessary.We have the same logic for `ConfigMaps`.Everything
was great until we turned on the `ServiceAccount` admission controller in our
performance tests.Then everything went wrong for a very simple reason;
the `ServiceAccount` admission controller creates a `Secret` that it attaches to
every `Pod` (a different one in every Namespace, but this does not change anything).Multiply this behavior by 150,000 and, given a refresh period of 60 seconds,
an additional 2.5k QPS were being sent to the API server, which of course caused it to fail.To mitigate this issue we had to reimplement Informers using GETs instead of WATCHes.The current solution consists of a `Secret` cache shared between all `Pod`s.When a `Pod` wants to check if the `Secret` has changed it looks in the cache.If the `Secret` stored in the cache is too old, the cache issues a GET request to
the API server to refresh the value.As `Pods` within a single `Namespace` share
the `Secret` for `ServiceAccount`, it means Kubelet will need to refresh the
`Secret` only once in a while per `Namespace`, not per `Pod`, as it was before.This of course is a stopgap and not a final solution, which is currently (as of early May 2017)
being designed as a ["Bulk Watch"](https://github.com/kubernetes/community/pull/443).This example demonstrates why you need to treat API calls as a rather expensive
shared resource.This is especially important on the Node side, as every change
is multiplied by 5,000.In controllers, especially when writing some disaster
recovery logic, it is perfectly fine to add a new call.There are not a lot of
controllers, and disaster recovery should not happen too often.That being said,
whenever you add a new API server request you should do quick estimation of QPS
that will be added to the API server, and if the result is a noticeable number
you probably should think about a way to reduce it.One obvious consequence of not reducing API calls is that you will starve the API
server on CPU.This particular pattern can also drain `max-inflight-request` in
the API server, which will make it respond with 429's (Too Many Requests) and thus
slow down the system.At best it will only cause draining of the local client rate
limiter for API calls in your component (default value is 5 QPS, controllers normally have 20).This will result in your component being very, very slow.Complex and expensive computations on a critical path
Let us use the `PodAntiAffinity` scheduling feature as an example.The goal of this feature is to allow users to prevent co-scheduling of `Pods`
(using a very broad definition of co-scheduling).When defining `PodAntiAffinity`
you pass two things: `Node` grouping and `Pod` selector.The semantics is that for
each group of `Nodes` you check if any `Node` in the group runs a `Pod` matching
the selector.If it does, all `Nodes` from the group are discarded.This of course
needs to be symmetric, as if you prevent pods from set A to be co-scheduled with
`Pods` from set B, but not the other way around.When adding new `Pod` to set B,
you'll end up with `Pods` from A and B running in the same group, which you wanted to avoid.This means that even when scheduling `Pods` that do not explicitly use the `PodAntiAffinity`
feature you need to check `PodAntiAffinities` of all `Pods` running in the cluster.It also means that scheduling of every `Pod` gets an additional check of `O(#Pods * #Nodes)`
complexity, if naively implemented.Given the fact that we can have 150.000 `Pods` in the
cluster, it becomes obvious it is not a good idea to have quadratic algorithms on a critical
path for Pods - even for ones that do not use the PodAntiAffinity feature!This was initially implemented in a very simple way, rapidly making the scheduler
unusable, and `Pod` startup times went through the roof.We were forced to block
this feature, and it did not make into the target release.Later, we slightly
improved the algorithm to `O(#(scheduled Pods with PodAntiAffinity) * #Nodes)`,
which was enough to allow the feature to get in as beta, with a huge asterisk next to it.This example illustrates how many problems in this area can be much more complex
than they seem.Not only that, they are non-linear, and some of them are NP-complete.Understandably, sometimes you need to write something complex, but when you do,
you must protect the rest of the system from that complexity,
and add it only where it is absolutely necessary.Big dependency changes
Kubernetes depends on pretty much the whole universe.From time to time we need
to update some dependencies (Godeps, etcd, go version).This can break us in
many ways, as has already happened a couple of times.We skipped one version
of Golang (1.5) precisely because it broke our performance.As this is being
written, we are working with the Golang team to try to understand why Golang
version 1.8 negatively affects Kubernetes performance.If you are changing a large and important dependency, the only way to know
what performance impact it will have is to run test and check.Where to look to get data?If you want to check the impact of your changes there are a number of places to look.- Density and load tests output quite a lot of data either to test logs, or filesinside 'ReportDir' - both of them include API call latencies, and density testsalso include pod e2e startup latency information.- For resource usage you can either use monitoring tools (heapster + Grafana, butnote that at the time of writing, this stops working at around 100 Nodes), orjust plain 'top' on the control plane (which scales as much as you want),- More data is available on the `/metrics` endpoint of all our components(e.g. the one for the API server contains API call latencies),to profile a component create an ssh tunnel to the machine running it,
and run `go tool pprof localhost:<your_tunnel_port>` locally
SummaryTo summarize, when writing code you should:
- understand how Golang manages memory and use it wisely,- not List() from the API server,- run performance tests when making large systemwide changes (e.g. updating big dependencies),
When designing new features or thinking about refactoring you should:- Estimate the number of additional QPS you will be sending to the API server when adding new API calls- Make sure to not add any complex logic on a critical path of any basic workflow
Closing remarksWe know that thinking about the performance impact of changes is hard.This is
exactly why we want you to help us cater for it, by keeping all the knowledge
we have given you here in the back of your mind as you write your code.In return, we will answer all your question and doubts about possible impact
of your changes if you post them either to #sig-scalability Slack channel,
or cc @kubernetes/sig-scalability-pr-reviews in your PR/proposal.raw HTML omitted 1 raw HTML omitted : If you are using List() in tight loops, it is common to do so on a subset of a list (field, label, or namespace).Most Informers have indices on namespaces, but you may end up needing another index if profile shows the need.raw HTML omitted 2 raw HTML omitted :We are working on adding new SLOs and improving the system to meet them.

--------------------------------

Flaky TestsAny test that fails occasionally is "flaky".Since our merges only proceed when
all tests are green, and we have a number of different CI systems running the
tests in various combinations, even a small percentage of flakes results in a
lot of pain for people waiting for their PRs to merge.Therefore, it's important we take flakes seriously.We should avoid flakes by
writing our tests defensively.When flakes are identified, we should prioritize
addressing them, either by fixing them or quarantining them off the critical
path.The project has a "zero-flake" policy.Test jobs must not automatically retry on test failures.This was announced and implemented in effect from 2019:
[No more ginkgo.flakeAttempts=2 for e2e tests as of 2019-12-13](https://groups.google.com/g/kubernetes-dev/c/NNmEGUsJObg/m/dmI2mVc_AAAJ)
(and then confirmed as policy in 2023).For more information about deflaking Kubernetes tests, you can watch:- @liggitt's [presentation from Kubernetes SIG Testing - 2020-08-25](https://www.youtube.com/watch?v=Ewp8LNY_qTg).- @aojea's [presentation from Kubernetes SIG Testing - 2022-11-15](https://www.youtube.com/watch?v=x2Lj-ldR0AA&t=2660s).- @aojea's [Contributor Summit: "The art of deflaking Kubernetes tests"](https://www.youtube.com/watch?v=wyMyQdvg1Qw).Table of Contents- ---- ----- ----Avoiding Flakes
Write tests defensively.Remember that "almost never" happens all the time when
tests are run thousands of times in a CI environment.Tests need to be tolerant
of other tests running concurrently, resource contention, and things taking
longer than expected.There is a balance to be had here.Don't log too much, but don't log too little.Don't assume things will succeed after a fixed delay, but don't wait forever.- Ensure the test functions in parallel with other tests
-Be specific enough to ensure a test isn't thrown off by other tests' assets
- [https://github.com/kubernetes/kubernetes/pull/85849](https://github.com/kubernetes/kubernetes/pull/85849) - eg: ensure resource name and namespace match- [https://github.com/kubernetes/kubernetes/pull/85967](https://github.com/kubernetes/kubernetes/pull/85967) - eg: tolerate errors for non k8s.io APIs- [https://github.com/kubernetes/kubernetes/pull/85619](https://github.com/kubernetes/kubernetes/pull/85619) - eg: tolerate multiple storage plugins- Ensure the test functions in a resource constrained environment
- Only ask for the resources you need
- [https://github.com/kubernetes/kubernetes/pull/84975](https://github.com/kubernetes/kubernetes/pull/84975) - eg: drop memory constraints for test cases that only need cpu- Don't use overly tight deadlines (but not overly broad either, non-[Slow] tests timeout after 5min)
- [https://github.com/kubernetes/kubernetes/pull/85847](https://github.com/kubernetes/kubernetes/pull/85847) - eg: poll for `wait.ForeverTestTimeout` instead of 10s- [https://github.com/kubernetes/kubernetes/pull/84238](https://github.com/kubernetes/kubernetes/pull/84238) - eg: poll for 2min instead of 1min- mark tests as [Slow] if they are unable to pass within 5min- Do not expect actions to happen instantaneously or after a fixed delay- Prefer informers and wait loops- Ensure the test provides sufficient context in logs for forensic debugging
- Explain what the test is doing, eg:
- "creating a foo with invalid configuration"- "patching the foo to have a bar"- Explain what specific check failed, and how, eg:
- "failed to create resource foo in namespace bar because of err"- "expected all items to be deleted, but items foo, bar, and baz remain"- Explain why a polling loop is failing, eg:
- "expected 3 widgets, found 2, will retry"- "expected pod to be in state foo, currently in state bar, will retry"Quarantining Flakes-When quarantining a presubmit test, ensure an issue exists in the currentrelease milestone assigned to the owning SIG.The issue should be labeled`priority/critical-urgent`, `lifecycle/frozen`, and `kind/flake`.The
expectation is for the owning SIG to resolve the flakes and reintroduce the
test, or determine the tested functionality is covered via another method
and delete the test in question.- Quarantine a single test case by adding `[Flaky]` to the test name in question,most CI jobs exclude these tests.This makes the most sense for flakes thatare merge-blocking and taking too long to troubleshoot, or occurring across
multiple jobs.- eg: [https://github.com/kubernetes/kubernetes/pull/83792](https://github.com/kubernetes/kubernetes/pull/83792)
- eg: [https://github.com/kubernetes/kubernetes/pull/86327](https://github.com/kubernetes/kubernetes/pull/86327)- Quarantine an entire set of tests by adding `[Feature:Foo]` to the test(s) in
question.This will require creating jobs that focus specifically on thisfeature.The majority of release-blocking and merge-blocking suites avoid
these jobs unless they're proven to be non-flaky.Hunting FlakesWe offer the following tools to aid in finding or troubleshooting flakes
- [flakes-latest.json](http://storage.googleapis.com/k8s-metrics/flakes-latest.json)- shows the top 10 flakes over the past week for all PR jobs- [go.k8s.io/triage](https://go.k8s.io/triage) - an interactive test failure report providing filtering and drill-down by job name, test name, failure text for failures in the last two weeks
- [https://storage.googleapis.com/k8s-gubernator/triage/index.html?pr=1&job=pull-kubernetes-e2e-gce%24](https://storage.googleapis.com/k8s-gubernator/triage/index.html?pr=1&job=pull-kubernetes-e2e-gce%24) - all failures that happened in the `pull-kubernetes-e2e-gce` job- [https://storage.googleapis.com/k8s-gubernator/triage/index.html?text=timed%20out](https://storage.googleapis.com/k8s-gubernator/triage/index.html?text=timed%20out) - all failures containing the text `timed out`- [https://storage.googleapis.com/k8s-gubernator/triage/index.html?test=%5C%5Bsig-apps%5C%5D](https://storage.googleapis.com/k8s-gubernator/triage/index.html?test=%5C%5Bsig-apps%5C%5D) - all failures that happened in tests with `[sig-apps]` in their name- [testgrid.k8s.io](https://testgrid.k8s.io) - display test results in a grid for visual identififcation of flakes
- [https://testgrid.k8s.io/presubmits-kubernetes-blocking](https://testgrid.k8s.io/presubmits-kubernetes-blocking) - all merge-blocking jobs- [https://testgrid.k8s.io/presubmits-kubernetes-blocking#pull-kubernetes-e2e-gce&exclude-filter-by-regex=BeforeSuite&sort-by-flakiness=](https://testgrid.k8s.io/presubmits-kubernetes-blocking#pull-kubernetes-e2e-gce&exclude-filter-by-regex=BeforeSuite&sort-by-flakiness=) - results for the pull-kubernetes-e2e-gce job sorted by flakiness- [https://testgrid.k8s.io/sig-release-master-informing#gce-cos-master-default&sort-by-flakiness=&width=10](https://testgrid.k8s.io/sig-release-master-informing#gce-cos-master-default&sort-by-flakiness=&width=10) - results for the equivalent CI job- [kind/flake github query](https://github.com/kubernetes/kubernetes/issues?q=is%3Aopen+is%3Aissue+label%3Akind%2Fflake) - open issues or PRs related to flaky jobs or tests for kubernetes/kubernetes
GitHub Issues for Known FlakesBecause flakes may be rare, it's very important that all relevant logs be
discoverable from the issue.- Search for the test name.If you find an open issue and you're 90% sure theflake is exactly the same, add a comment instead of making a new issue.- If you make a new issue, you should title it with the test name, prefixed by"[Flaky test]"- Reference any old issues you found in step one.Also, make a comment in theold issue referencing your new issue, because people monitoring only theiremail do not see the backlinks github adds.Alternatively, tag the person or
people who most recently worked on it.- Paste, in block quotes, the entire log of the individual failing test, notjust the failure line.- Link to spyglass to provide access to all durable artifacts and logs (eg: [https://prow.k8s.io/view/gcs/kubernetes-jenkins/logs/ci-kubernetes-e2e-gci-gce-flaky/1204178407886163970](https://prow.k8s.io/view/gcs/kubernetes-jenkins/logs/ci-kubernetes-e2e-gci-gce-flaky/1204178407886163970))Find flaky tests issues on GitHub under the [kind/flake issue label](https://github.com/kubernetes/kubernetes/issues?q=is%3Aopen+is%3Aissue+label%3Akind%2Fflake).There are significant numbers of flaky tests reported on a regular basis.Fixing
flakes is a quick way to gain expertise and community goodwill.Expectations when a flaky test is assigned to you
Note that we won't randomly assign these issues to you unless you've opted in or
you're part of a group that has opted in.We are more than happy to accept help
from anyone in fixing these, but due to the severity of the problem when merges
are blocked, we need reasonably quick turn-around time on merge-blocking or
release-blocking flakes.Therefore we have the following guidelines:
- If a flaky test is assigned to you, it's more important than anything elseyou're doing unless you can get a special dispensation (in which case it will

be reassigned).If you have too many flaky tests assigned to you, or you
have such a dispensation, then it's still your responsibility to find new
owners (this may just mean giving stuff back to the relevant Team or SIG Lead).- You should make a reasonable effort to reproduce it.Somewhere between anhour and half a day of concentrated effort is "reasonable".It is perfectlyreasonable to ask for help!- If you can reproduce it (or it's obvious from the logs what happened), youshould then be able to fix it, or in the case where someone is clearly morequalified to fix it, reassign it with very clear instructions.- Once you have made a change that you believe fixes a flake, it is conservativeto keep the issue for the flake open and see if it manifests again after thechange is merged.- If you can't reproduce a flake: don't just close it!Every time a flake comesback, at least 2 hours of merge time is wasted.So we need to make monotonicprogress towards narrowing it down every time a flake occurs.If you can't
figure it out from the logs, add log messages that would have help you figure
it out.If you make changes to make a flake more reproducible, please link
your pull request to the flake you're working on.- If a flake has been open, could not be reproduced, and has not manifested in3 months, it is reasonable to close the flake issue with a note saying
why.- If you are unable to deflake the test, consider adding `[Flaky]` to the testname, which will result in the test being quarantined to only those jobs thatexplicitly run flakes (eg: [https://testgrid.k8s.io/google-gce#gci-gce-flaky](https://testgrid.k8s.io/google-gce#gci-gce-flaky))Writing a good flake reportIf you are reporting a flake, it is important to include enough information for
others to reproduce the issue.When filing the issue, use the
[flaking test template](https://github.com/kubernetes/kubernetes/issues/new?labels=kind%2Fflake&template=flaking-test.yaml).In
your issue, answer these following questions:
- Is this flaking in multiple jobs?You can search for the flaking test or errormessages using the[Kubernetes Aggregated Test Results](http://go.k8s.io/triage) tool.- Are there multiple tests in the same package or suite failing with the same apparent error?In addition, be sure to include the following information:- A link to [testgrid](https://testgrid.k8s.io/) history for the flaking test'sjobs, filtered to the relevant tests- The failed test output — this is essential because it makes the issue searchable- A link to the triage query- A link to specific failures- Be sure to tag the relevant SIG, if you know what it is.For a good example of a flaking test issue,[check here](https://github.com/kubernetes/kubernetes/issues/93358).Deflaking unit testsTo get started with deflaking unit tests, you will need to first
reproduce the flaky behavior.Start with a simple attempt to just run
the flaky unit test.For example:```
go test ./pkg/kubelet/config -run TestInvalidPodFiltered```Also make sure that you bypass the `go test` cache by using an uncachable
command line option:```
go test ./pkg/kubelet/config -count=1 -run TestInvalidPodFiltered```If even this is not revealing issues with the flaky test, try running with
[race detection](https://golang.org/doc/articles/race_detector.html) enabled:```
go test ./pkg/kubelet/config -race -count=1 -run TestInvalidPodFiltered```Finally, you can stress test the unit test using the
[stress command](https://godoc.org/golang.org/x/tools/cmd/stress).Install it
with this command:```
# go version 1.17 and later
go install golang.org/x/tools/cmd/stress@latest# go version prior to 1.17
go get golang.org/x/tools/cmd/stress```Then build your test binary:```
go test ./pkg/kubelet/config -race -c```Then run it under stress:```
stress ./config.test -test.run TestInvalidPodFiltered```The stress command runs the test binary repeatedly, reporting when it fails.It
will periodically report how many times it has run and how many failures have
occurred.You should see output like this:```
411 runs so far, 0 failures/var/folders/7f/9xt_73f12xlby0w362rgk0s400kjgb/T/go-stress-20200825T115041-341977266--- FAIL: TestInvalidPodFiltered (0.00s)config_test.go:126: Expected no update in channel, Got types.PodUpdate{Pods:[]*v1.Pod{(*v1.Pod)(0xc00059e400)}, Op:1, Source:"test"}FAILERROR: exit status 1
815 runs so far, 1 failures```Be careful with tests that use the `net/http/httptest` package; they could
exhaust the available ports on your system!Deflaking integration tests
Integration tests run similarly to unit tests, but they almost always expect a
running `etcd` instance.You should already have `etcd` installed if you have
followed the instructions in the [Development Guide](../development.md).Run
`etcd` in another shell window or tab.Compile your integration test using a command like this:```
go test -c -race ./test/integration/endpointslice```And then stress test the flaky test using the `stress` command:```
stress ./endpointslice.test -test.run TestEndpointSliceMirroring```For an example of a failing or flaky integration test,
[read this issue](https://github.com/kubernetes/kubernetes/issues/93496#issuecomment-678375312).Sometimes, but not often, a test will fail due to timeouts caused by
deadlocks.This can be tracked down by stress testing an entire package.The way
to track this down is to stress test individual tests in a package.This process
can take extra effort.Try following these steps:
- Run each test in the package individually to figure out the average runtime.- Stress each test individually, bounding the timeout to 100 times the average run time.- Isolate the particular test that is deadlocking.- Add debug output to figure out what is causing the deadlock.Hopefully this can help narrow down exactly where the deadlock is occurring,revealing a simple fix!Deflaking e2e tests
A flaky [end-to-end (e2e) test](e2e-tests.md) offers its own set of
challenges.In particular, these tests are difficult because they test the
entire Kubernetes system.This can be both good and bad.It can be good because
we want the entire system to work when testing, but an e2e test can also fail
because of something completely unrelated, such as failing infrastructure or
misconfigured volumes.Be aware that you can't simply look at the title of an
e2e test to understand exactly what is being tested.If possible, look for unit
and integration tests related to the problem you are trying to solve.Gathering informationThe first step in deflaking an e2e test is to gather information.We capture a
lot of information from e2e test runs, and you can use these artifacts to gather
information as to why a test is failing.Use the [Prow Status](https://prow.k8s.io/) tool to collect information on
specific test jobs.Drill down into a job and use the Artifacts tab to
collect information.For example, with
[this particular test job](https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/directory/pull-kubernetes-e2e-gce/1296558932902285312),
we can collect the following:
- `build-log.txt`- In the control plane directory: `artifacts/e2e-171671cb3f-674b9-master/`
- `kube-apiserver-audit.log` (and rotated files)- `kube-apiserver.log`- `kube-controller-manager.log`- `kube-scheduler.log`- And more!The `artifacts/` directory will contain much more information.From inside thedirectories for each node:
- `e2e-171671cb3f-674b9-minion-group-drkr`- `e2e-171671cb3f-674b9-minion-group-lr2z`- `e2e-171671cb3f-674b9-minion-group-qkkz`Look for these files:- `kubelet.log`- `docker.log`- `kube-proxy.log`- And so forth.Filtering and correlating informationOnce you have gathered your information, the next step is to filter and
correlate the information.This can require some familiarity with the issue you are tracking
down, but look first at the relevant components, such as the test log, logs for the API
server, controller manager, and `kubelet`.Filter the logs to find events that happened around the time of the failure and
events that occurred in related namespaces and objects.The goal is to collate log entries from all of these different files so you can
get a picture of what was happening in the distributed system.This will help
you figure out exactly where the e2e test is failing.One tool that may help you
with this is [k8s-e2e-log-combiner](https://github.com/brianpursley/k8s-e2e-log-combiner)Kubernetes has a lot of nested systems, so sometimes log entries can refer to
events happening three levels deep.This means that line numbers in logs might
not refer to where problems and messages originate.Do not make any assumptions
about where messages are initiated!If you have trouble finding relevant logging information or events, don't be
afraid to add debugging output to the test.For an example of this approach,
[see this issue](https://github.com/kubernetes/kubernetes/pull/88297#issuecomment-588607417).What to look for
One of the first things to look for is if the test is assuming that something is
running synchronously when it actually runs asynchronously.For example, if the
test is kicking off a goroutine, you might need to add delays to simulate slow
operations and reproduce issues.Examples of the types of changes you could make to try to force a failure:
- `time.Sleep(time.Second)` at the top of a goroutine- `time.Sleep(time.Second)` at the beginning of a watch event handler- `time.Sleep(time.Second)` at the end of a watch event handler- `time.Sleep(time.Second)` at the beginning of a sync loop worker- `time.Sleep(time.Second)` at the end of a sync loop worker
Sometimes,[such as in this example](https://github.com/kubernetes/kubernetes/issues/93496#issuecomment-675631856),
a test might be causing a race condition with the system it is trying to
test.Investigate if the test is conflicting with an asynchronous background
process.To verify the issue, simulate the test losing the race by putting a
`time.Sleep(time.Second)` between test steps.If a test is assuming that an operation will happen quickly, it might not be
taking into account the configuration of a CI environment.A CI environment will
generally be more resource-constrained and will run multiple tests in
parallel.If it runs in less than a second locally, it could take a few seconds
in a CI environment.Unless your test is specifically testing performance/timing, don't set tight
timing tolerances.Use `wait.ForeverTestTimeout`, which is a reasonable stand-in
for operations that should not take very long.This is a better approach than
polling for 1 to 10 seconds.Is the test incorrectly assuming deterministic output?Remember that map iteration in go is
non-deterministic.If there is a list being compiled or a set of steps are being
performed by iterating over a map, they will not be completed in a predictable
order.Make sure the test is able to tolerate any order in a map.Be aware that if a test is mixing random allocation with static allocation, that
there will be intermittent conflicts.Finally, if you are using a fake client with a watcher, it can relist/rewatch at any point.It is better to look for specific actions in the fake client rather than
asserting exact content of the full set.

--------------------------------

Kubernetes Community Code of Conduct
Kubernetes follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting
the [Kubernetes Code of Conduct Committee](./committee-code-of-conduct) via [conduct@kubernetes.io](mailto:conduct@kubernetes.io).

--------------------------------

title: "Community Expectations"
weight: 17
description: |
Expectations of conduct and code review that govern all members of the
community.Kubernetes is a community project.Consequently, it is wholly dependent on its community to provide a productive, friendly and collaborative environment.The first and foremost goal of the Kubernetes community is to develop orchestration
technology that radically simplifies the process of creating reliable
distributed systems.However a second, equally important goal is the creation
of a community that fosters easy, agile development of such orchestration
systems.We therefore describe the expectations for members of the Kubernetes community.This document is intended to be a living one that evolves as the community evolves via the same PR and code review process that shapes the rest of the project.It currently covers the expectations of conduct that govern all members of the community as well as the expectations around code review that govern all active contributors to Kubernetes.Code review
As a community we believe in the value of code review for all contributions.Code review increases both the quality and readability of our codebase, which
in turn produces high quality software.See the [pull request documentation](/contributors/guide/pull-requests.md) for more information on code review.Consequently, as a community we expect that all active participants in the
community will also be active reviewers.The [community membership](/community-membership.md) outlines the responsibilities
of the different contributor roles.Expect reviewers to request that you avoid [common go style
mistakes](https://github.com/golang/go/wiki/CodeReviewComments) in your PRs.Expectations of reviewers: Review comments
Because reviewers are often the first points of contact between new members of
the community and can significantly impact the first impression of the
Kubernetes community, reviewers are especially important in shaping the
Kubernetes community.Reviewers are highly encouraged to not only abide by the [code of conduct](/governance.md#code-of-conduct) but are strongly encouraged to go above and beyond the code of conduct to promote a collaborative, respectful Kubernetes community.Expectations of reviewers: Review latency
Reviewers are expected to respond in a timely fashion to PRs that are assigned
to them.Reviewers are expected to respond to an active PRs with reasonable latency, and if reviewers fail to respond, those PRs may be assigned to other reviewers.If reviewers are unavailable to review for some time, they are expected to set their [user status](https://help.github.com/en/articles/personalizing-your-profile#setting-a-status) to "busy" so that the bot will not request reviews from them on new PRs automatically.If they are unavailable for a longer period of time, they are expected to remove themselves from the OWNERS file and potentially nominate someone else.Active PRs are considered those which have a proper CLA (`cla:yes`) label
and do not need rebase to be merged.PRs that do not have a proper CLA, or require a rebase are not considered active PRs.Thanks
Many thanks in advance to everyone who contributes their time and effort to
making Kubernetes both a successful system as well as a successful community.The strength of our software shines in the strengths of each individual
community member.Thanks!

--------------------------------

title: "Coding Conventions"
weight: 8
description: |
This document outlines a collection of guidelines, style suggestions, and tips
for writing code in the different programming languages used throughout the
Kubernetes project.Code conventions- Bash
- [Shell Style Guide](https://google.github.io/styleguide/shellguide.html)- Ensure that build, release, test, and cluster-management scripts run on macOS- Go
- [Go Code Review Comments](https://go.dev/wiki/CodeReviewComments)- [Effective Go](https://golang.org/doc/effective_go.html)- Know and avoid [Go landmines](https://gist.github.com/lavalamp/4bd23295a9f32706a48f)- Comment your code.- [Go's commenting conventions](https://go.dev/doc/comment)- If reviewers ask questions about why the code is the way it is, that's a sign that comments might be helpful.- Command-line flags should use dashes, not underscores- Naming
- Please consider package name when selecting an interface name, and avoid redundancy.For example, `storage.Interface` is better than `storage.StorageInterface`.- Do not use uppercase characters, underscores, or dashes in package names.- Please consider parent directory name when choosing a package name.For example, `pkg/controllers/autoscaler/foo.go` should say `package autoscaler` not `package autoscalercontroller`.-Unless there's a good reason, the `package foo` line should match the name of the directory in which the `.go` file exists.- Importers can use a different name if they need to disambiguate.- Locks should be called `lock` and should never be embedded (always `lock sync.Mutex`).When multiple locks are present, give each lock a distinct name following Go conventions: `stateLock`, `mapLock` etc.- [API changes](/contributors/devel/sig-architecture/api_changes.md)- [API conventions](/contributors/devel/sig-architecture/api-conventions.md)- [Kubectl conventions](/contributors/devel/sig-cli/kubectl-conventions.md)- [Logging conventions](/contributors/devel/sig-instrumentation/logging.md)Testing conventions-All new packages and most new significant functionality must come with unit tests.- Table-driven tests are preferred for testing multiple scenarios/inputs.For an example, see [TestNamespaceAuthorization](https://github.com/kubernetes/kubernetes/blob/4b8e819355d791d96b7e9d9efe4cbafae2311c88/test/integration/auth/auth_test.go#L1201).- Significant features should come with integration (test/integration) and/or [end-to-end (test/e2e) tests](/contributors/devel/sig-testing/e2e-tests.md).- Including new `kubectl` commands and major features of existing commands.- Unit tests must pass on macOS and Windows platforms - if you use Linux specific features, your test case must either be skipped on windows or compiled out (skipped is better when running Linux specific commands, compiled out is required when your code does not compile on Windows).- Avoid relying on Docker Hub.Use the [Google Cloud Artifact Registry](https://cloud.google.com/artifact-registry/) instead.- Do not expect an asynchronous thing to happen immediately---do not wait for one second and expect a pod to be running.Wait and retry instead.- See the [testing guide](/contributors/devel/sig-testing/testing.md) for additional testing advice.Directory and file conventions- Avoid package sprawl.Find an appropriate subdirectory for new packages.[See issue #4851](http://issues.k8s.io/4851) for discussion.- Libraries with no appropriate home belong in new package subdirectories of `pkg/util`.- Avoid general utility packages.Packages called "util" are suspect.Instead, derive a name that describes your desired function.For example, the utility functions dealing with waiting for operations are in the `wait` package and include functionality like `Poll`.The full name is `wait.Poll`.- All filenames should be lowercase.- Go source files and directories use underscores, not dashes.- Package directories should generally avoid using separators as much as possible.When package names are multiple words, they usually should be in nested subdirectories.- Document directories and filenames should use dashes rather than underscores.- Examples should also illustrate [best practices for configuration and using the system](https://kubernetes.io/docs/concepts/configuration/overview/).- Follow these conventions for third-party code:
- Go code for normal third-party dependencies is managed using [go modules](https://go.dev/wiki/Modules) and is described in the kubernetes [vendoring guide](/contributors/devel/sig-architecture/vendor.md).- Other third-party code belongs in `third_party`.- forked third party Go code goes in `third_party/forked`.- forked golang stdlib code goes in `third_party/forked/golang`.- Third-party code must include licenses.This includes modified third-party code and excerpts, as well.

--------------------------------

Conformance Testing in KubernetesThe Kubernetes Conformance test suite is a subset of e2e tests that SIG
Architecture has approved to define the core set of interoperable features that
all conformant Kubernetes clusters must support.The tests verify that the
expected behavior works as a user might encounter it in the wild.The process to add new conformance tests is intended to decouple the development
of useful tests from their promotion to conformance:- Contributors write and submit e2e tests, to be approved by owning SIGs- Tests are proven to meet the  by reviewand by accumulation of data on flakiness and reliability-A follow up PR is submitted toNB: This should be viewed as a living document in a few key areas:-The desired set of conformant behaviors is not adequately expressed by thecurrent set of e2e tests, as such this document is currently intended to
guide us in the addition of new e2e tests than can fill this gap-This document currently focuses solely on the requirements for GA,non-optional features or APIs.The list of requirements will be refined over
time to the point where it as concrete and complete as possible.-There are currently conformance tests that violate some of the requirements(e.g., require privileged access), we will be categorizing these tests and
deciding what to do once we have a better understanding of the situation-Once we resolve the above issues, we plan on identifying the appropriate areasto relax requirements to allow for the concept of conformance Profiles that
cover optional or additional behaviors
Conformance Test Requirements
Conformance tests currently test only GA, non-optional features or APIs.More
specifically, a test is eligible for promotion to conformance if:- it tests only GA, non-optional features or APIs (e.g., no alpha or betaendpoints, no feature flags required, no deprecated features)- it does not require direct access to kubelet's API to pass (nor does itrequire indirect access via the API server node proxy endpoint); it MAY
use the kubelet API for debugging purposes upon failure- it works for all providers (e.g., no `SkipIfProviderIs`/`SkipUnlessProviderIs`calls)- it limits itself to capabilities exposed via APIs (e.g., does not requireroot on nodes, access to raw network interfaces) and does not require write
access to system namespaces (like kube-system)- it works without access to the public internet (short of whatever is required

to pre-pull images for conformance tests)- it works without non-standard filesystem permissions granted to pods- it does not rely on any binaries that would not be required for the linuxkernel or kubelet to run (e.g., can't rely on git)- where possible, it does not depend on outputs that change based on OS (nslookup, ping, chmod, ls)- any container images used within the test support all architectures for whichkubernetes releases are built- it passes against the appropriate versions of kubernetes as spelled out inthe- it is stable and runs consistently (e.g., no flakes), and has been runningfor at least two weeks- new conformance tests or updates to conformance tests for additional scenariosare only allowed before code freeze dates set by the release team to allow
enough soak time of the changes and gives folks a chance to kick the tires
either in the community CI or their own infrastructure to make sure the tests
are robust- it has a name that is a literal stringExamples of features which are not currently eligible for conformance tests:- node/platform-reliant features, eg: multiple disk mounts, GPUs, high density,etc.- optional features, eg: policy enforcement- cloud-provider-specific features, eg: GCE monitoring, S3 Bucketing, etc.- anything that requires a non-default admission plugin- features that are pending deprecation, eg: componentstatus- any endpoints that are operational tools, rather than application-oriented, should not be part of conformance, eg: apiserver logs.Conformance tests are intended to be stable and backwards compatible according to
the standard API deprecation policies.Therefore any test that relies on specific
output that is not subject to the deprecation policy cannot be promoted to conformance.Examples of tests which are not eligible to conformance:- anything that checks specific Events are generated, as we make no guaranteesabout the contents of events, nor their delivery-If a test depends on events it is recommended to change the test touse an informer pattern and watch specific resource changes instead.-An exception to this is tests that generates synthetic events themselvesto verify that the API is capable of being exercised- anything that checks optional Condition fields, such as Reason or Message, asthese may change over time (however it is reasonable to verify these fields
exist or are non-empty)-If the test is checking for specific conditions or reasons, it is consideredoverly specific and it is recommended to simply look for pass/failure criteria
where possible, and output the condition/reason for debugging purposes only.Examples of areas we may want to relax these requirements once we have a
sufficient corpus of tests that define out of the box functionality in all
reasonable production worthy environments:- tests may need to create or set objects or fields that are alpha or beta thatbypass policies that are not yet GA, but which may reasonably be enabled on a
conformant cluster (e.g., pod security policy, non-GA scheduler annotations)Windows & Linux Considerations
Windows node support is an optional but stable feature as of Kubernetes 1.14.This means that it is
not required by conformance testing.Nonetheless, it's important to verify that the behavior of Windows nodes match the behaviors tested in the conformance suite as much as possible.To that end, a
large number of conformance tests are already included in Windows testing.You can see what tests are already passing by looking at TestGrid for results of Windows tests running on
[Azure](https://testgrid.k8s.io/sig-windows#aks-engine-azure-windows-master) and
[GCE](https://testgrid.k8s.io/sig-windows#gce-windows-master)).Tests may be
scheduled for any PR with the bot command `/test pull-kubernetes-e2e-aks-engine-azure-windows`.Generally speaking, the goals are to:-Make sure tests that are already passing remain passing.If new OS-specificfunctionality is added, it should be in a new test.- Ensure that new tests covering Linux-specific functionality are tagged with `[LinuxOnly]`(see: [Kinds of Tests](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md#kinds-of-tests)).-Give future reviewers a reference to an active issue or documentation clarifying why a testcannot run on Windows.The tests that are running today:-Rely only on container images that already have a multi-architecture manifestincluding Windows versions, or have been ported by SIG-Windows
(see [kubernetes-sigs/windows-testing/images](https://github.com/kubernetes-sigs/windows-testing/tree/master/images)).-Do not depend on any functionality that is different or not available on Windows.The full listis available in the Windows Kubernetes docs under [api](https://kubernetes.io/docs/setup/windows/intro-windows-in-kubernetes/#api).A brief summary is included here as a starting point.If the docs are insufficient
or there are more questions, please contact #SIG-Windows on Slack to get another
reviewer.Some of the most common differences to watch for are:- Container Images
- Watch out for image names hardcoded into test cases or YAML files.These are often Linux-only.Instead, they should be adding to or using existing images from [tests/utils/image/manifest.go](https://github.com/kubernetes/kubernetes/blob/master/test/utils/image/manifest.go).This allows the container registry to be configured to one containing Windows images, and also supports testing on clusters with no internet access using a private registry.Multi-arch images supporting Windows are also acceptable.- Container Options & Actions
- Pod SecurityContext is set.Most of the fields are Linux specific, and any field set in the Pod's SecurityContext will result in the Pod not being able to spawn or not work as intended.- Privileged containers are not supported.Containers are always isolated.- Windows uses job objects or Hyper-V for pod isolation and resource controls, not CGroups.These are managedimplicitly by Docker or ContainerD, not by the kubelet.Do not check properties of CGroups as pass/fail criteria.- Running Linux-specific commands are not likely to work.Some commands may work using a Windows [busybox](https://github.com/kubernetes-sigs/windows-testing/tree/master/images/busybox) container.The paths of these binaries may differ from Linux, so it's best to rely on `PATH` rather than using Linux-specific paths such as `/usr/bin/nc`.As an alternative, you can use commands in the cross-platform [agnhost](https://github.com/kubernetes/kubernetes/tree/master/test/images/agnhost) image which is designed to return the same results regardless of OS.- Storage
- File permissions cannot be set on volumes.Tests using `DefaultMode` or `Mode` and checking the resulting permissions will fail.- Only NTFS volumes are supported.Volume mounts specifying other filesystems (ext4, xfs) or mediums (memory) are not supported- Bidirectional mount propagation, specifically propagating mounts from a container to host, does not work.- Networking
- Pods set `HostNetwork=true`.For Windows, this can only be enabled for Windows Privileged Containers.In other cases, the Pod will not start.- Network and DNS settings must be passed through CNI.Windows does not use `/etc/resolv.conf`, so tests should not rely on reading that file to check DNS settings.-If you want to check network settings such as dns search lists, please use [agnhost](https://github.com/kubernetes/kubernetes/tree/master/test/images/agnhost) to output needed data from the container.- Windows treats all DNS lookups with a `.` to be FQDN, not PQDN.For example `kubernetes` will resolve as a PQDN,but `kubernetes.default` will be resolved as a FQDN and fail.- ICMP only works between pods on the same network, and are not routable to external networks.TCP/UDP are routable.- Windows containers do not support IPv6.The existing tests which are affected by one of those criteria are tagged with `[LinuxOnly]`
(see: [Kinds of Tests](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md#kinds-of-tests).Conformance Test Version Skew PolicyAs each new release of Kubernetes provides new functionality, the subset of
tests necessary to demonstrate conformance grows with each release.Conformance
is thus considered versioned, with the same backwards compatibility guarantees
as laid out in the [kubernetes versioning policy](https://git.k8s.io/design-proposals-archive/release/versioning.md#supported-releases-and-component-skew)To quote:
For example, a v1.3 master should work with v1.1, v1.2, and v1.3 nodes, and
should work with v1.2, v1.3, and v1.4 clients.Conformance tests for a given version should be run off of the release branch
that corresponds to that version.Thus `v1.2` conformance tests would be run
from the head of the `release-1.2` branch.For example, suppose we're in the midst of developing kubernetes v1.3.Clusters
with the following versions must pass conformance tests built from the
following branches:
cluster version
master
release-1.3
release-1.2
release-1.1
v1.3.0-alpha
yes
yes
yes
no
v1.2.x
no
no
yes
yes
v1.1.x
no
no
no
yes
Running Conformance Tests
Conformance tests are designed to be run even when there is no cloud provider
configured.Conformance tests must be able to be run against clusters that have
not been created with `test-infra/kubetest`, just provide a kubeconfig with the
appropriate endpoint and credentials.Running Conformance Tests With [KinD](https://kind.sigs.k8s.io/)- Work in your kubernetes branch, preferably in the default go src location: `$GOPATH/src/k8s.io/kubernetes`- Create your kind node image:```
kind build node-image```- Create your kind e2e cluster config kind-config.yaml:```# necessary for conformance
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  ipFamily: ipv4
nodes:
# the control plane node
- role: control-plane- role: worker
- role: worker```- Set your KUBECONFIG env variable (KIND generates the conf based on it):```

export KUBECONFIG="${HOME}/.kube/kind-test-config"```- Use the previous config to create your cluster:```kind create cluster --config kind-config.yaml --image kindest/node:latest -v4```- Create your e2e Kubernetes binary (from your Kubernetes src code):```make WHAT="test/e2e/e2e.test"```- Execute your tests:```./_output/bin/e2e.test -context kind-kind -ginkgo.focus="\[sig-network\].*Conformance" -num-nodes 2```Running Conformance Tests With kubetestThese commands are intended to be run within a kubernetes directory, either
cloned from source, or extracted from release artifacts such as
`kubernetes.tar.gz`.They assume you have a valid golang installation.```
# ensure kubetest is installed
go get -u k8s.io/test-infra/kubetest# build test binaries, ginkgo, and kubectl first:
make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"# setup for conformance tests
export KUBECONFIG=/path/to/kubeconfig
export KUBERNETES_CONFORMANCE_TEST=y# Option A: run all conformance tests serially
kubetest --provider=skeleton --test --test_args="--ginkgo.focus=\[Conformance\]"# Option B: run parallel conformance tests first, then serial conformance tests serially
kubetest --ginkgo-parallel --provider=skeleton --test --test_args="--ginkgo.focus=\[Conformance\]--ginkgo.skip=\[Serial\]"
kubetest --provider=skeleton --test --test_args="--ginkgo.focus=\[Serial\].*\[Conformance\]"```Kubernetes Conformance Document
For each Kubernetes release, a Conformance Document will be generated that lists
all of the tests that comprise the conformance test suite, along with the formal
specification of each test.For an example, see the [v1.9 conformance doc](https://github.com/cncf/k8s-conformance/blob/master/docs/KubeConformance-1.9.md).This document will help people understand what features are being tested without
having to look through the testcase's code directly.Conformance test review boardThe conformance subproject uses the [Conformance Test Review board](https://github.com/orgs/kubernetes/projects/9) to track
progress of PRs through to approval.The following types of PRs must go through
this approval process:
- promotion of tests to conformance- demotion of tests from conformance- changes to existing conformance tests- changes to the conformance criteria or process- changes to the conformance infrastructure code
New PRs should enter in the To Triage column, and [Conformance test reviewers](https://github.com/kubernetes/kubernetes/blob/master/test/conformance/testdata/OWNERS) will pick it up from there and move itthrough the process.New end-to-end tests that are intended to be promoted to
conformance tests in the future may be added to this board, but they will not
move all the way to the Needs Approval column, as that is intended only for the
types of PRs described above.Promoting Tests to ConformanceTo promote a test to the conformance test suite, open a PR as follows:
- is titled "Promote xxx e2e test to Conformance"- includes information and metadata in the description as follows:
- "/area conformance" on a newline- "@kubernetes/sig-architecture-pr-reviews @kubernetes/sig-foo-pr-reviews
@kubernetes/cncf-conformance-wg" on a new line, where sig-foo is whicheversig owns this test- any necessary information in the description to verify that the test meets, such as links to reports or dashboards thatprove lack of flakiness- contains no other modifications to test source code other than the following:- modifies the testcase to use the `framework.ConformanceIt()` function rather
than the `framework.It()` function- adds a comment immediately before the `ConformanceIt()` call that includesall of the required- run `hack/update-conformance-yaml.sh` which adds the test name to the [conformance.yaml](https://github.com/kubernetes/kubernetes/blob/master/test/conformance/testdata/conformance.yaml) fileMore information [here](https://github.com/kubernetes/kubernetes/blob/master/test/conformance/README.md)- add the PR to SIG Architecture's [Conformance Test Review board](https://github.com/orgs/kubernetes/projects/9) in the ToTriage columnOnce you create the PR, please schedule the additional Windows tests with
`/test pull-kubernetes-e2e-aks-engine-azure-windows` to see if any existing tests
that pass on Windows are broken by the change.Conformance Test Comment MetadataEach conformance test must include the following piece of metadata
within its associated comment:
- `Release`: indicates the Kubernetes release that the test was added to theconformance test suite.If the test was modified in subsequent releasesthen those releases should be included as well (comma separated)- `Testname`: a human readable short name of the test- `Description`: a detailed description of the test.This field must describe
the required behaviour of the Kubernetes components being tested using

[RFC2119](https://tools.ietf.org/html/rfc2119) keywords.This field
is meant to be a "specification" of the tested Kubernetes features, as
such, it must be detailed enough so that readers can fully understand
the aspects of Kubernetes that are being tested without having to read
the test's code directly.Additionally, this test should provide a clear
distinction between the parts of the test that are there for the purpose
of validating Kubernetes rather than simply infrastructure logic that
is necessary to setup, or clean up, the test.Sample Conformance TestThe following snippet of code shows a sample conformance test's metadata:```
/*
  Release: v1.9
  Testname: Kubelet: log output
  Description: By default the stdout and stderr from the process being
  executed in a pod MUST be sent to the pod's logs.*/framework.ConformanceIt("it should print the output to logs", func() {...

})```The corresponding portion of the Kubernetes Conformance Document for this test
would then look like this:
[Kubelet: log output](https://github.com/kubernetes/kubernetes/tree/release-1.9/test/e2e_node/kubelet_test.go#L47)Release : v1.9By default the stdout and stderr from the process being executed in a pod MUST be sent to the pod's logs.Reporting Conformance Test Results
Conformance test results, by provider and releases, can be viewed in the
[testgrid conformance dashboard](https://testgrid.k8s.io/conformance-all).If you wish to contribute test results
for your provider, please see the [testgrid conformance README](https://github.com/kubernetes/test-infra/blob/master/testgrid/conformance/README.md)Demoting Conformance TestsOccasionally it may be necessary to remove a test that was added to conformance.Reasons may include but are not limited to:
-The test does not actually  to be a conformance test- The test is discovered to be unreliable and/or includes functionality not intended to be part of conformance- The project deprecates or removes a featureThese criteria apply to conformance added in a current release and should follow the same process involved in promoting a test.We may occasionally discover that a conformance test must be demoted in an already released version.This is generally a safe operation for the consumers of conformance - no existing distribution will become less conformant as a result of demoting a test.We should apply the same heightened bar for backporting conformance demotions as we would for backporting any code change:
- Ensuring agreement among the responsible SIG(s) that the criteria for demotion are met- Agreement from conformance approvers that backporting the demotion is consistent with backwards compatibility for the project- Verifying the demotion does not result in a loss of function in a previous releaseThe process for demoting a conformance test in a previous release is:- Demote the test in the current release following the current release process- Open the appropriate backport PR following the backport process- Approval of the backport by the conformance approvers and the release lead- Update of necessary conformance test tooling is the responsibility of their owners, such as for CNCF automation that approves test results
A backported demotion does not imply previously conformant distributions must recertify - those distributions are no less conformant than they were previously.As Kubernetes is a continuously evolving project new patches to previously released versions may tweak behavior in keeping with our commitment to API stability, so we expect true conformance changes in previously released versions to be rare.

--------------------------------

Testing guide
Table of Contents- - ---------This assumes you already read the [development guide](../development.md) to
install go and configure your git client.All command examples are
relative to the `kubernetes` root directory.Before sending pull requests you should at least make sure your changes have
passed both unit and integration tests.Kubernetes only merges pull requests when unit, integration, and e2e tests are
passing, so it is often a good idea to make sure the e2e tests work as well.Unit tests-Unit tests should be fully hermetic
- Only access resources in the test binary.- All packages and any significant files require unit tests.- The preferred method of testing multiple scenarios or input is[table driven testing](https://github.com/golang/go/wiki/TableDrivenTests)- Example: [TestNamespaceAuthorization](https://git.k8s.io/kubernetes/test/integration/auth/auth_test.go)- Unit tests must pass on macOS and Windows platforms.- Tests using linux-specific features must be skipped or compiled out.- Skipped is better, compiled out is required when it won't compile.- Concurrent unit test runs must pass.- See [coding conventions](../../guide/coding-conventions.md).Run all unit tests`make test` is the entrypoint for running the unit tests that ensures that
`GOPATH` is set up correctly.```
cd kubernetes
make test  # Run all unit tests.```If any unit test fails with a timeout panic (see [#1594](https://github.com/kubernetes/community/issues/1594)) on the testing package, you can increase the `KUBE_TIMEOUT` value as shown below.```
make test KUBE_TIMEOUT="-timeout=300s"```Set go flags during unit testsYou can set [go flags](https://golang.org/cmd/go/) by setting the
`GOFLAGS` environment variable.Run unit tests from certain packages
`make test` accepts packages as arguments; the `k8s.io/kubernetes` prefix is
added automatically to these:```
make test WHAT=./pkg/kubelet                # run tests for pkg/kubelet```To run tests for a package and all of its subpackages, you need to append `...`
to the package path:```
make test WHAT=./pkg/api/...  # run tests for pkg/api and all its subpackages```To run multiple targets you need quotes:```
make test WHAT="./pkg/kubelet ./pkg/scheduler"  # run tests for pkg/kubelet and pkg/scheduler```In a shell, it's often handy to use brace expansion:```
make test WHAT=./pkg/{kubelet,scheduler}# run tests for pkg/kubelet and pkg/scheduler```Run specific unit test cases in a package
You can set the test args using the `KUBE_TEST_ARGS` environment variable.You can use this to pass the `-run` argument to `go test`, which accepts a
regular expression for the name of the test that should be run.```
# Runs TestValidatePod in pkg/api/validation with the verbose flag set
make test WHAT=./pkg/apis/core/validation GOFLAGS="-v" KUBE_TEST_ARGS='-run ^TestValidatePod$'# Runs tests that match the regex ValidatePod|ValidateConfigMap in pkg/api/validation
make test WHAT=./pkg/apis/core/validation GOFLAGS="-v" KUBE_TEST_ARGS="-run ValidatePod\|ValidateConfigMap$"```For other supported test flags, see the [golang
documentation](https://golang.org/cmd/go/#hdr-Testing_flags).Stress running unit tests
Running the same tests repeatedly is one way to root out flakes.You can do this efficiently.```
# Have 2 workers run all tests 5 times each (10 total iterations).make test PARALLEL=2 ITERATION=5```For more advanced ideas please see [flaky-tests.md](flaky-tests.md).Unit test coverage
Currently, collecting coverage is only supported for the Go unit tests.To run all unit tests and generate an HTML coverage report, run the following:```
make test KUBE_COVER=y```At the end of the run, an HTML report will be generated with the path
printed to stdout.To run tests and collect coverage in only one package, pass its relative path
under the `kubernetes` directory as an argument, for example:```
make test WHAT=./pkg/kubectl KUBE_COVER=y```Multiple arguments can be passed, in which case the coverage results will be
combined for all tests run.Benchmark unit testsTo run benchmark tests, you'll typically use something like:```
make test WHAT=./pkg/scheduler/internal/cache KUBE_TEST_ARGS='-benchmem -run=XXX -bench=BenchmarkExpirePods'```This will do the following:
- `-run=XXX` is a regular expression filter on the name of test cases to run.Go will execute both the tests matching the `-bench` regex and the `-run`regex.Since we only want to execute benchmark tests, we set the `-run` regex
to XXX, which will not match any tests.- `-bench=Benchmark` will run test methods with Benchmark in the name- See `grep -nr Benchmark .` for examples
- `-benchmem` enables memory allocation stats
See `go help test` and `go help testflag` for additional info.Run unit tests using go testYou can optionally use `go test` to run unit tests.For example:```
cd kubernetes# Run unit tests in the kubelet package
go test ./pkg/kubelet# Run all unit tests found within ./pkg/api and its subdirectories
go test ./pkg/api/...# Run a specific unit test within a package
go test ./pkg/apis/core/validation -v -run ^TestValidatePods$# Run benchmark tests
go test ./pkg/scheduler/internal/cache -benchmem -run=XXX -bench=Benchmark```When running tests contained within a staging module,
you first need to change to the staging module's subdirectory and then run the tests, like this:```
cd kubernetes/staging/src/k8s.io/kubectl# Run all unit tests within the kubectl staging module
go test ./...```Integration tests
Please refer to [Integration Testing in Kubernetes](integration-tests.md).End-to-End tests
Please refer to [End-to-End Testing in Kubernetes](e2e-tests.md).Testing Strategy
Either if you are a feature owner or subsystem or area maintaner, you have to define a
testing strategy for your area, please refer to [Defining a Robust Testing Strategy in Kubernetes](testing-strategy.md).Running your contribution through Kubernetes CI
Once you open a PR, [prow](https://prow.k8s.io) runs pre-submit tests in CI.You can find more about `prow` in [kubernetes/test-infra](https://sigs.k8s.io/prow/pkg) and in [this blog post](https://kubernetes.io/blog/2018/08/29/the-machines-can-do-the-work-a-story-of-kubernetes-testing-ci-and-automating-the-contributor-experience/#enter-prow) on automation involved in testing PRs to Kubernetes.If you are not a [Kubernetes org member](https://github.com/kubernetes/community/blob/master/community-membership.md#member), another org member will need to run [/ok-to-test](https://prow.k8s.io/command-help#ok_to_test) on your PR.Find out more about [other commands](https://prow.k8s.io/command-help) you can use to interact with prow through GitHub comments.Troubleshooting a failure
Click on `Details` to look at artifacts produced by the test and the cluster under test, to help you debug the failure.These artifacts include:
- test results- metadata on the test run (including versions of binaries used, test duration)- output from tests that have failed- build log showing the full test run- logs from the cluster under test (k8s components such as kubelet and apiserver, possibly other logs such as etcd and kernel)- junit xml files- test coverage filesIf the failure seems unrelated to the change you're submitting:-Is it a flake?- Check if a GitHub issue is already open for that flake
-If not, open a new one (like [this example](https://github.com/kubernetes/kubernetes/issues/71430)) and [label it kind/flake](https://prow.k8s.io/command-help#kind)- If yes, any help troubleshooting and resolving it is very appreciated.Look at  for how to do it.- Run [/retest](https://prow.k8s.io/command-help#retest) on your PR to re-trigger the tests- Is it a failure that shouldn't be happening (in other words; is the test expectation now wrong)?- Get in touch with the SIG that your PR is labeled after
- preferably as a comment on your PR, by tagging the [GitHub team](https://github.com/orgs/kubernetes/teams) (for example a [reviewers team for the SIG](https://github.com/orgs/kubernetes/teams?utf8=%E2%9C%93&query=review))- write your reasoning as to why you think the test is now outdated and should be changed- if you don't get a response in 24 hours, engage with the SIG on their channel on the [Kubernetes slack](http://slack.k8s.io/) and/or attend one of the [SIG meetings](https://github.com/kubernetes/community/blob/master/sig-list.md) to ask for input.Helping with known flakesFor known flakes (i.e. with open GitHub issues against them), the community deeply values help in troubleshooting and resolving them.Starting points could be:
- add logs from the failed run you experienced, and any other context to the existing discussion- if you spot a pattern or identify a root cause, notify or collaborate with the SIG that owns that area to resolve them
Escalating failures to a SIG- Figure out corresponding SIG from test name/description- Mention the SIG's GitHub handle on the issue, optionally `cc` the SIG's chair(s) (locate them under kubernetes/community/sig-<name>)- Optionally (or if you haven't heard back on the issue after 24h) reach out to the SIG on slack
Testgrid

[testgrid](https://testgrid.k8s.io/) is a visualization of the Kubernetes CI status.It is useful as a way to:
- see the run history of a test you are debugging (access it starting from a gubernator report for that test)- get an overview of the project's general health- You can learn more about Testgrid from the [Kubecon NA San Diego Contributor Summit](https://youtu.be/8xS6mmGhbIQ)
`testgrid` is organised in:- tests- collection of assertions in a test file- each test is typically owned by a single SIG- each test is represented as a row on the grid- jobs
- collection of tests- each job is typically owned by a single SIG- each job is represented as a tab- dashboards
- collection of jobs- each dashboard is represented as a button- some dashboards collect jobs/tests in the domain of a specific SIG (named after and owned by those SIGs), and dashboards to monitor project wide health (owned by SIG-release)
PR ProcessAll new PRs for tests should attempt to follow these steps in order to help
enable a smooth review process:
-The problem statement should clearly describe the intended purpose of thetest and why it is needed.- Get some agreement on how to design your test from the relevant SIG.- Create the PR.- Raise awareness of your PR to respective communities (eg. via mailing lists,
Slack channels, Github mentions).

--------------------------------

End-to-End Testing in Kubernetes
Table of Contents

- -- -- ----- -- -- --- -- ------Overview
End-to-end (e2e) tests for Kubernetes provide a mechanism to test end-to-end
behavior of the system, and is the last signal to ensure end user operations
match developer specifications.Although unit and integration tests provide a
good signal, in a distributed system like Kubernetes it is not uncommon that a
minor change may pass all unit and integration tests, but cause unforeseen
changes at the system level.The primary objectives of the e2e tests are to ensure a consistent and reliable
behavior of the Kubernetes code base, and to catch hard-to-test bugs before
users do, when unit and integration tests are insufficient.NOTE: If you want test against a cluster, you can use `test/e2e` framework.This page is written about `test/e2e`.If you want to test the `kubelet` code, you can use `test/e2e_node` framework.If you want to know `test/e2e_node` , please see the [e2e-node-tests](../sig-node/e2e-node-tests.md).The e2e tests in Kubernetes are built atop of
[Ginkgo](http://onsi.github.io/ginkgo/) and
[Gomega](http://onsi.github.io/gomega/).There are a host of features that this
Behavior-Driven Development (BDD) testing framework provides, and it is
recommended that the developer read the documentation prior to diving into the
tests.The purpose of this document is to serve as a primer for developers who are
looking to execute or add tests using a local development environment.Before writing new tests or making substantive changes to existing tests, you
should also read [Writing Good e2e Tests](writing-good-e2e-tests.md)Building Kubernetes and Running the TestsThere are a variety of ways to run e2e tests, but we aim to decrease the number
of ways to run e2e tests to a canonical way: `kubetest`.For information on installing `kubetest`, please see the
[installation section](https://github.com/kubernetes/test-infra/tree/master/kubetest#installation) of the
[Kubetest project documentation](https://github.com/kubernetes/test-infra/tree/master/kubetest).You can run an end-to-end test which will bring up a master and nodes, perform
some tests, and then tear everything down.Make sure you have followed the
getting started steps for your chosen cloud platform (which might involve
changing the --provider flag value to something other than "gce").You can quickly recompile the e2e testing framework via `go install ./test/e2e`.This will not do anything besides allow you to verify that the go code compiles.If you want to run your e2e testing framework without re-provisioning the e2e setup,
you can do so via `make WHAT=test/e2e/e2e.test`, and then re-running the ginkgo tests.To build Kubernetes, up a cluster, run tests, and tear everything down, use:```
kubetest --build --up --test --down```If you'd like to just perform one of these steps, here are some examples:```
# Build binaries for testing
kubetest --build# Create a fresh cluster.Deletes a cluster first, if it exists
kubetest --up# Run all tests
kubetest --test# Run tests which have been labeled with "Feature:Performance" against a local cluster
# Specify "--provider=local" flag when running the tests locally
kubetest --test --test_args='--ginkgo.label-filter=Feature:Performance'--provider=local# Conversely, exclude tests that match the regex "Pods.*env"
kubetest --test --test_args='--ginkgo.skip=Pods.*env'# Exclude tests that require a certain minimum version of the kubelet
kubetest --test --test_args='--ginkgo.label-filter=!MinimumKubeletVersion:1.20'# Run tests in parallel, skip any that must be run serially
GINKGO_PARALLEL=y kubetest --test --test_args='--ginkgo.label-filter=!Serial'# Run tests in parallel, skip any that must be run serially and keep the test namespace if test failed
GINKGO_PARALLEL=y kubetest --test --test_args='--ginkgo.label-filter=!Serial --delete-namespace-on-failure=false'# Flags can be combined, and their actions will take place in this order:
# --build, --up, --test, --down
#
#You can also specify an alternative provider, such as 'aws'
#
# e.g.:
kubetest --provider=aws --build --up --test --down```The tests are built into a single binary which can be used to deploy a
Kubernetes system or run tests against an already-deployed Kubernetes system.See `kubetest --help` for more options, such as reusing an existing cluster.Cleaning up
During a run, pressing `control-C` should result in an orderly shutdown, but if
something goes wrong and you still have some VMs running you can force a cleanup
with this command:```
kubetest --down```Advanced testing
Extracting a specific version of KubernetesThe `kubetest` binary can download and extract a specific version of Kubernetes,
both the server, client and test binaries.The `--extract=E` flag enables this
functionality.There are a variety of values to pass this flag:```
# Official builds: <ci|release>/<latest|stable>[-N.N]
kubetest --extract=ci/latest --up  # Deploy the latest ci build.kubetest --extract=ci/latest-1.5 --up  # Deploy the latest 1.5 CI build.kubetest --extract=release/latest --up  # Deploy the latest RC.kubetest --extract=release/stable-1.5 --up  # Deploy the 1.5 release.# A specific version:
kubetest --extract=v1.5.1 --up  # Deploy 1.5.1
kubetest --extract=v1.5.2-beta.0  --up  # Deploy 1.5.2-beta.0
kubetest --extract=gs://foo/bar  --up  # --stage=gs://foo/bar# Whatever GKE is using (gke, gke-staging, gke-test):
kubetest --extract=gke  --up  # Deploy whatever GKE prod uses# Using a GCI version:
kubetest --extract=gci/gci-canary--up  # Deploy the version for next gci release
kubetest --extract=gci/gci-57  # Deploy the version bound to gci m57
kubetest --extract=gci/gci-57/ci/latest  # Deploy the latest CI build using gci m57 for the VM image# Reuse whatever is already built
kubetest --up  # Most common.Note, no extract flag
kubetest --build --up  # Most common.Note, no extract flag
kubetest --build --stage=gs://foo/bar --extract=local --up  # Extract the staged version```Bringing up a cluster for testingIf you want, you may bring up a cluster in some other manner and run tests
against it.To do so, or to do other non-standard test things, you can pass
arguments into Ginkgo using `--test_args` (e.g. see above).For the purposes of
brevity, we will look at a subset of the options, which are listed below:```
--ginkgo.dryRun=false: If set, ginkgo will walk the test hierarchy withoutactually running anything.--ginkgo.failFast=false: If set, ginkgo will stop running a test suite after afailure occurs.--ginkgo.failOnPending=false: If set, ginkgo will mark the test suite as failedif any specs are pending.--ginkgo.focus="":If set, ginkgo will only run specs that match this regularexpression.--ginkgo.skip="":If set, ginkgo will only run specs that do not match thisregular expression.--ginkgo.label-filter="":If set, select tests based on their labels as described under"Spec Labels" in https://onsi.github.io/ginkgo/#filtering-specs.This can focuson tests and exclude others in a single parameter without using regular expressions.--ginkgo.noColor="n":If set to "y", ginkgo will not use color in the output--ginkgo.trace=false: If set, default reporter prints out the full stack trace
when a failure occurs--ginkgo.v=false: If set, default reporter print out all specs as they begin.--host="":The host, or api-server, to connect to--kubeconfig="":Path to kubeconfig containing embedded authinfo.--provider="":The name of the Kubernetes provider (gce, gke, local, vagrant,
etc.)--repo-root="../../":Root directory of Kubernetes repository, for finding testfiles.```Prior to running the tests, you may want to first create a simple auth file in
your home directory, e.g. `$HOME/.kube/config`, with the following:```
{
  "User": "root",
  "Password": ""
}```As mentioned earlier there are a host of other options that are available, but
they are left to the developer.NOTE: If you are running tests on a local cluster repeatedly, you may need
to periodically perform some manual cleanup:
- `rm -rf /var/run/kubernetes`, clear kube generated credentials, sometimesstale permissions can cause problems.- `sudo iptables -F`, clear ip tables rules left by the kube-proxy.Reproducing failures in flaky testsYou can run a test repeatedly until it fails.This is useful when debugging
flaky tests.In order to do so, you need to set the following environment
variable:```
$ export GINKGO_UNTIL_IT_FAILS=true```After setting the environment variable, you can run the tests as before.The e2e
script adds `--untilItFails=true` to ginkgo args if the environment variable is
set.The flags asks ginkgo to run the test repeatedly until it fails.Debugging clustersIf a cluster fails to initialize, or you'd like to better understand cluster
state to debug a failed e2e test, you can use the `cluster/log-dump.sh` script
to gather logs.This script requires that the cluster provider supports ssh.Assuming it does,
running:```
$ cluster/log-dump.sh <directory>```will ssh to the master and all nodes and download a variety of useful logs to
the provided directory (which should already exist).The Google-run Jenkins builds automatically collected these logs for every
build, saving them in the `artifacts` directory uploaded to GCS.Debugging an E2E test with a debugger (delve)When debugging E2E tests it's sometimes useful to pause in the middle of an E2E test
to check the value of a variable or to check something in the cluster, instead of adding
`time.Sleep(...)` we can run the E2E test with `delve`
Requirements:
- delve ([https://github.com/go-delve/delve/tree/master/Documentation/installation](https://github.com/go-delve/delve/tree/master/Documentation/installation))For this example we'll debug a [sig-storage test that will provision storage from a snapshot](https://github.com/kubernetes/kubernetes/blob/3ed71cf190a3d6a6dcb965cf73224538059e8e5e/test/e2e/storage/testsuites/provisioning.go#L200-L236)First, compile the E2E test suite with additional compiler flags```
# -N Disable optimizations.# -l Disable inlining.make WHAT=test/e2e/e2e.test GOGCFLAGS="all=-N -l" GOLDFLAGS=""```Then set the env var `E2E_TEST_DEBUG_TOOL=delve` and then run the test with `./hack/ginkgo.sh` instead of `kubetest`, you should see the delve command line prompt```
E2E_TEST_DEBUG_TOOL=delve ./hack/ginkgo-e2e.sh --ginkgo.focus="sig-storage.*csi-hostpath.*Dynamic.PV.*default.fs.*provisioning.should.provision.storage.with.snapshot.data.source"--allowed-not-ready-nodes=10
---Setting up for KUBERNETES_PROVIDER="gce".Project: ...
Network Project: ...
Zone: ...
Trying to find master named '...'Looking for address '...'Using master: ... (external IP: XX.XXX.XXX.XX; internal IP: (not set))Type 'help' for list of commands.(dlv)```Use the commands described in the [delve command lists](https://github.com/go-delve/delve/blob/master/Documentation/cli/README.md), for our example we'll set a breakpoint at the start of the method```
(dlv) break test/e2e/storage/testsuites/provisioning.go:201
Breakpoint 1 set at 0x72856f2 for k8s.io/kubernetes/test/e2e/storage/testsuites.(*provisioningTestSuite).DefineTests.func4() _output/local/go/src/k8s.io/kubernetes/test/e2e/storage/testsuites/provisioning.go:201```When you're done setting breakpoints execute `continue` to continue the test, once the breakpoint hits you have the chance to explore variables in the test```
(dlv) continue
Apr 16 20:29:18.724: INFO: Fetching cloud provider for "gce"
I0416 20:29:18.725327 3669683 gce.go:909]Using DefaultTokenSource &oauth2.reuseTokenSource{new:(*oauth2.tokenRefresher)(0xc002b65d10), mu:sync.Mutex{state:0, sema:0x0}, t:(*oauth2.Token)(0xc0028e43c0)}W0416 20:29:18.891866 3669683 gce.go:477]No network name or URL specified.I0416 20:29:18.892058 3669683 e2e.go:129]Starting e2e run "ae1b58af-9e9e-4745-b1f4-27d763451f8e" on Ginkgo node 1
{"msg":"Test Suite starting","total":1,"completed":0,"skipped":0,"failed":0}Running Suite: Kubernetes e2e suite
===================================Random Seed: 1618604956 - Will randomize all specs
Will run 1 of 5745 specs
...------------------------------
[sig-storage]CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] provisioningshould provision storage with snapshot data source [Feature:VolumeSnapshotDataSource]
  _output/local/go/src/k8s.io/kubernetes/test/e2e/storage/testsuites/provisioning.go:200
[BeforeEach] [Testpattern: Dynamic PV (default fs)] provisioning
  _output/local/go/src/k8s.io/kubernetes/test/e2e/storage/framework/testsuite.go:51
[BeforeEach] [Testpattern: Dynamic PV (default fs)] provisioning
  _output/local/go/src/k8s.io/kubernetes/test/e2e/framework/framework.go:185STEP: Creating a kubernetes client
Apr 16 20:29:24.747: INFO: >>> kubeConfig: ...
STEP: Building a namespace api object, basename provisioning
W0416 20:29:24.901750 3669683 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+
Apr 16 20:29:24.901: INFO: No PodSecurityPolicies found; assuming PodSecurityPolicy is disabled.STEP: Waiting for a default service account to be provisioned in namespace
[It] should provision storage with snapshot data source [Feature:VolumeSnapshotDataSource]
  _output/local/go/src/k8s.io/kubernetes/test/e2e/storage/testsuites/provisioning.go:200
> k8s.io/kubernetes/test/e2e/storage/testsuites.(*provisioningTestSuite).DefineTests.func4() _output/local/go/src/k8s.io/kubernetes/test/e2e/storage/testsuites/provisioning.go:201 (hits goroutine(165):1 total:1) (PC: 0x72856f2)Warning: listing may not match stale executable
   196:197:                 l.testCase.TestDynamicProvisioning()
   198:         })
   199:
   200:         ginkgo.It("should provision storage with snapshot data source [Feature:VolumeSnapshotDataSource]", func() {
=> 201:                 if !dInfo.Capabilities[storageframework.CapSnapshotDataSource]{202:                         e2eskipper.Skipf("Driver %q does not support populate data from snapshot - skipping", dInfo.Name)203:                 }
   204:                 if !dInfo.SupportedFsType.Has(pattern.FsType) {
   205:                         e2eskipper.Skipf("Driver %q does not support %q fs type - skipping", dInfo.Name, pattern.FsType)
   206:                 }
(dlv) print dInfo*k8s.io/kubernetes/test/e2e/storage/framework.DriverInfo {Name: "csi-hostpath",
        InTreePluginName: "",
        FeatureTag: "",
        MaxFileSize: 104857600,
        SupportedSizeRange: k8s.io/kubernetes/test/e2e/framework/volume.SizeRange {Max: "", Min: "1Mi"},
        SupportedFsType: k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets.String [
                "": {},
        ],
        SupportedMountOption: k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets.String nil,
        RequiredMountOption: k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets.String nil,
        Capabilities: map[k8s.io/kubernetes/test/e2e/storage/framework.Capability]bool [
                "persistence": true,
                "snapshotDataSource": true,
                "multipods": true,
                "block": true,
                "pvcDataSource": true,
                "controllerExpansion": true,
                "singleNodeVolume": true,
                "volumeLimits": true,
        ],
        RequiredAccessModes: []k8s.io/kubernetes/vendor/k8s.io/api/core/v1.PersistentVolumeAccessMode len: 0, cap: 0, nil,
        TopologyKeys: []string len: 0, cap: 0, nil,
        NumAllowedTopologies: 0,
        StressTestOptions: *k8s.io/kubernetes/test/e2e/storage/framework.StressTestOptions {NumPods: 10, NumRestarts: 10},
        VolumeSnapshotStressTestOptions: *k8s.io/kubernetes/test/e2e/storage/framework.VolumeSnapshotStressTestOptions {NumPods: 10, NumSnapshots: 10},}```Local clustersIt can be much faster to iterate on a local cluster instead of a cloud-based
one.To start a local cluster, you can run:```
# The PATH construction is needed because PATH is one of the special-cased
# environment variables not passed by sudo -E
sudo PATH=$PATH hack/local-up-cluster.sh```This will start a single-node Kubernetes cluster than runs pods using the local
docker daemon.Press Control-C to stop the cluster.You can generate a valid kubeconfig file by following instructions printed at the
end of aforementioned script.Testing against local clustersIn order to run an E2E test against a locally running cluster, first make sure
to have a local build of the tests:```
kubetest --build```Then point the tests at a custom host directly:```
export KUBECONFIG=/path/to/kubeconfig
kubetest --provider=local --test```To control the tests that are run:```
kubetest --provider=local --test --test_args="--ginkgo.focus=Secrets"```You will also likely need to specify `minStartupPods` to match the number of
nodes in your cluster.If you're testing against a cluster set up by
`local-up-cluster.sh`, you will need to do the following:```
kubetest --provider=local --test --test_args="--minStartupPods=1 --ginkgo.focus=Secrets"```Version-skewed and upgrade testingWe run version-skewed tests to check that newer versions of Kubernetes work
similarly enough to older versions.The general strategy is to cover the following cases:
- One version of `kubectl` with another version of the cluster and tests (e.g.that v1.2 and v1.4 `kubectl` doesn't break v1.3 tests running against a v1.3

cluster).- A newer version of the Kubernetes master with older nodes and tests (e.g.that upgrading a master to v1.3 with nodes at v1.2 still passes v1.2 tests).- A newer version of the whole cluster with older tests (e.g. that a clusterupgraded---master and nodes---to v1.3 still passes v1.2 tests).- That an upgraded cluster functions the same as a brand-new cluster of thesame version (e.g. a cluster upgraded to v1.3 passes the same v1.3 tests asa newly-created v1.3 cluster).
[kubetest](https://git.k8s.io/test-infra/kubetest) is
the authoritative source on how to run version-skewed tests, but below is a
quick-and-dirty tutorial.```
# Assume you have two copies of the Kubernetes repository checked out, at
# ./kubernetes and ./kubernetes_old# If using GKE:
export CLUSTER_API_VERSION=${OLD_VERSION}# Deploy a cluster at the old version; see above for more details
cd ./kubernetes_old
kubetest --up# Upgrade the cluster to the new version
#
# If using GKE, add --upgrade-target=${NEW_VERSION}#
#You can target Feature:MasterUpgrade or Feature:ClusterUpgrade
cd ../kubernetes
kubetest --provider=gke --test --check-version-skew=false --test_args="--ginkgo.label-filter=Feature:MasterUpgrade"# Run old tests with new kubectl
cd ../kubernetes_old
kubetest --provider=gke --test --test_args="--kubectl-path=$(pwd)/../kubernetes/cluster/kubectl.sh"```If you are just testing version-skew, you may want to just deploy at one
version and then test at another version, instead of going through the whole
upgrade process:```
# With the same setup as above# Deploy a cluster at the new version
cd ./kubernetes
kubetest --up# Run new tests with old kubectl
kubetest --test --test_args="--kubectl-path=$(pwd)/../kubernetes_old/cluster/kubectl.sh"# Run old tests with new kubectl
cd ../kubernetes_old
kubetest --test --test_args="--kubectl-path=$(pwd)/../kubernetes/cluster/kubectl.sh"```Test jobs naming convention
Version skew tests are named as
`<cloud-provider>-<master&node-version>-<kubectl-version>-<image-name>-kubectl-skew`
e.g: `gke-1.5-1.6-cvm-kubectl-skew` means cloud provider is GKE;
master and nodes are built from `release-1.5` branch;
`kubectl` is built from `release-1.6` branch;
image name is cvm (container_vm).The test suite is always the older one in version skew tests.e.g. from release-1.5 in this case.Upgrade tests:If a test job name ends with `upgrade-cluster`, it means we first upgrade
the cluster (i.e. master and nodes) and then run the old test suite with new kubectl.If a test job name ends with `upgrade-cluster-new`, it means we first upgrade
the cluster (i.e. master and nodes) and then run the new test suite with new kubectl.If a test job name ends with `upgrade-master`, it means we first upgrade
the master and keep the nodes in old version and then run the old test suite with new kubectl.There are some examples in the table,
where `->` means upgrading; container_vm (cvm) and gci are image names.test name
test suite
master version (image)
node version (image)
kubectl
gce-1.5-1.6-upgrade-cluster
1.51.5->1.6
1.5->1.6
1.6
gce-1.5-1.6-upgrade-cluster-new1.61.5->1.6
1.5->1.6
1.6
gce-1.5-1.6-upgrade-master1.51.5->1.6
1.5
1.6
gke-container_vm-1.5-container_vm-1.6-upgrade-cluster1.5

1.5->1.6 (cvm)
1.5->1.6 (cvm)
1.6
gke-gci-1.5-container_vm-1.6-upgrade-cluster-new
THIS IS END BLOCK MARKER.1.6

1.5->1.6 (gci)
1.5->1.6 (cvm)
1.6
gke-gci-1.5-container_vm-1.6-upgrade-master
THIS IS END BLOCK MARKER.1.51.5->1.6 (gci)
1.5 (cvm)
1.6Kinds of testsTests can be labeled.Labels appear with square brackets inside the test names
(the traditional approach) and are Ginkgo v2 labels (since Kubernetes v1.29).Available labels in order of increasing precedence (that is, each label listed
below supersedes the previous ones):
-If a test has no labels, it is expected to run fast (under five minutes), beable to be run in parallel, and be consistent.- `[Slow]`:If a test takes more than five minutes to run (by itself or inparallel with many other tests), it is labeled `[Slow]`.This partition allowsus to run almost all of our tests quickly in parallel, without waiting for the
stragglers to finish.- `[Serial]`:If a test cannot be run in parallel with other tests (e.g. ittakes too many resources or restarts nodes), it is labeled `[Serial]`, andshould be run in serial as part of a separate suite.- `[Disruptive]`: If a test may impact workloads that it didn't create,it should be marked as `[Disruptive]`.Examples of disruptive behaviorinclude, but are not limited to, restarting components or tainting nodes.Any
`[Disruptive]` test is also assumed to qualify for the `[Serial]` label, but
need not be labeled as both.These tests are not run against soak clusters to
avoid restarting components.- `[Flaky]`:If a test is found to be flaky and we have decided that it's toohard to fix in the short term (e.g. it's going to take a full engineer-week), itreceives the `[Flaky]` label until it is fixed.The `[Flaky]` label should be
used very sparingly, and should be accompanied with a reference to the issue for
de-flaking the test, because while a test remains labeled `[Flaky]`, it is not
monitored closely in CI.`[Flaky]` tests are by default not run, unless a
`focus` or `skip` argument is explicitly given.- `[Feature:.+]`:If a test has non-default requirements to run or targetssome non-core functionality, and thus should not be run as part of the standardsuite, it receives a `[Feature:.+]` label.This non-default requirement could
be some special cluster setup (e.g. `Feature:IPv6DualStack` indicates that the
cluster must support dual-stack pod and service networks) or that the test has
special behavior that makes it unsuitable for a normal test run (e.g.
`Feature:PerformanceDNS` marks a test that stresses cluster DNS performance
with many services).`[Feature:.+]` tests are not run in our core suites,
instead running in custom suites.If a feature is experimental or alpha and is
not enabled by default due to being incomplete or potentially subject to
breaking changes, it does not block PR merges, and thus should run in
some separate test suites owned by the feature owner(s)
(see  below).- `[MinimumKubeletVersion:.+]`:This label must be set on tests that requirea minimum version of the kubelet.Invocations of the test suite can then decideto `skip` the same tests if kubelets in the cluster do not satisfy the requirement.For example, `[MinimumKubeletVersion:(1.20|1.21)]` would `skip` tests with minimum
kubelet versions `1.20` and `1.21`.- `[Conformance]`: Designate that this test is included in the Conformancetest suite for [Conformance Testing](../sig-architecture/conformance-tests.md).This test mustmeet a number of [requirements](../sig-architecture/conformance-tests.md#conformance-test-requirements)
to be eligible for this tag.This tag does not supersed any other labels.- `[LinuxOnly]`:If a test is known to be using Linux-specific features(e.g.: seLinuxOptions) or is unable to run on Windows nodes, it is labeled`[LinuxOnly]`.When using Windows nodes, this tag should be added to the
`skip` argument.This is not using `[Feature:LinuxOnly]` because that
would have implied changing all CI jobs which skip tests with unknown
requirements.- The following tags are not considered to be exhaustively applied, but areintended to further categorize existing `[Conformance]` tests, or tests that arebeing considered as candidate for promotion to `[Conformance]` as we work to
refine requirements:
- `[Privileged]`:This is a test that requires privileged access- `[Deprecated]`:This is a test that exercises a deprecated feature- For tests that depend on feature gates, the following are set automatically:
- `[Alpha]`:This is a test that exercises an alpha feature- `[Beta]`:This is a test that exercises a beta feature
Conceptually, these are non-default requirements as defined above under`[Feature:.+]`, but for historic reasons and the sake of brevity they don't
have that prefix when embedded in test names.They do have that prefix in the
Ginkgo v2 label, so use e.g.`--filter-label=Feature: containsAny Alpha` to
run them.The normal `--filter-label=Feature: isEmpty` excludes them.Note that at the moment, not all jobs filter out tests with `Alpha` or `Beta`
requirements like that.Therefore all tests with such a requirement also
have to be annotated with a `[Feature]` tag.This restriction will be lifted
once migration of jobs to `--filter-label` is completed.Every test should be owned by a [SIG](/sig-list.md),
and have a corresponding `[sig-<name>]` label.Selecting tests to run
See [https://onsi.github.io/ginkgo/#filtering-specs](https://onsi.github.io/ginkgo/#filtering-specs) for a general introduction.Focusing on a specific test by its name is useful when interactively running
just one or a few related tests.The test name is a concatenation of multiple
strings.To get a list of all full test names, run:```
$ e2e.test -list-testsThe following spec names can be used with 'ginkgo run --focus/skip':
    test/e2e/apimachinery/watchlist.go:41: [sig-api-machinery] API Streaming (aka. WatchList) [Serial] [Feature:WatchList] should be requested when ENABLE_CLIENT_GO_WATCH_LIST_ALPHA is set
    test/e2e/apimachinery/flowcontrol.go:65: [sig-api-machinery]API priority and fairness should ensure that requests can be classified by adding FlowSchema and PriorityLevelConfiguration
    test/e2e/apimachinery/flowcontrol.go:190: [sig-api-machinery]API priority and fairness should ensure that requests can't be drowned out (fairness)
...```Or within the Kubernetes repo:```
$ go test -v ./test/e2e -args -list-testsThe following spec names can be used with 'ginkgo run --focus/skip':
    test/e2e/apimachinery/watchlist.go:41: [sig-api-machinery] API Streaming (aka. WatchList) [Serial] [Feature:WatchList] should be requested when ENABLE_CLIENT_GO_WATCH_LIST_ALPHA is set
...```The same works for other Kubernetes E2E suites, like `e2e_node`.In Prow jobs, selection by labels is often simpler.See
[below]((#kinds-of-tests) for documentation of the different labels that are in
use.A full list of labels used by a specific E2E suite can be obtained with
`--list-labels`.A common pattern is to run only tests which have no special cluster setup
requirements and are not flaky:```
--filter-label='Feature: isEmpty && !Flaky'```Feature owners have to ensure that tests excluded that way from shared CI
jobs are executed in dedicated jobs (more on CI below):```
--filter-label='Feature: containsAny MyAwesomeFeature'```In jobs that support certain well-known features it is possible to run tests
which have no special requirements or at least only depend on the supported
features:```
# Alpha APIs and features enabled, allow tests depending on that as
# long as they have no other special requirements.--filter-label='Feature: isSubsetOf Alpha'```Viper configuration and hierarchichal test parameters.The future of e2e test configuration idioms will be increasingly defined using viper, and decreasingly via flags.Flags in general fall apart once tests become sufficiently complicated.So, even if we could use another flag library, it wouldn't be ideal.To use viper, rather than flags, to configure your tests:
- Just add "e2e.json" to the current directory you are in, and define parameters in it... i.e. `"kubeconfig":"/tmp/x"`.Note that advanced testing parameters, and hierarchichally defined parameters, are only defined in viper, to see what they are, you can dive into [TestContextType](https://git.k8s.io/kubernetes/test/e2e/framework/test_context.go).In time, it is our intent to add or autogenerate a sample viper configuration that includes all e2e parameters, to ship with Kubernetes.Pod Security Admission
With introducing Pod Security admission in Kubernetes by default, it is desired to execute e2e tests within bounded pod security policy levels.The default pod security policy in e2e tests is [restricted](https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-levels).This is set in [https://github.com/kubernetes/kubernetes/blob/master/test/e2e/framework/framework.go](https://github.com/kubernetes/kubernetes/blob/master/test/e2e/framework/framework.go).This ensures that e2e tests follow best practices for hardening pods by default.Two helper functions are available for returning a minimal [restricted pod security context](https://github.com/kubernetes/kubernetes/blob/c876b30c2b30c0355045d7548c22b6cd42ab58da/test/e2e/framework/pod/utils.go#L156) and a [restricted container security context](https://github.com/kubernetes/kubernetes/blob/c876b30c2b30c0355045d7548c22b6cd42ab58da/test/e2e/framework/pod/utils.go#L172).These can be used to initialize pod or container specs to ensure adherence for the most restricted pod security policy.If pods need to elevate privileges to either `baseline` or `privileged` a new field - `NamespacePodSecurityEnforceLevel` - was introduced to the e2e framework to specify the necessary namespace enforcement level.Note that namespaces get created in the `BeforeEach()` phase of ginkgo tests.```
import (
...admissionapi "k8s.io/pod-security-admission/api"
...
)var _ = SIGDescribe("Test", func() {
  ...f := framework.NewDefaultFramework("test")
  f.NamespacePodSecurityEnforceLevel = admissionapi.LevelPrivileged
  ...
}```This ensures that the namespace returned by `f.Namespace.Name` includes the configured pod security policy level.Note that creating custom namespace names is not encouraged and will not include the configured settings.Conformance testsFor more information on Conformance tests please see the [Conformance Testing](../sig-architecture/conformance-tests.md)Continuous Integration
A quick overview of how we run e2e CI on Kubernetes.What is CI?We run a battery of [release-blocking jobs](https://testgrid.k8s.io/sig-release-master-blocking)
against `HEAD` of the master branch on a continuous basis, and block merges
via [Tide](https://sigs.k8s.io/prow/cmd/tide) on a subset of those
tests if they fail.CI results can be found at [ci-test.k8s.io](http://ci-test.k8s.io), e.g.
[ci-test.k8s.io/kubernetes-e2e-gce/10594](http://ci-test.k8s.io/kubernetes-e2e-gce/10594).What runs in CI?We run all default tests (those that aren't marked `[Flaky]` or `[Feature:.+]`)
against GCE and GKE.To minimize the time from regression-to-green-run, we
partition tests across different jobs:
- `kubernetes-e2e-<provider>` runs all non-`[Slow]`, non-`[Serial]`,non-`[Disruptive]`, non-`[Flaky]`, non-`[Feature:.+]` tests in parallel.- `kubernetes-e2e-<provider>-slow` runs all `[Slow]`, non-`[Serial]`,non-`[Disruptive]`, non-`[Flaky]`, non-`[Feature:.+]` tests in parallel.- `kubernetes-e2e-<provider>-serial` runs all `[Serial]` and `[Disruptive]`,non-`[Flaky]`, non-`[Feature:.+]` tests in serial.- `ci-kubernetes-e2e-kind-alpha-features` runs all tests without any specialrequirements and tests that only have alpha feature gates and API groupsas requirement.- `ci-kubernetes-e2e-kind-beta-features` runs all tests without any specialrequirements and tests that only have beta feature gates and API groupsas requirement.We also run non-default tests if the tests exercise general-availability ("GA")
features that require a special environment to run in, e.g.
`kubernetes-e2e-gce-scalability` and `kubernetes-kubemark-gce`, which test for
Kubernetes performance.Non-default tests
Many `[Feature:.+]` tests we don't run in CI.These tests are for features that
are experimental (often in the `experimental` API), and aren't enabled by
default.The PR-builder
We also run a battery of tests against every PR before we merge it.These tests
are equivalent to `kubernetes-gce`: it runs all non-`[Slow]`, non-`[Serial]`,
non-`[Disruptive]`, non-`[Flaky]`, non-`[Feature:.+]` tests in parallel.These
tests are considered "smoke tests" to give a decent signal that the PR doesn't
break most functionality.Results for your PR can be found at
[pr-test.k8s.io](http://pr-test.k8s.io), e.g.
[pr-test.k8s.io/20354](http://pr-test.k8s.io/20354) for #20354.Adding a test to CIAs mentioned above, prior to adding a new test, it is a good idea to perform a
`-ginkgo.dryRun=true` on the system, in order to see if a behavior is already
being tested, or to determine if it may be possible to augment an existing set
of tests for a specific use case.If a behavior does not currently have coverage and a developer wishes to add a
new e2e test, navigate to the ./test/e2e directory and create a new test using
the existing suite as a guide.NOTE: To build/run with tests in a new directory within ./test/e2e, add the
directory to import list in ./test/e2e/e2e_test.goWhen writing a test, consult #kinds-of-tests above to determine how your test
should be marked, (e.g. `[Slow]`, `[Serial]`; remember, by default we assume a
test can run in parallel with other tests!).When first adding a test it should not go straight into CI, because failures
block ordinary development.A test should only be added to CI after is has been
running in some non-CI suite long enough to establish a track record showing
that the test does not fail when run against working software.Note also that
tests running in CI are generally running on a well-loaded cluster, so must
contend for resources; see above about .Generally, a feature starts as `experimental`, and will be run in some suite
owned by the team developing the feature.If a feature is in beta or GA, it
should block PR merges and releases.In moving from experimental to beta or GA, tests
that are expected to pass by default should simply remove the `[Feature:.+]`
label, and will be incorporated into our core suites.If tests are not expected
to pass by default, (e.g. they require a special environment such as added
quota,) they should remain with the `[Feature:.+]` label.Occasionally, we'll want to add tests to better exercise features that are
already GA.These tests also shouldn't go straight to CI.They should begin by
being marked as `[Flaky]` to be run outside of CI, and once a track-record for
them is established, they may be promoted out of `[Flaky]`.Moving a test out of CIIf we have determined that a test is known-flaky and cannot be fixed in the
short-term, we may move it out of CI indefinitely.This move should be used
sparingly, as it effectively means that we have no coverage of that test.When a
test is demoted, it should be marked `[Flaky]` with a comment accompanying the
label with a reference to an issue opened to fix the test.Performance Evaluation
Another benefit of the e2e tests is the ability to create reproducible loads on
the system, which can then be used to determine the responsiveness, or analyze
other characteristics of the system.For example, the density tests load the
system to 30,50,100 pods per/node and measures the different characteristics of
the system, such as throughput, api-latency, etc.For a good overview of how we analyze performance data, please read the
following [post](https://kubernetes.io/blog/2015/09/kubernetes-performance-measurements-and/)For developers who are interested in doing their own performance analysis, we
recommend setting up [prometheus](http://prometheus.io/) for data collection,
and using [grafana](https://prometheus.io/docs/visualization/grafana/) to
visualize the data.There also exists the option of pushing your own metrics in
from the tests using a
[prom-push-gateway](http://prometheus.io/docs/instrumenting/pushing/).Containers for all of these components can be found
[here](https://hub.docker.com/u/prom/).For more accurate measurements, you may wish to set up prometheus external to
Kubernetes in an environment where it can access the major system components
(api-server, controller-manager, scheduler).This is especially useful when
attempting to gather metrics in a load-balanced api-server environment, because
all api-servers can be analyzed independently as well as collectively.On
startup, configuration file is passed to prometheus that specifies the endpoints
that prometheus will scrape, as well as the sampling interval.```
#prometheus.conf
job: {
  name: "kubernetes"
  scrape_interval: "1s"
  target_group: {
    # apiserver(s)
    target: "http://localhost:8080/metrics"
    # scheduler
    target: "http://localhost:10251/metrics"
    # controller-manager
    target: "http://localhost:10252/metrics"
  }
}```Once prometheus is scraping the Kubernetes endpoints, that data can then be
plotted using [grafana](https://prometheus.io/docs/visualization/grafana/),
and alerts can be created against the assortment of metrics that Kubernetes
provides.One More ThingYou should also know the [testing conventions](../../guide/coding-conventions.md#testing-conventions).HAPPY TESTING!

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

raw HTML omitted 
Code of conduct
The Flutter project expects Flutter's contributors to act professionally
and respectfully.Flutter contributors are expected to maintain the safety
and dignity of Flutter's social environments (such as GitHub and Discord).Specifically:- Respect people, their identities, their culture, and their work.- Be kind.Be courteous.Be welcoming.- Listen.Consider and acknowledge people's points before responding.Should you experience anything that makes you feel unwelcome in Flutter's
community, please contact [conduct@flutter.dev](mailto:conduct@flutter.dev)
or, if you prefer, directly contact someone on the project, for instance
[Hixie](mailto:ian@hixie.ch).The Flutter project will not tolerate harassment in Flutter's
community, even outside of Flutter's public communication channels.Conflict resolutionWhen multiple contributors disagree on the direction for a particular
patch or the general direction of the project, the conflict should be
resolved by communication.The people who disagree should get
together, try to understand each other's points of view, and work to
find a design that addresses everyone's concerns.This is usually sufficient to resolve issues.If you cannot come to an
agreement, ask for the advice of a more senior member of the project.Be wary of agreement by attrition, where one person argues a point
repeatedly until other participants give up in the interests of moving
on.This is not conflict resolution, as it does not address everyone's
concerns.Be wary of agreement by compromise, where two good competing
solutions are merged into one mediocre solution.A conflict is
addressed when the participants agree that the final solution is
better than all the conflicting proposals.Sometimes the solution is
more work than either of the proposals.[Embrace the yak shave](./docs/contributing/Style-guide-for-Flutter-repo.md#lazy-programming).QuestionsIt's always ok to ask questions.Our systems are large, and nobody will be
an expert in all the systems.Once you find the answer, document it in
the first place you looked.That way, the next person will be brought
up to speed even quicker.Source: [xkcd, May 2012](https://xkcd.com/1053/)

--------------------------------

Chatting on Discord
 raw HTML omitted 
The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148).[This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH).Please do not share either link directly, instead share links to this page.The server is open to the public, though some channels are intended only for people who are actively contributing.See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there).We recommend you use the same display name on Discord and GitHub.(Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on.When in doubt, remember: our server has Dash as an icon!)Existing channelsWe have different channels for different purposes (this list is not exhaustive):
Channel
Description
Participants
#welcome
Welcome message.Only admins can post.raw HTML omitted Anyone can read.#announcements
Flutter announcements (e.g. breaking changes).Only team members can post (but not frequently).raw HTML omitted Anyone can read.#server-support
Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues.Anyone.#general
Chat about anything related to Flutter.Anyone.#help
People asking for our help.Anyone.#package-authorsFor people who develop Flutter packages.People writing packages for [pub.dev](https://pub.dev/).#dart
Questions about the Dart language.Anyone.#tree-status
Announcements about whether the trees are open or closed.Anyone, but discussion should happen elsewhere.#hackers
Chat about anything related to Flutter.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-*Chat specifically about foo, where foo is something to do with Flutter development, for example "engine", "framework", "desktop", "devtools", etc.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-dart
Questions about the Dart language.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-new
New people to the team and people who want to help them.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-triageFor use while triaging bugs.Flutter contributors.raw HTML omitted Anyone can watch.#hidden-chat
Chat about anything related to Flutter.Flutter contributors only.raw HTML omitted Not public.general (voice)
Talk (audio) about anything related to Flutter.Anyone.team (voice)
Talk (audio) that is only open to team members.Flutter contributors.The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the "team member" role to see them.New channelsIf you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support.If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads.If you would like a channel for subcommunities, e.g. #women or #china, that should be fine.(Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.)For practical reasons, we do not use Discord for chat groups limited to specific customers.For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord.Each channel describes its topic in the channel description.Please read the channel description before posting in a channel, to make sure you're using the appropriate one.Policies
Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter.The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing.If you want help with your app, ask in #help instead.If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md).See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the "team" role.Please don't direct-message people unless they are comfortable with it (ask publicly first).You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.Discord features
Threading
Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.StatusYou can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.Design documentsThis page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).

--------------------------------

For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine.However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as "contributor access", "being a member of the flutter-hackers group", "being a member of the Flutter team").We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter.Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.The possible criteria are:-You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)).(This is rare.)Being granted access means that you will be added to the "flutter-hackers" group on GitHub and the "team" role on Discord.This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md).A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues.We grant access optimistically based on a reasonably small volume of evidence of good faith.Correspondingly, we will remove access quickly if we find our trust has been violated.Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously.(Please read it, it's stricter than most.)Responsibilities
Code of conductIf you have commit access or "team" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).Our code of conduct is much, much stricter than most.We do not wait until someone has been actively rude or insulting.Being disrespectful in any way is grounds for action.For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct.If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day.When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.Most people react very positively to this.If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment.On Discord, this would be kicking them from the channel.Repeat offenders should be banned.On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this).Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.Maintaining documentation
Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.If you spot something wrong, please fix it!As a contributor, you have access to the wiki.Privileges
Being in the GitHub "flutter-hackers" group gives you the following:-The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).- PRs will run their tests slightly faster.Being in the Discord "team" group gives you the following:-The ability to talk without rate-limiting on the #hackers-* channels.- The ability to kick people.- The ability to manage the server emoji.ProcessThe actual process (as followed by Flutter repo admins) is as follows:- Verify that they qualify under all the terms described above.Make sure they have a sponsor who isn't you.- Verify the identity of the person making the request.Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.- Add them to our private spreadsheet (go/flutter-organization-members).- Click the "Add a member" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.- Type their name in the text field, select them, then click the "Invite" button.- Add them to the "team" group on Discord.Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!For new Googlers joining the team:You need to ask someone in the team to add you to get added.It's not an automatic process after you join the flutter Google group.InactivityWe occasionally check for account with commit access that have not been used for a while.It takes very little to count as "active" (e.g. commenting on an issue, even adding an emoji reaction to an issue).If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access.If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.Access rights to Flutter dashboardThe [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits.To see rerun tasks, you need to be added to an allowlist.Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored.To get access, ask on #hackers-infra to be added to the allowlist.Adding a contributor to Flutter DashboardThis is only for team members with access to the Flutter Dashboard Datastore.- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)- Click `Create Entity`- Click `Email: Empty` ->Edit property.Insert contributor Google account- Click `Create`Access to LUCI recipes and configuration repositoriesIf you need access to the LUCI recipes, you need to be added to the relevant ACLs.Ask in #hackers-infra to be added to the LUCI ACLs.Process
A Googler has to be the one to grant permission.Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)Access to Flutter GoldIf you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user.Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.ProcessThe list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5).Googlers can submit a change to add to the authorized users.This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)
fcontrib.org accountsIf you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account.Ping @Hixie or another admin in the #server-support channel on Discord.ProcessYou’ll need the user’s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin.To add a fcontrib.org participant:- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)- Under “Users” in the upper left of the main content area, click “Add a User” and follow the prompts.- For a password, choose “Generate Password” and email the password to the new account holder using their non-fcontrib account -- they’ll be able to log in with that and then choose a new password.Review teams
Some parts of the codebase have teams specified so that PRs get round-robin assigned for review.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).We currently have the following review teams:- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions.To create a new team, contact @Hixie.You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.Pusher permissions
Some branches are protected to avoid accidents.Only people in the specific branches can push to them.Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia

--------------------------------

raw HTML omitted 
Contributing to DevToolstl;dr: join [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md), be
[courteous](https://github.com/flutter/flutter/blob/master/CODE_OF_CONDUCT.md), follow the steps below
to set up a development environment; if you stick around and contribute, you can
[join the team](https://github.com/flutter/flutter/blob/master/docs/contributing/Contributor-access.md) and get commit access.If you are here because you just want to test the bleeding-edge (unreleased) DevTools functionality,
follow our [beta testing guidance](https://github.com/flutter/devtools/blob/master/BETA_TESTING.md).WelcomeWe gladly accept contributions via GitHub pull requests!We encourage you to read the
[Welcome](https://github.com/flutter/flutter/blob/master/CONTRIBUTING.md#welcome) remarks in the Flutter
framework's contributing guide, as all of that information applies to contributing to the `flutter/devtools`
repo as well.We communicate primarily over GitHub and [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) on the
[#hackers-devtools](https://discord.com/channels/608014603317936148/1106667330093723668) channel.Before contributing code:- Complete the[Contributor License Agreement](https://cla.developers.google.com/clas).You can do this online, and it only takes a minute.- Review the [DevTools style guide](STYLE.md), which uses a combination of Dart and Flutter best practices.Table of contents- ---- -----Developing for DevToolsSet up your DevTools environment
Before setting up your DevTools environment, please make sure you have
[cloned the Flutter SDK from GitHub](https://github.com/flutter/flutter/blob/main/docs/contributing/Setting-up-the-Framework-development-environment.md)
and added the included `flutter` and `dart` executables to your `PATH` environment variable (see Flutter
instructions for how to [update your PATH](https://flutter.dev/to/update-macos-path)).Typing `which flutter` and `which dart` (or `where.exe flutter` and `where.exe dart` for Windows)
into your terminal should print the path to the binaries from the Flutter SDK you cloned from GitHub.- [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the DevTools repo to yourown Github account, and then clone it using SSH.-If you haven't already, you may need to[generate a new SSH key](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)
to connect to Github with SSH.-Make sure to [configure Git to keep your fork in sync](https://docs.github.com/en/get-started/quickstart/fork-a-repo#configuring-git-to-sync-your-fork-with-the-upstream-repository)with the upstream DevTools repo.- Ensure that you have access to the DevTools repo management tool exectuable, `dt`:
- Run `flutter pub get` on the `devtools/tool` directory- Add the `devtools/tool/bin` folder to your `PATH` environment variable:
- MacOS Users
- add the following to your `~/.zshrc` file (or `~/.bashrc`, `~/.bash_profile` if you use Bash),replacing `<DEVTOOLS_DIR>` with the absolute path to your DevTools repo:```
 export PATH=$PATH:<DEVTOOLS_DIR>/tool/bin```- Windows Users- Open "Edit environment variables for your account" from Control Panel- Locate the `Path` variable and click Edit- Click the New button and paste in `<DEVTOOLS_DIR>/tool/bin`, replacing `<DEVTOOLS_DIR>`
with the absolute path to your DevTools repo.Explore the commands and helpers that `dt` provides by running `dt -h`.- Optional: enable and activate DCM (Dart Code Metrics) - see theSet up your IDEWe recommend using VS Code for your DevTools development environment because this gives you
access to some advanced development and configuration features.When you open DevTools in VS Code,
open the `devtools/packages` directory in your VS Code workspace.This will give you access to a set
of launch configurations for running and debugging DevTools:Workflow for making changes
- Change your local Flutter SDK to the latest flutter candidate branch:```dt update-flutter-sdk --update-on-path```Warning: this will delete any local changes in your Flutter SDK you checked out from git.- Create a branch from your cloned DevTools repo:```git checkout -b myBranch```- Ensure your branch, dependencies, and generated code are up-to-date:```dt sync```- Implement your changes, and commit to your branch:```git commit -m “description”```If your improvement is user-facing, [document it](packages/devtools_app/release_notes/README.md) in the same PR.- Push to your branch to GitHub:```git push origin myBranch```- Navigate to the [Pull Requests](https://github.com/flutter/devtools/pulls) tab in the main[DevTools repo](https://github.com/flutter/devtools).You should see a popup to create a pullrequest from the branch in your cloned repo to the DevTools `master` branch.Create a pull request.Keeping your fork in-sync
-If at any time you need to re-sync your branch, run:```dt sync```This will pull the latest code from the upstream DevTools, upgrade dependencies, and perform code generation.- If you want to upgrade dependencies and re-generate code (like mocks), but do not want to merge `upstream/master`, instead run```dt generate-code --upgrade```- To update DCM to the same version as on GitHub bots with apt-get or brew:- Locate, copy and run the `apt-get` command searching by searching for
"install dcm" in [build.yaml](https://github.com/flutter/devtools/blob/master/.github/workflows/build.yaml).- Using the DCM version you just copied in the previous step (without the `-1` suffix), install`dcm` using homebrew: `brew install cqlabs/dcm/dcm@<version on bots without -1>`You can check your local version to verify it matches the version in
[build.yaml](https://github.com/flutter/devtools/blob/master/.github/workflows/build.yaml): `dcm --version`.If the version of DCM used on the bots is outdated, consider contributing a
PR to update the version on the bots to the latest.Running and debugging DevToolsThere are a few different environments that you may need to run DevTools in.After running DevTools
in one of the environments below, connect to a test application to debug DevTools runtime tooling
(the majority of DevTools tools).See the
 section below.Frontend only (most common)
Most of the time, you will not need to run DevTools with the DevTools server to test your changes.You can run DevTools in debug mode as either a Flutter web or Flutter desktop app.Note: though DevTools is shipped as a Flutter Web app, we recommend developing as a Flutter
Desktop app whenever possible for a more efficient development workflow.Please see the
 section below for instructions.-To run DevTools as a Flutter web app from VS Code, run with the devtools (packages) configuration and the "Chrome" device-To run with experiments enabled, run from VS Code with the devtools + experiments (packages) configuration- To run DevTools as a Flutter web app from the command line, run `flutter run -d chrome`
-To run with experiments enabled, add the flag `--dart-define=enable_experiments=true`
Frontend + DevTools serverTo develop with a workflow that exercises the DevTools server <==>DevTools client connection,
you will need to perform the following set up steps (first time only).- Clone the [Dart SDK](https://github.com/dart-lang/sdk) fron GitHub.- The `LOCAL_DART_SDK` environment variable needs to point to this path: `export LOCAL_DART_SDK=/path/to/dart/sdk`If you are also developing server side code (e.g. the `devtools_shared` package), you will need to add adependency override to `sdk/pkg/dds/pubspec.yaml`.```
dependency_overrides:
  devtools_shared:
    path: relative/path/to/devtools/packages/devtools_shared```Then you can run DevTools with the server by running the following from anywhere under the `devtools/` directory:
-To run the DevTools web app in release mode, served with the DevTools server (this emulates the production environment):```dt serve```- To run the DevTools web app in debug mode, with full debugging support, and with a connection to a live DevTools server:```dt run```
Option 2 is useful for a quicker development cycle.The DevTools build time will be faster, and you will be
able to connect the DevTools web app to an IDE or another DevTools instance for debugging purposes.To see the full list of arguments available for either command, please pass the `-h` flag.DevTools + VS Code integration (IDE-embedded DevTools experience)To test the integration with VS Code, you can set up the Dart VS Code extension to run DevTools
and the server from your local source code.Follow the
 setup instructions above, and make sure
you have version v3.47 or newer of the Dart extension for VS Code.Open your VS Code settings (Run the Preferences: Open User Settings (JSON) command from the
command palette (`F1`)) and add the following to your settings:```
"dart.customDevTools": {
	"path": "/absolute/path/to/devtools",
	"env": {
		"LOCAL_DART_SDK": "/absolute/path/to/sdk"
		// Path to the Flutter SDK that will be used to build DevTools.This may
		// be the path to the included Flutter SDK under the tool/ directory or
		// the path to your local Flutter SDK git checkout."FLUTTER_ROOT": "/absolute/path/to/devtools/tool/flutter-sdk"
	},
	"args": [
		//Arguments that will be passed along to the `dt serve` command.
    ],
},```This instructs VS Code to run the `dt serve` command instead of running `dart devtools`.You must set the `LOCAL_DART_SDK` and `FLUTTER_ROOT` env variables correctly for the script to work.Next, restart VS Code (or run the Developer: Reload Window command from the command palette (`F1`))
and DevTools will be run from your local source code.After making any code changes to DevTools or the
server, you will need to re-run the Developer: Reload Window command to rebuild and restart the server.Testing for DevTools
Please see [TESTING.md](TESTING.md) for guidance on running and writing tests.Appendix
Connect DevTools to a test application
For working on most DevTools tools, a connection to a running Dart or Flutter app is required.Run any Dart or Flutter app of your choice to
connect it to DevTools.Consider running [veggieseasons](https://github.com/flutter/samples/tree/main/veggieseasons) or another Flutter sample since those apps have plenty of interesting
code to debug.- Run your Dart or Flutter app.Note: some DevTools features may be unavailable depending on the test app platform (Flutter native, Flutter web, Dart CLI, etc.) or run mode(debug, profile) you choose.- Copy the URI printed to the command line (you will use this URI to connect to DevTools).```"A Dart VM Service on iPhone 14 Pro Max is available at: <copy-this-uri>"```- Paste this URI into the connect dialog in DevTools and click "Connect".Running DevTools on Flutter DesktopFor a faster development cycle with hot reload, you can run DevTools on Flutter desktop.Some DevTools
features only work on the web, like the embedded Perfetto trace viewer, DevTools extensions, or WASM support,
but the limitations on the desktop app are few.To run DevTools with the desktop embedder, you can run `flutter run -d macos` from `devtools/packages/devtools_app`,
or you can run DevTools from your IDE with the `macOS` device selected.If this fails, you may need to run `flutter create .` from `devtools/packages/devtools_app` to generate
the updated files for your platform.If you want to run DevTools on Flutter desktop for Windows or Linux,
you will need to generate the files for this platform using the `flutter create .` command, and then run using
`flutter run -d <windows or linux>`.Enable and activate DCM (Dart Code Metrics)
Enabling and activating DCM is optional.When you open a PR, the CI bots will show you any DCM warnings introduced
by your change which should be fixed before submitting.- Contributors who work at Google: you can use the Google-purchased license key to activate DCM.See [go/dash-devexp-dcm-keys](http://goto.google.com/dash-devexp-dcm-keys).- All other contributors: please follow instructions at [https://dcm.dev/pricing/](https://dcm.dev/pricing/).You can either use the free tier of DCM, or purchase a team license.Note that the free tier doesn't support all the rules of the paid tier, so you will also need to consult the output of the  when you open your PR.To enable DCM:- Install the executable for your target platform.You can refer to [this guide](https://dcm.dev/docs/teams/getting-started/#installation).- [Get the license key](http://goto.google.com/dash-devexp-dcm-keys) and activate DCM.To do so, run `dcm activate --license-key=YOUR_KEY` from the console.- Install the extension for your IDE.If you use VS Code, you can get it from [the marketplace](https://marketplace.visualstudio.com/items?itemName=dcmdev.dcm-vscode-extension).If you use IntelliJ IDEA or Android Studio, you can find the plugin [here](https://plugins.jetbrains.com/plugin/20856-dcm).- Reload the IDE.Note:  DCM issues can be distinguished from the Dart analyzer issues by their name: DCM rule names containdashes `-` instead of underscores `_`.Some of the issues can be fixed via CLI; to do so, run `dcm fix` for
any directory.To apply `dcm fix` on a file save in the IDE, refer to
[this guide](https://dcm.dev/docs/teams/ide-integrations/vscode/#extension-capabilities).third_party dependenciesAll content not authored by the Flutter team (which includes both sponsored and open-source contributors)
must go in the `third_party` directory.As an expedient to make the `third_party` code works well with our
build scripts, code in `third_party` should be given a stub `pubspec.yaml` file so that you can reference
the resources from the packages directory from `packages/devtools_app/web/index.html`.

--------------------------------

raw HTML omitted 
HomeThis wiki is primarily aimed at engineers building or making contributions to DevTools.If you're looking to make a one-off contribution, please start with the [contributing guide](../CONTRIBUTING.md).

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

Chatting on Discord
 raw HTML omitted 
The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148).[This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH).Please do not share either link directly, instead share links to this page.The server is open to the public, though some channels are intended only for people who are actively contributing.See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there).We recommend you use the same display name on Discord and GitHub.(Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on.When in doubt, remember: our server has Dash as an icon!)Existing channelsWe have different channels for different purposes (this list is not exhaustive):
Channel
Description
Participants
#welcome
Welcome message.Only admins can post.raw HTML omitted Anyone can read.#announcements
Flutter announcements (e.g. breaking changes).Only team members can post (but not frequently).raw HTML omitted Anyone can read.#server-support
Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues.Anyone.#general
Chat about anything related to Flutter.Anyone.#help
People asking for our help.Anyone.#package-authorsFor people who develop Flutter packages.People writing packages for [pub.dev](https://pub.dev/).#dart
Questions about the Dart language.Anyone.#tree-status
Announcements about whether the trees are open or closed.Anyone, but discussion should happen elsewhere.#hackers
Chat about anything related to Flutter.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-*Chat specifically about foo, where foo is something to do with Flutter development, for example "engine", "framework", "desktop", "devtools", etc.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-dart
Questions about the Dart language.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-new
New people to the team and people who want to help them.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-triageFor use while triaging bugs.Flutter contributors.raw HTML omitted Anyone can watch.#hidden-chat
Chat about anything related to Flutter.Flutter contributors only.raw HTML omitted Not public.general (voice)
Talk (audio) about anything related to Flutter.Anyone.team (voice)
Talk (audio) that is only open to team members.Flutter contributors.The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the "team member" role to see them.New channelsIf you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support.If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads.If you would like a channel for subcommunities, e.g. #women or #china, that should be fine.(Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.)For practical reasons, we do not use Discord for chat groups limited to specific customers.For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord.Each channel describes its topic in the channel description.Please read the channel description before posting in a channel, to make sure you're using the appropriate one.Policies
Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter.The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing.If you want help with your app, ask in #help instead.If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md).See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the "team" role.Please don't direct-message people unless they are comfortable with it (ask publicly first).You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.Discord features
Threading
Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.StatusYou can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.Design documentsThis page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).

--------------------------------

For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine.However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as "contributor access", "being a member of the flutter-hackers group", "being a member of the Flutter team").We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter.Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.The possible criteria are:-You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)).(This is rare.)Being granted access means that you will be added to the "flutter-hackers" group on GitHub and the "team" role on Discord.This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md).A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues.We grant access optimistically based on a reasonably small volume of evidence of good faith.Correspondingly, we will remove access quickly if we find our trust has been violated.Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously.(Please read it, it's stricter than most.)Responsibilities
Code of conductIf you have commit access or "team" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).Our code of conduct is much, much stricter than most.We do not wait until someone has been actively rude or insulting.Being disrespectful in any way is grounds for action.For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct.If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day.When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.Most people react very positively to this.If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment.On Discord, this would be kicking them from the channel.Repeat offenders should be banned.On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this).Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.Maintaining documentation
Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.If you spot something wrong, please fix it!As a contributor, you have access to the wiki.Privileges
Being in the GitHub "flutter-hackers" group gives you the following:-The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).- PRs will run their tests slightly faster.Being in the Discord "team" group gives you the following:-The ability to talk without rate-limiting on the #hackers-* channels.- The ability to kick people.- The ability to manage the server emoji.ProcessThe actual process (as followed by Flutter repo admins) is as follows:- Verify that they qualify under all the terms described above.Make sure they have a sponsor who isn't you.- Verify the identity of the person making the request.Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.- Add them to our private spreadsheet (go/flutter-organization-members).- Click the "Add a member" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.- Type their name in the text field, select them, then click the "Invite" button.- Add them to the "team" group on Discord.Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!For new Googlers joining the team:You need to ask someone in the team to add you to get added.It's not an automatic process after you join the flutter Google group.InactivityWe occasionally check for account with commit access that have not been used for a while.It takes very little to count as "active" (e.g. commenting on an issue, even adding an emoji reaction to an issue).If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access.If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.Access rights to Flutter dashboardThe [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits.To see rerun tasks, you need to be added to an allowlist.Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored.To get access, ask on #hackers-infra to be added to the allowlist.Adding a contributor to Flutter DashboardThis is only for team members with access to the Flutter Dashboard Datastore.- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)- Click `Create Entity`- Click `Email: Empty` ->Edit property.Insert contributor Google account- Click `Create`Access to LUCI recipes and configuration repositoriesIf you need access to the LUCI recipes, you need to be added to the relevant ACLs.Ask in #hackers-infra to be added to the LUCI ACLs.Process
A Googler has to be the one to grant permission.Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)Access to Flutter GoldIf you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user.Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.ProcessThe list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5).Googlers can submit a change to add to the authorized users.This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)
fcontrib.org accountsIf you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account.Ping @Hixie or another admin in the #server-support channel on Discord.ProcessYou’ll need the user’s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin.To add a fcontrib.org participant:- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)- Under “Users” in the upper left of the main content area, click “Add a User” and follow the prompts.- For a password, choose “Generate Password” and email the password to the new account holder using their non-fcontrib account -- they’ll be able to log in with that and then choose a new password.Review teams
Some parts of the codebase have teams specified so that PRs get round-robin assigned for review.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).We currently have the following review teams:- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions.To create a new team, contact @Hixie.You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.Pusher permissions
Some branches are protected to avoid accidents.Only people in the specific branches can push to them.Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia

--------------------------------

To check out code to work on, please refer to [the GitHub Workflow Guide](./github-workflow.md).The full workflow for a pull request is documented here:- [Kubernetes-specific github workflow](pull-requests.md#the-testing-and-merge-workflow).That document is comprehensive and detailed, for purposes of a typical pull request we will cover the initial and simple use case here:

--------------------------------

title: "GitHub Workflow"
weight: 6
description: |
This document is an overview of the GitHub workflow used by the
Kubernetes project.It includes tips and suggestions on keeping your
local environment in sync with upstream and how to maintain good
commit hygiene.- Visit [https://github.com/kubernetes/kubernetes](https://github.com/kubernetes/kubernetes)- Click `Fork` button (top right) to establish a cloud-based fork.In your shell, define a local working directory as `working_dir`.```
export working_dir="${HOME}/src/k8s.io"# Change to your preferred location for source code```Set `user` to match your github profile name:```
export user=<your github profile name>```Both `$working_dir` and `$user` are mentioned in the figure above.Create your clone:```
mkdir -p $working_dir
cd $working_dir
git clone https://github.com/$user/kubernetes.git
# or: git clone git@github.com:$user/kubernetes.gitcd $working_dir/kubernetes
git remote add upstream https://github.com/kubernetes/kubernetes.git# or: git remote add upstream git@github.com:kubernetes/kubernetes.git# Never push to upstream master
git remote set-url --push upstream no_push# Confirm that your remotes make sense:
git remote -v```Get your local master up to date.Note that depending on which repository you are working from,
the default branch may be called "main" instead of "master".```
cd $working_dir/kubernetes
git fetch upstream
git checkout master
git rebase upstream/master```Create your new branch.```
git checkout -b myfeature```You may now edit files on the `myfeature` branch.Building KubernetesThis workflow is process-specific.For quick-start build instructions for [kubernetes/kubernetes](https://git.k8s.io/kubernetes), please [see here](/contributors/devel/development.md#building-kubernetes-on-a-local-osshell-environment).You will need to periodically fetch changes from the `upstream`
repository to keep your working branch in sync.Note that depending on which repository you are working from,
the default branch may be called 'main' instead of 'master'.Make sure your local repository is on your working branch and run the
following commands to keep it in sync:```
git fetch upstream
git rebase upstream/master```Please don't use `git pull` instead of the above `fetch` and
`rebase`.Since `git pull` executes a merge, it creates merge commits.These make the commit history messy
and violate the principle that commits ought to be individually understandable
and useful (see below).You might also consider changing your `.git/config` file via
`git config branch.autoSetupRebase always` to change the behavior of `git pull`, or another non-merge option such as `git pull --rebase`.You will probably want to regularly commit your changes.It is likely that you will go back and edit,
build, and test multiple times.After a few cycles of this, you might
[amend your previous commit](https://www.w3schools.com/git/git_amend.asp).```
git commit```When your changes are ready for review, push your working branch to
your fork on GitHub.```
git push -f <your_remote_name>myfeature```- Visit your fork at `https://github.com/<user>/kubernetes`- Click the Compare & Pull Request button next to your `myfeature` branch.- Check out the pull request [process](/contributors/guide/pull-requests.md) for more details and
advice.If you have upstream write access, please refrain from using the GitHub UI for
creating PRs, because GitHub will create the PR branch inside the main
repository rather than inside your fork.Once your pull request has been opened it will be assigned to one or more
reviewers.Those reviewers will do a thorough code review, looking for
correctness, bugs, opportunities for improvement, documentation and comments,
and style.Commit changes made in response to review comments to the same branch on your
fork.Very small PRs are easy to review.Very large PRs are very difficult to review.After a review, prepare your PR for merging by squashing your commits.All commits left on your branch after a review should represent meaningful milestones or units of work.Use commits to add clarity to the development and review process.Before merging a PR, squash the following kinds of commits:
- Fixes/review feedback- Typos- Merges and rebases- Work in progress
Aim to have every commit in a PR compile and pass tests independently if you can, but it's not a requirement.In particular, `merge` commits must be removed, as they will not pass tests.To squash your commits, perform an [interactive rebase](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History):
-Check your git branch:```git status```The output should be similar to this:```
On branch your-contribution
Your branch is up to date with 'origin/your-contribution'.```- Start an interactive rebase using a specific commit hash, or count backwards from your last commit using `HEAD~<n>`, where `<n>` represents the number of commits to include in the rebase.```git rebase -i HEAD~3```The output should be similar to this:```
pick 2ebe926 Original commit
pick 31f33e9Address feedback
pick b0315fe Second unit of work# Rebase 7c34fc9..b0315ff onto 7c34fc9 (3 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message...```- Use a command line text editor to change the word `pick` to `squash` for the commits you want to squash, then save your changes and continue the rebase:```pick 2ebe926Original commit
squash 31f33e9Address feedback
pick b0315fe Second unit of work...```The output after saving changes should look similar to this:```
[detached HEAD 61fdded] Second unit of work
 Date: Thu Mar 5 19:01:32 2020 +0100
 2 files changed, 15 insertions(+), 1 deletion(-)...Successfully rebased and updated refs/heads/master.```- Force push your changes to your remote branch:```git push --force-with-lease```For mass automated fixups such as automated doc formatting, use one or more
commits for the changes to tooling and a final commit to apply the fixup en
masse.This makes reviews easier.An alternative to this manual squashing process is to use the Prow and Tide based automation that is configured in GitHub: adding a comment to your PR with `/label tide/merge-method-squash` will trigger the automation so that GitHub squash your commits onto the target branch once the PR is approved.Using this approach simplifies things for those less familiar with Git, but there are situations in where it's better to squash locally; reviewers will have this in mind and can ask for manual squashing to be done.By squashing locally, you control the commit message(s) for your work, and can separate a large PR into logically separate changes.For example: you have a pull request that is code complete and has 24 commits.You rebase this against the same merge base, simplifying the change to two commits.Each of those two commits represents a single logical change and each commit message summarizes what changes.Reviewers see that the set of changes are now understandable, and approve your PR.Merging a commitOnce you've received review and approval, your commits are squashed, your PR is ready for merging.Merging happens automatically after both a Reviewer and Approver have approved the PR.If you haven't squashed your commits, they may ask you to do so before approving a PR.Reverting a commitIn case you wish to revert a commit, use the following instructions.If you have upstream write access, please refrain from using the
`Revert` button in the GitHub UI for creating the PR, because GitHub
will create the PR branch inside the main repository rather than inside your fork.- Create a branch and sync it with upstream.Note that depending on which repository you are working from, the default branch may be called 'main' instead of 'master'.```# create a branch
git checkout -b myrevert# sync the branch with upstream
git fetch upstream
git rebase upstream/master```- If the commit you wish to revert is a merge commit, use this command:```# SHA is the hash of the merge commit you wish to revert
git revert -m 1 <SHA>```If it is a single commit, use this command:```
# SHA is the hash of the single commit you wish to revert
git revert <SHA>```- This will create a new commit reverting the changes.Push this new commit to your remote.```git push <your_remote_name>myrevert```- Finally,  using this branch.

--------------------------------

title: "Pull Request Process"
weight: 5
description: |
Explains the process and best practices for submitting a pull request
to the Kubernetes project and its associated sub-repositories.It should serve
as a reference for all contributors, and be useful especially to new or
infrequent submitters.This doc explains the process and best practices for submitting a pull request to the [Kubernetes project](https://github.com/kubernetes/kubernetes) and its associated sub-repositories.It should serve as a reference for all contributors, and be useful especially to new and infrequent submitters.- -- -------- -------------- -Before You Submit a Pull RequestThis guide is for contributors who already have a pull request to submit.If you're looking for information on setting up your developer environment and creating code to contribute to Kubernetes, see the [development guide](/contributors/devel/development.md).First-time contributors should head to the [Contributor Guide](/contributors/guide/README.md) to get started.Make sure your pull request adheres to our best practices.These include following project conventions, making small pull requests, and commenting thoroughly.Please read the more detailed section on  at the end of this doc.Run Local VerificationsYou can run these local verifications before you submit your pull request to predict the pass or fail of continuous integration.- Run and pass `make verify` (can take 30-40 minutes)- Run and pass `make test`- Run and pass `make test-integration`The Pull Request Submit Process
Merging a pull request requires the following steps to be completed before the pull request will be merged automatically.- [Open a pull request](https://help.github.com/articles/about-pull-requests/)
-For kubernetes/kubernetes repository only: Add [release notes](/contributors/guide/release-notes.md) if needed.- Follow the EasyCLA steps to [sign the CLA](https://git.k8s.io/community/CLA.md) (prerequisite)- Pass all e2e tests- Get all necessary approvals from reviewers and code ownersMarking Unfinished Pull RequestsIf you want to solicit reviews before the implementation of your pull request is complete, you should hold your pull request to ensure that Tide does not pick it up and attempt to merge it.There are two methods to achieve this:-You may add the `/hold` or `/hold cancel` comment commands- You may add or remove a `WIP` or `[WIP]` prefix to your pull request titleThe GitHub robots will add and remove the `do-not-merge/hold` label as you use the comment commands and the `do-not-merge/work-in-progress` label as you edit your title.While either label is present, your pull request will not be considered for merging.Pull Requests and the Release Cycle
If a pull request has been reviewed but held or not approved, it might be due to the current phase in the [Release Cycle](/contributors/devel/sig-release/release.md).Occasionally, a SIG may freeze their own code base when working towards a specific feature or goal that could impact other development.During this time, your pull request could remain unmerged while their release work is completed.If you feel your pull request is in this state, contact the appropriate [SIG](https://git.k8s.io/community/sig-list.md) or [SIG-Release](https://git.k8s.io/sig-release) for clarification.Check the  at the end of this document if you're interested in the details on how exactly the automation processes pull requests.Comment Commands Reference[The commands doc](https://go.k8s.io/bot-commands) contains a reference for all comment commands.Automation
The Kubernetes developer community uses a variety of automation to manage pull requests.This automation is described in detail [in the automation doc](/contributors/devel/automation.md).How the e2e Tests Work
The end-to-end tests will post the status results to the pull request.If an e2e test fails, `@k8s-ci-robot` will comment on the pull request with the test history and the comment-command to re-run that test.e.g.The following tests failed, say /retest to rerun them all.Why was my pull request closed?Pull requests older than 90 days will be closed.Exceptions can be made for pull requests that have active review comments, or that are awaiting other dependent pull requests.Closed pull requests are easy to recreate, and little work is lost by closing a pull request that subsequently needs to be reopened.We want to limit the total number of pull requests in flight to:- Maintain a clean project- Remove old pull requests that would be difficult to rebase as the underlying code has changed over time- Encourage code velocityWhy is my pull request not getting reviewed?A few factors affect how long your pull request might wait for review.If it's the last few weeks of a milestone, we need to reduce churn and stabilize.Or, it could be related to best practices.One common issue is that the pull request is too big to review.Let's say you've touched 39 files and have 8657 insertions.When your would-be reviewers pull up the diffs, they run away - this pull request is going to take 4 hours to review and they don't have 4 hours right now.They'll get to it later, just as soon as they have more free time (ha!).There is a detailed rundown of best practices, including how to avoid too-lengthy pull requests, in the next section.But, if you've already followed the best practices and you still aren't getting any pull request love, here are some things you can do to move the process along:-Make sure that your pull request has an assigned reviewer (assignee in GitHub).If not, reply to the pull request comment stream asking for a reviewer to be assigned.This is done via a [bot command](https://prow.k8s.io/command-help) (the bot may have suggestions for this) and looks like this: `/assign @username`.- Ping the assignee (@username) on the pull request comment stream, and ask for an estimate of when they can get to the review.- Ping the assignee on [Slack](http://slack.kubernetes.io).Remember that a person's GitHub username might not be the same as their Slack username.- Ping the assignee by email (many of us have publicly available email addresses).- If you're a member of the organization ping the [team](https://github.com/orgs/kubernetes/teams) (via @team-name) that works in the area you're submitting code to.- If you have fixed all the issues from a review, and you haven't heard back, you should ping the assignee on the comment stream with a "please take another look" (`PTAL`) or similar comment indicating that you are ready for another review.- If you still don't hear back, post a link to the pull request in the `#pr-reviews` channel on Slack to find additional reviewers.Read on to learn more about how to get faster reviews by following best practices.Best Practices for Faster Reviews
Most of this section is not specific to Kubernetes, but it's good to keep these best practices in mind when you're making a pull request.You've just had a brilliant idea on how to make Kubernetes better.Let's call that idea Feature-X.Feature-X is not even that complicated.You have a pretty good idea of how to implement it.You jump in and implement it, fixing a bunch of stuff along the way.You send your pull request - this is awesome!And it sits.And sits.A week goes by and nobody reviews it.Finally, someone offers a few comments, which you fix up and wait for more review.And you wait.Another week or two go by.This is horrible.Let's talk about best practices so your pull request gets reviewed quickly.Familiarize yourself with project conventions- [Development guide](/contributors/devel/development.md)- [Coding conventions](../guide/coding-conventions.md)- [API conventions](/contributors/devel/sig-architecture/api-conventions.md)- [Kubectl conventions](/contributors/devel/sig-cli/kubectl-conventions.md)Is the feature wanted?File a Kubernetes Enhancement ProposalAre you sure Feature-X is something the Kubernetes team wants or will accept?Is it implemented to fit with other changes in flight?Are you willing to bet a few days or weeks of work on it?It's better to get confirmation beforehand.When you want to make a large or otherwise significant change, you should follow the [Kubernetes Enhancement Proposal process](https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/0000-kep-process/README.md).Even for small changes, it is often a good idea to gather feedback on an issue you filed, or even simply ask in the appropriate SIG's Slack channel to invite discussion and feedback from code owners.Here's a [list of SIGs](/sig-list.md), this includes their public meetings.KISS, YAGNI, MVP, etc.Sometimes we need to remind each other of core tenets of software design - Keep It Simple, You Aren't Gonna Need It, Minimum Viable Product, and so on.Adding a feature "because we might need it later" is antithetical to software that ships.Add the things you need NOW and (ideally) leave room for things you might need
later - but don't implement them now.Smaller Is Better: Small Commits, Small Pull Requests
Small commits and small pull requests get reviewed faster and are more likely to be correct than big ones.Attention is a scarce resource.If your pull request takes 60 minutes to review, the reviewer's eye for detail is not as keen in the last 30 minutes as it was in the first.It might not get reviewed at all if it requires a large continuous block of time from the reviewer.Breaking up commits
Break up your pull request into multiple commits, at logical break points.Making a series of discrete commits is a powerful way to express the evolution of an idea or the different ideas that make up a single feature.Strive to group logically distinct ideas into separate commits.For example, if you found that Feature-X needed some prefactoring to fit in, make a commit that JUST does that prefactoring.Then make a new commit for Feature-X.Strike a balance with the number of commits.A pull request with 25 commits is still very cumbersome to review, so use your best judgment.Breaking up Pull RequestsOr, going back to our prefactoring example, you could also fork a new branch, do the prefactoring there and send a pull request for that.If you can extract whole ideas from your pull request and send those as pull requests of their own, you can avoid the painful problem of continually rebasing.Kubernetes is a fast-moving codebase - lock in your changes ASAP with your small pull request, and make merges be someone else's problem.Multiple small pull requests are often better than multiple commits.Don't worry about flooding us with pull requests.We'd rather have 100 small,obvious pull requests than 10 unreviewable monoliths.We want every pull request to be useful on its own, so use your best judgment on what should be a pull request vs.a commit.As a rule of thumb, if your pull request is directly related to Feature-X and nothing else, it should probably be part of the Feature-X pull request.If you can explain why you are doing seemingly no-op work ("it makes the Feature-X change easier, I promise") we'll probably be OK with it.If you can imagine someone finding value independently of Feature-X, try it as a pull request.(Do not link pull requests by `#` in a commit description, because GitHub creates lots of spam.Instead, reference other pull requests via the pull request your commit is in.)Open a Different Pull Request for Fixes and Generic FeaturesPut changes that are unrelated to your feature into a different pull request.Often, as you are implementing Feature-X, you will find bad comments, poorly named functions, bad structure, weak type-safety, etc.You absolutely should fix those things (or at least file issues, please) - but not in the same pull request as your feature.Otherwise, your diff will have way too many changes, and your reviewer won't see the forest for the trees.Look for opportunities to pull out generic features.For example, if you find yourself touching a lot of modules, think about the dependencies you are introducing between packages.Can some of what you're doing be made more generic and moved up and out of the Feature-X package?Do you need to use a function or type from an otherwise unrelated package?If so, promote!We have places for hosting more generic code.Likewise, if Feature-X is similar in form to Feature-W which was checked in last month, and you're duplicating some tricky stuff from Feature-W, consider prefactoring the core logic out and using it in both Feature-W and
Feature-X.(Do that in its own commit or pull request, please.)Don't Open Pull RequestsThat Span the Whole Repository
Often a new contributor will find some problem that exists in many places across the main`kubernetes/kubernetes` repository, and file a PR to fix it everywhere at once.Maybe
there's a cool new function in the latest golang release that everyone ought to be using,
or a recently-deprecated function that ought to be replaced with calls to its replacement.Sometimes a contributor will run a linter or security scanner across the code to find
problems, or fix a particular spelling mistake in comments or variable names.(It's
"deprecated", not "depreciated"!)The problem with this approach is that different parts of `kubernetes/kubernetes` are
maintained by different SIGs, and so changes to those different parts require approvals
from different people.A PR containing 20 one-line changes scattered across the repository
could end up needing 5 or 10 approvals or more before it can be merged.(While there are a
handful of people who can approve changes across large portions of the repository, those
are generally the people who are the most busy and hardest to get reviews from, especially
when you're a new contributor with no connections within the community yet.)If you really want to try to get such a PR merged, your best bet is to break up the PR
into separate PRs for each SIG whose code it touches.You can look at the `OWNERS` files
in a directory (or its parent directory) to see who owns that code, and then group the
changes together accordingly (e.g., with one PR touching files in `cmd/kube-proxy` and
`pkg/util/iptables`, which are owned by SIG Network, and another PR touching files in
`pkg/kubelet` and `pkg/controller/nodelifecycle`, which are owned by SIG Node.)Comments MatterIn your code, if someone might not understand why you did something (or you won't remember why later), comment it.Many code-review comments are about this exact issue.If you think there's something pretty obvious that we could follow up on, add a TODO.Read up on [GoDoc](https://blog.golang.org/godoc-documenting-go-code) - follow those general rules for comments.Test
Nothing is more frustrating than starting a review, only to find that the tests are inadequate or absent.Very few pull requests can touch the code and NOT touch tests.If you don't know how to test Feature-X, please ask!We'll be happy to help you design things for easy testing or to suggest appropriate test cases.Squashing
Your reviewer has finally sent you feedback on Feature-X.Make the fixups, and don't squash yet.Put them in a new commit, and re-push.That way your reviewer can look at the new commit on its own, which is much faster than starting over.We might still ask you to clean up your commits at the very end for the sake of a more readable history, but don't do this until asked: typically at the point where the pull request would otherwise be tagged `LGTM`.Each commit should have a good title line (<70 characters) and include an additional description paragraph describing in more detail the change intended.For more information, see [squash commits](./github-workflow.md#squash-commits).General squashing guidelines:
- Sausage =>squashDo squash when there are several commits to fix bugs in the original commit(s), address reviewer feedback, etc.Really we only want to see the end state, and commit message for the whole pull request.- Layers => don't squashDon't squash when there are independent changes layered to achieve a single goal.For instance, writing a code munger could be one commit, applying it could be another, and adding a precommit check could be a third.One could argue they should be separate pull requests, but there's really no way to test/review the munger without seeing it applied, and there needs to be a precommit check to ensure the munged output doesn't immediately get out of date.Note: you can also use the `tide/merge-method-squash` label on your PR to let the bot handle squashing
all commits, which can be done by commenting `/label tide/merge-method-squash`.As opposed to squashing by hand, this will prevent removal of the `lgtm` label (if already applied) and re-run of the CI tests.Although,
if this label is used, please know the following:
- All commit messages will be squashed and combined and the final commit message will be a combination of allcommit messages according to how GitHub generates the [message for a squash merge](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#merge-message-for-a-squash-merge), for example, if this is the lifecycle of your PR:```
# commit 1
Original commit msgSome useful information
Some more useful information``````
# commit 2
Address review comments``````
# commit 3
Fix test```After applying the label, if the PR is merged, the final commit message will end up being:```
Title of your PR (#PR-number)* Original commit msgSome useful informationSome more useful information* Address review comments* Fix test```Since commit messages are meant to be a record of the "why" and "what" of your changes, having
messages like "Address review comments" in the final commit message adds no real value in terms
of communicating the "what"s and "why"s of your change.Please see  for more details on writing better commit messages.Using this label can help when squashing by hand is considered too challenging or not worth the
extra effort.It can also speed up merging because squashing by hand implies getting another LGTM
from a reviewer and re-run of the CI tests.Commit Message Guidelines
PR comments are not represented in the commit history.Commits and their commit messages are the "permanent record" of the changes being done in your PR and their commit messages should accurately describe both what and why it is being done.Commit messages are comprised of two parts; the subject and the body.The subject is the first line of the commit message and is often the only part
that is needed for small or trivial changes.Those may be done as "one liners" with the `git commit -m` or the `--message` flag, but only if the what and especially why can be fully described in that few words.The commit message body is the portion of text below the subject when you run
`git commit` without the `-m` flag which will open the commit message for editing
in your [preferred editor](https://help.github.com/en/github/using-git/associating-text-editors-with-git).Typing a few further sentences of clarification is a useful investment in time both for your reviews and overall later project maintenance.```
This is the commit message subjectAny text here is the commit message body
Some text
Some more text
...# Please enter the commit message for your changes.Lines starting# with '#' will be ignored, and an empty message aborts the commit.#
#On branch example
# Changes to be committed:
#   ...
#```Use these guidelines below to help craft a well formatted commit message.These can be largely attributed to the previous work of [Chris Beams](https://chris.beams.io/), [Tim Pope](https://tpo.pe/),
[Scott Chacon](https://scottchacon.com/) and [Ben Straub](https://ben.straub.cc/).--------
 raw HTML omitted 
Try to keep the subject line to 50 characters or less; do not exceed 72 charactersThe 50 character limit for the commit message subject line acts as a focus to
keep the message summary as concise as possible.It should be just enough to describe what is being done.The hard limit of 72 characters is to align with the max body size.When viewing the history of a repository with `git log`, git will pad the body text with additional blank spaces.Wrapping the width at 72 characters ensures the body text will be centered and easily viewable on an 80-column terminal.raw HTML omitted 
Providing additional contextYou can provide additional context with fewer characters by prefixing your
commit message with the [kind](https://github.com/kubernetes/kubernetes/labels?q=kind) or [area](https://github.com/kubernetes/kubernetes/labels?q=area) that your PR is impacting.These are commonly used labels that other members of the Kubernetes community will
understand.Examples:
- `cleanup: remove unused portion of script foo`- `deprecation: add notice for bar feature removal in future release`- `etcd: update default server to 3.4.7`- `kube-proxy: add a test case for HostnameOverride`These can serve as a good subject before expanding further on the what and whywithin the commit message body.raw HTML omittedThe first word in the commit message subject should be capitalized unless it starts with a lowercase symbol or other identifierThe commit message subject is like an abbreviated sentence.The first word should be capitalized unless the message begins with symbol, acronym or other identifier such as [kind](https://github.com/kubernetes/kubernetes/labels?q=kind) or [area](https://github.com/kubernetes/kubernetes/labels?q=area) that would regularly be lowercase.raw HTML omittedDo not end the commit message subject with a periodThis is primary intended to serve as a space saving measure, but also aids in
driving the subject line to be as short and concise as possible.raw HTML omittedUse imperative mood in your commit message subject
Imperative mood can be be thought of as a "giving a command"; it is a
present-tense statement that explicitly describes what is being done.Good Examples:
- Fix x error in y- Add foo to bar- Revert commit "baz"- Update pull request guidelines
Bad Examples- Fixed x error in y- Added foo to bar- Reverting bad commit "baz"- Updating the pull request guidelines- Fixing more things
A general guideline from [Chris Beams](https://chris.beams.io/) on forming an imperative commit subjectis it should complete this sentence:```
If applied, this commit will <your subject line here>```Examples:
- If applied, this commit will Fix x error in y- If applied, this commit will Add foo to bar- If applied, this commit will Revert commit "baz"- If applied, this commit will Update the pull request guidelines
 raw HTML omitted 
Add a single blank line before the commit message bodyGit uses the blank line to determine which portion of the commit message is the
subject and body.Text preceding the blank line is the subject, and text following is considered the body.raw HTML omitted 
Wrap the commit message body at 72 charactersThe default column width for git is 80 characters.Git will pad the text of the message body with an additional 4 spaces when viewing the git log.This would leave you with 76 available spaces for text, however the text would be "lop-sided".To center the text for better viewing, the other side is artificially padded
with the same amount of spaces, resulting in 72 usable characters per line.Think of them as the margins in a word doc.raw HTML omittedDo not use GitHub keywords or (@)mentions within your commit message
 raw HTML omitted 
GitHub Keywords
Using [GitHub keywords](https://help.github.com/articles/closing-issues-using-keywords) followed by a `#<issue number>` reference within your
commit message will automatically apply the `do-not-merge/invalid-commit-message`
label to your PR preventing it from being merged.[GitHub keywords](https://help.github.com/articles/closing-issues-using-keywords) in a PR to close issues is considered a convenience item, but
can have unexpected side-effects when used in a commit message; often closing something they shouldn't.Blocked Keywords:
- close- closes- closed- fix- fixes- fixed- resolve- resolves- resolved
 raw HTML omitted 
(@)Mentions

(@)mentions within the commit message will send a notification to that user, and
will continually do so each time the PR is updated.raw HTML omittedUse the commit message body to explain the what and why of the commit
Commits and their commit messages are the "permanent record" of the changes
being done in your PR.Describing why something has changed and what effects it may have.You are providing context to both your reviewer and the next person that has to touch your code.If something is resolving a bug, or is in response to a specific issue, you can
link to it as a reference with the message body itself.These sorts of breadcrumbs become essential when tracking down future bugs or regressions and further help explain the "why" the commit was made.Additional Resources:
- [How to Write a Git Commit Message - Chris Beams](https://chris.beams.io/posts/git-commit/)- [Distributed Git - Contributing to a Project (Commit Guidelines)](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project)- [What’s with the 50/72 rule?- Preslav Rachev](https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/)- [A Note About Git Commit Messages - Tim Pope](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)It's OK to Push BackSometimes reviewers make mistakes.It's OK to push back on changes your reviewer requested.If you have a good reason for doing something a certain way, you are absolutely allowed to debate the merits of a requested change.Both the reviewer and reviewee should strive to discuss these issues in a polite and respectful manner.You might be overruled, but you might also prevail.We're pretty reasonable people.Another phenomenon of open-source projects (where anyone can comment on any issue)
is the dog-pile - your pull request gets so many comments from so many people it
becomes hard to follow.In this situation, you can ask the primary reviewer (assignee) whether they want you to fork a new pull request to clear out all the comments.You don't HAVE to fix every issue raised by every person who feels like commenting, but you should answer reasonable comments with an explanation.Common Sense and CourtesyNo document can take the place of common sense and good taste.Use your best judgment, while you put a bit of thought into how your work can be made easier to review.If you do these things your pull requests will get merged with less friction.Trivial Edits
Each incoming Pull Request needs to be reviewed, checked, and then merged.While automation helps with this, each contribution also has an engineering cost.Therefore it is appreciated if you do NOT make trivial edits and fixes, but
instead focus on giving the entire file a review.If you find one grammatical or spelling error, it is likely there are more in
that file, you can really make your Pull Request count by checking the formatting,
checking for broken links, and fixing errors and then submitting all the fixes
at once to that file.Some questions to consider:
- Can the file be improved further?- Does the trivial edit greatly improve the quality of the content?Fixing linter issuesKubernetes has a set of linter checks.Some of those must pass in the entire
code base, some must pass in new or modified code, and some are merely hints
to developers how to improve their code.Please do not create Pull Requests for issues found by linters without first
reaching out to maintainers on the `#code-organization`
[Slack](http://slack.kubernetes.io) channel to determine whether there is
sufficient interest in fixing such issues.When it was discussed, make sure to include people who gave the preliminary
approval of this work as well as the link to the discussion on Slack or GitHub
issue into the PR description.This is a good example to follow:
/area code-organizationThis PR fixes linter rules discussed in the Slack [https://kubernetes.slack.com/archives/Foo/Bar](https://kubernetes.slack.com/archives/Foo/Bar).Preliminary agreement to address those issues were given by @GHHandle1 and @GHHandle2./assign @GHHandle1
/assign @GHHandle2This PR fixes issues in the package:
pkg/kubelet
Related PRs for other packages:
- github.com/link-to-other-PR1- github.com/link-to-other-PR2It does not matter whether the linter is enabled in Kubernetes or not:-If a linter is enabled in[golangci.yaml](https://github.com/kubernetes/kubernetes/blob/master/hack/golangci.yaml),then it has already been determined that sweeping changes in the existing
code aren't necessary or just are not worth the cost (e.g. causing rebases of other
Pull Requests or obscuring authorship).- If a linter is not enabled, then it might not be important enough.- If the check is performed by third party tools which are not integrated in
the Kubernetes CI or proprietary, file a bug or start a discussion about it first.Such Pull Requests are often large and thus hard to review.When the linter
enforces some opinion or policy, then this is not necessarily something that
applies to Kubernetes.Kubernetes uses the formatting rules enforced by Go.
Stricter rules like specific usage of
[whitespace](https://golangci-lint.run/usage/linters/#whitespace) or using
[standard library constants](https://golangci-lint.run/usage/linters/#usestdlibvars)
are opinionated and not worth the cost of introducing them now.Linters worth considering are those which actually improve code correctness,
for example by warning about suspicious code like calling a function and then
not checking the error result.The Testing and Merge Workflow
The Kubernetes merge workflow uses labels, applied by [commands](https://prow.k8s.io/command-help) via comments.These will trigger actions on your pull request.Different Kubernetes repositories may require different labels on the path to approval.A generic explanation of how labels are used in pull requests can be found [here](/contributors/guide/owners.md#code-review-using-owners-files).The pull request bot will also automatically apply and/or suggest labels.Example: To apply a SIG label, you would type in a comment:```
/sig apps```NOTE: For pull requests that are in progress but not ready for review,
prefix the pull request title with `WIP` or `[WIP]` and track any remaining TODOs
in a checklist in the pull request description.Here's the process the pull request goes through on its way from submission to merging:
- Make the pull request- `@k8s-ci-robot` assigns reviewers- If you're not a member of the Kubernetes organization, a Reviewer/Kubernetes Member checks that the pull request is safe to test.If so, they comment `/ok-to-test`.Pull requests by Kubernetes organization [members](/community-membership.md) do not need this step.Now the pull request is considered to be trusted, and the pre-submit tests will run:
- Automatic tests run.See the current list of tests at this [link](https://prow.k8s.io/?repo=kubernetes%2Fkubernetes&type=presubmit)- If tests fail, resolve issues by pushing edits to your pull request branch- If the failure is a flake, anyone on trusted pull requests can comment `/retest` to rerun failed tests- Reviewer suggests edits- Push edits to your pull request branch- Repeat the prior two steps as needed until the reviewer(s) add `/lgtm` label.The `/lgtm` label, when applied by someone listed as a `reviewer` in the corresponding project `OWNERS` file, is a signal that the code has passed review from one or more trusted reviewers for that project- (Optional) Some reviewers prefer that you squash commits at this step- Follow the bot suggestions to assign an OWNER who will add the `/approve` label to the pull request.The `/approve` label, when applied by someone listed as an `approver` in the corresponding project `OWNERS`, is a signal that the code has passed final review and is ready to be automatically mergedThe behavior of Prow is configurable across projects.You should be aware of the following configurable behaviors.-If you are listed as an `/approver` in the `OWNERS` file, an implicit `/approve` can be applied to your pull request.This can result in a merge being triggered by a `/lgtm` label.This is the configured behavior in many projects, including `kubernetes/kubernetes`.You can remove the implicit `/approve` with `/approve cancel`- `/lgtm` can be configured so that from someone listed as both a `reviewer` and an `approver` will cause both labels to be applied.For `kubernetes/kubernetes` and many other projects this is not the default behavior, and `/lgtm` is decoupled from `/approve`Once the tests pass, and the reviewer adds the `lgtm` and `approved` labels, the pull request enters the final merge pool.The merge pool is needed to make sure no incompatible changes have been introduced by other pull requests since the tests were last run on your pull request.raw HTML omitted 
[Tide](https://sigs.k8s.io/prow/cmd/tide) will manage the merge pool
automatically.It uses GitHub queries to select PRs into “tide pools”,
runs as many in a batch as it can (“tide comes in”), and merges them (“tide goes out”).-The pull request enters the [merge pool](https://prow.k8s.io/tide)if the merge criteria are met.The [PR dashboard](https://prow.k8s.io/pr) showsthe difference between your PR's state and the merge criteria so that you can
easily see all criteria that are not being met and address them.- If tests fail, resolve issues by pushing edits to your pull request branch- If the failure is a flake, anyone can comment `/retest` if the pull request is trusted- If tests pass, Tide automatically merges the pull requestThat's the last step.Your pull request is now merged.More About `Ok-To-Test`
-The ok-to-test label is applied by org members to PRs from external contributors, it signals that the PR can be tested.- For a Contributor, an `ok-to-test` label means the regular CI tests will be run for their PR.- For the reviewer or the member, labelling the PR with `ok-to-test` it means a lot more:
-They need to take care if the PR is not a wastage of our `CI/CD` resources.- Is the PR worth testing or does it need more changes before going through the `CI/CD` process?- Is the PR getting used to run malicious code to misuse our resources ?- An `ok-to-test` label may reduce the workload and smoothens the contributors experience as they can know if there is any failing test.If there is, you can fix the test and they don't have to wait for a long time to get a review from `maintainer/assignee`.- There are various other factors on which labelling of `ok-to-test` depends :
- Size of PR :
-If the PR is of `size/S` or `size/M` which is just to fix a grammatical error or spelling mistake, the reviewer can trigger the `CI/CD` without having a second thought.- If the PR is of `size/XXL` which aims at adding a new feature, a new API endpoint or any new substantial feature.There needs to other conventions & process to be followed regarding the change made.Hence, it may have a slight delay to get labelled with `ok-to-test`.- Other org members who are not assigned to the following PR may also label `ok-to-test` , if the change is small.- If the PR is labelled with `cncf-cla: no`, then it is better to wait before labelling `ok-to-test`.- PRs with tag `do-not-merge/hold` or `needs-rebase` should make the appropriate changes before the PR can be labelled `ok-to-test`.- PRs created by mistake without to meaningful change of code should not be labelled `ok-to-test` and closed.

--------------------------------

raw HTML omitted 
Contributing to Flutter
tl;dr: join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.WelcomeWe invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!There are many ways to contribute, including writing code, filing issues on GitHub, helping people
on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
fix bugs that people have filed, adding to our documentation,
doing outreach about Flutter, or helping out in any other way.We grant commit access (which includes full rights to the issue
database, such as being able to edit labels) to people who have gained
our trust and demonstrated a commitment to Flutter.For more details
see the [Contributor access](./docs/contributing/Contributor-access.md)
page in our docs.We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md).Before you get started, we encourage you to read these documents which describe some of our community norms:- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.This
also documents our conflict resolution policy and encourages people
to ask questions.- [Values](./docs/about/Values.md),
THIS IS END BLOCK MARKER.which talks about what we care most about.Helping out in the issue database
Triage is the process of going through bug reports and determining if they are valid, finding out
how to reproduce them, catching duplicate reports, and generally making our issues list
useful for our engineers.If you want to help us triage, you are very welcome to do so!- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitlythat everyone must be gracious, respectful, and professional.If you're helping out
with triage, you are representing the Flutter team, and so you want to make sure to
make a good impression!-Help out as described in our [triage guide](./docs/triage/README.md)You won't be able to add labels at first, so instead start by trying to
do the other steps, e.g. trying to reproduce the problem and asking for people to
provide enough details that you can reproduce the problem, pointing out duplicates,
and so on.Chat on the #hackers-triage channel to let us know what you're up to!- Familiarize yourself with our[issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page,
which covers the meanings of some important GitHub labels and
milestones.-Once you've been doing this for a while, someone will invite you to the flutter-hackersteam on GitHub and you'll be able to add labels too.See the
[contributor access](./docs/contributing/Contributor-access.md) wiki
page for details.Quality AssuranceOne of the most useful tasks, closely related to triage, is finding and filing bug reports.Testing
beta releases, looking for regressions, creating test cases, adding to our test suites, and
other work along these lines can really drive the quality of the product up.Creating tests
that increase our test coverage, writing tests for issues others have filed, all these tasks
are really valuable contributions to open source projects.If this interests you, you can jump in and submit bug reports without needing anyone's permission!The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md)
is a good place to talk about what you're doing.We're especially eager for QA testing when
we announce a beta release.See [quality assurance](./docs/releases/Quality-Assurance.md) for
more details.If you want to contribute test cases, you can also submit PRs.See the next section
for how to set up your development environment, or ask in #hackers-test on Discord.As a personal side note, this is exactly the kind of work that first got me into open
source.I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
browsers, long before I wrote a line of code for any open source project.—Hixie
Developing for FlutterIf you prefer to write code, consider starting with the list of good
first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue).Reference the respective sections below for further instructions.Framework and EngineTo develop for Flutter, you will eventually need to become familiar
with our processes and conventions.This section lists the documents
that describe these methodologies.The following list is ordered: you
are strongly recommended to go through these documents in the order
presented.- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's engine.If you only want to write code for the
Flutter framework, you can skip this step.Flutter's engine mainly
uses C++, Java, and Objective-C.- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md),which describes the steps you need to configure your computer to
work on Flutter's framework.Flutter's framework mainly uses Dart.- [Tree hygiene](./docs/contributing/Tree-hygiene.md),which covers how to land a PR, how to do code review, how to
handle breaking changes, how to handle regressions, and how to
handle post-commit test failures.- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md),which includes advice for designing APIs for Flutter, and how to
format code in the framework.- [Flutter design doc template](https://flutter.dev/go/template),which should be used when proposing a new technical design.This is a good
practice to do before coding more intricate changes.See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).
[](https://www.youtube.com/watch?v=4yBgOBAOx_A)In addition to the documents, there is a video linked above on How to contribute to Flutter
from the [Flutter](https://youtube.com/c/flutterdev)YouTube channel,
there are many pages in [our docs](./docs/README.md),
and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b)
on Medium that may be of interest.For a curated list of pages see the sidebar
on the wiki's home page.They are more or less listed in order of importance.DevTools
Contributing code to Dart & Flutter DevTools may be a good place to start if you are
looking to dip your toes into contributing with a relatively low-cost setup or if you
are generally excited about improving the Dart & Flutter developer experience.Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)
guide to get started.Helping with existing PRsOnce you've learned the process of contributing, if you aren't sure what to work on next you
might be interested in helping other developers complete their contributions by picking up an
incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).OutreachIf your interests lie in the direction of developer relations and developer outreach,
whether advocating for Flutter, answering questions in fora like
[Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true)
or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22),
or creating content for our [documentation](https://docs.flutter.dev/)
or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB),
the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md).From there, you can describe what you're interested in doing, and go ahead and do it!As others become familiar with your work, they may have feedback, be interested in
collaborating, or want to coordinate their efforts with yours.API documentation
Another great area to contribute in is sample code and API documentation.If this is an area that interests you, join our
[Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework,
or #hackers-engine channels, describing your area of interest.As our API docs are integrated into our source code, see the
"developing for Flutter" section above for a guide on how to set up your developer environment.To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail.We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc)
that you should read before you write API documentation.It includes notes on the "Flutter Voice", such as our word and grammar conventions.In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then
document the answer where you first looked for it.We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc).In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it!We're especially eager to add sample code and diagrams to our API documentation.Diagrams are generated from Flutter code that
draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme).It can be a lot of fun
to create new diagrams for the API docs.ReleasesIf you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual
generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases
channel of our [Discord](./docs/contributing/Chat.md) server.Social events in the contributor community
Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself.This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example.If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers
channel!

--------------------------------

raw HTML omitted 
Code of conduct
The Flutter project expects Flutter's contributors to act professionally
and respectfully.Flutter contributors are expected to maintain the safety
and dignity of Flutter's social environments (such as GitHub and Discord).Specifically:- Respect people, their identities, their culture, and their work.- Be kind.Be courteous.Be welcoming.- Listen.Consider and acknowledge people's points before responding.Should you experience anything that makes you feel unwelcome in Flutter's
community, please contact [conduct@flutter.dev](mailto:conduct@flutter.dev)
or, if you prefer, directly contact someone on the project, for instance
[Hixie](mailto:ian@hixie.ch).The Flutter project will not tolerate harassment in Flutter's
community, even outside of Flutter's public communication channels.Conflict resolutionWhen multiple contributors disagree on the direction for a particular
patch or the general direction of the project, the conflict should be
resolved by communication.The people who disagree should get
together, try to understand each other's points of view, and work to
find a design that addresses everyone's concerns.This is usually sufficient to resolve issues.If you cannot come to an
agreement, ask for the advice of a more senior member of the project.Be wary of agreement by attrition, where one person argues a point
repeatedly until other participants give up in the interests of moving
on.This is not conflict resolution, as it does not address everyone's
concerns.Be wary of agreement by compromise, where two good competing
solutions are merged into one mediocre solution.A conflict is
addressed when the participants agree that the final solution is
better than all the conflicting proposals.Sometimes the solution is
more work than either of the proposals.[Embrace the yak shave](./docs/contributing/Style-guide-for-Flutter-repo.md#lazy-programming).QuestionsIt's always ok to ask questions.Our systems are large, and nobody will be
an expert in all the systems.Once you find the answer, document it in
the first place you looked.That way, the next person will be brought
up to speed even quicker.Source: [xkcd, May 2012](https://xkcd.com/1053/)

--------------------------------

Flutter's core values
🏗️ Build the best way to develop user interfaces.This tells us what we are creating.It helps narrow our focus.The best way to develop user interfaces is a productive way of developing.The best way to develop user interfaces creates beautiful applications.The best way to develop user interfaces creates fast applications.The best way to develop user interfaces enables developers to create applications fast.The best way to develop user interfaces is extensible, so that we are not a barrier to developers.🔎 Focus on the user and all else will follow.Our user is the developer.Our developer's user is the end user of the application written with Flutter.Our first priority is to our developer's user, the end user.Our second priority is to our user, the developer.Caring about the end user means having high quality support for accessibility, top performance, stability, high fidelity and compatibility with the user's platform, supporting low-end devices, and so forth.Caring about the developer means creating a joyful and productive development experience with quick iteration cycles, creating usable, simple, reliable, predictable APIs, giving the developer full access to the underlying platform, and so forth.We respect our users, whoever they are.Another way to phrase this is "Build a thing people want".📖 Openness
Flutter is an open source project, in the full senses of the word: we are open to ideas, we are open to contributions, our code and our roadmap are open, our priorities are open.Transparency leads to a higher quality product.While the most active part of our team is currently primarily formed of employees from Google, we are growing and welcome anyone to join the team; at this point, the majority of people with commit access are not part of Google's Flutter team.Flutter's stewardship is managed by a team at Google.💫 Maintaining quality
A mediocre product cannot be the best way to develop user interfaces, so we must build processes around maintaining high levels of quality.This manifests in various ways.One is that we are feature-driven, not date-driven: we do not plan work based on deadlines.We may sometimes host events where we announce new features, but these events will announce features that have become available, rather than the features becoming available in order to be announced.This means sometimes a feature we intended to announce will slip and not be announced, but we prefer this to announcing a rushed feature.We may sometimes gate features behind flags until we are confident of their quality.🤣‬Have fun doing it
Last, but definitely not least, we want to make sure that our work environment is pleasant for everyone involved.Your health and the health of your family and friends is more important than Flutter.Our community [is welcoming](../../CODE_OF_CONDUCT.md).We don't know everything; all of us can make mistakes.We want team members to feel empowered to make changes to the code and to our processes.We encourage a bias towards action.It's better to try something and be wrong, than to plan forever and never execute.SupportWhen we think about whether we claim to "support" something, e.g. whether Flutter supports Windows 7, we use the following frame of reference.We document [which platforms we consider to fall into each category](https://docs.flutter.dev/reference/supported-platforms) on flutter.dev.Areas of supportWe distinguish several categories along which one can describe a level of support:- Supporting for deployment (we support a platform for deployment if you can run release builds of applications on that platform).- Supporting for development (we support a platform for development if you can run debug builds of applications on that platform, connect them to a debugger, hot reload, view logs, and so forth; we support a plugin for development if it can be stepped through in a debugger).- Supporting for hosting development (we support a platform for hosting development if it is one on which you can compile a Flutter application; we support an IDE for hosting development if it has a Flutter plugin).- Supporting for Flutter development (we support a platform for Flutter development if one can contribute to Flutter itself from that platform).The list of supported platforms on flutter.dev is describing the platforms supported for deployment.Levels of supportFor each area, we consider the level to which we provide support:-We will literally help you with your code if things don't work.This is very rare.(See also "[top-tier customers](../contributing/issue_hygiene/README.md#customers)".)- We will make a best effort to ensure that well written code works (e.g. we have testing on that platform).This is a common level for target platforms that have reached a label of "stable" (e.g. Android, iOS) on devices that are widely available (e.g. 64bit ARM).This corresponds to the "Supported Google-tested platforms" category on the list of supported platforms.- We will not go out of our way to prevent code from working, but if it works it's because of luck and our best intentions rather than a coordinated effort (e.g. we do no testing on that platform).This is a common level of support for less commonly-used devices.For example, we do minimal testing of 32bit iOS devices.This corresponds to the "Best effort platforms tested by the community" category on the list of supported platforms.- We will pay no attention to whether code works, but we will accept patches that are easy to reason about.This is a common level of support for the many esoteric embedded platforms that we have no way to even manually test.For example, if you have your own SoC and are running Flutter, we want you to succeed but we don't have any way to ensure it keeps working.At this level, we would not accept what we consider "risky" PRs, or PRs that involve significant refactorings.If you are willing to provide reliable CI support for your platform, we are more than happy to work with you to move that platform to level 2 (at which point more invasive PRs become viable).- We won't accept patches.This is the appropriate response for features and platforms that are wildly outside our roadmap.For example, maintaining a Rust port of the framework is not something the Flutter project would accept patches for.This corresponds to the "Unsupported platforms" category on the list of supported platforms.💙See also:- [Code of Conduct](../../CODE_OF_CONDUCT.md)- [Contributor Guide](../../CONTRIBUTING.md)- [Flutter's Culture of Inclusivity](https://flutter.dev/culture)- [Flutter culture and how to preserve it](https://medium.com/flutter/flutter-culture-and-how-to-preserve-it-436b4ed1031d)

--------------------------------

Chatting on Discord
 raw HTML omitted 
The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148).[This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH).Please do not share either link directly, instead share links to this page.The server is open to the public, though some channels are intended only for people who are actively contributing.See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there).We recommend you use the same display name on Discord and GitHub.(Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on.When in doubt, remember: our server has Dash as an icon!)Existing channelsWe have different channels for different purposes (this list is not exhaustive):
Channel
Description
Participants
#welcome
Welcome message.Only admins can post.raw HTML omitted Anyone can read.#announcements
Flutter announcements (e.g. breaking changes).Only team members can post (but not frequently).raw HTML omitted Anyone can read.#server-support
Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues.Anyone.#general
Chat about anything related to Flutter.Anyone.#help
People asking for our help.Anyone.#package-authorsFor people who develop Flutter packages.People writing packages for [pub.dev](https://pub.dev/).#dart
Questions about the Dart language.Anyone.#tree-status
Announcements about whether the trees are open or closed.Anyone, but discussion should happen elsewhere.#hackers
Chat about anything related to Flutter.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-*Chat specifically about foo, where foo is something to do with Flutter development, for example "engine", "framework", "desktop", "devtools", etc.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-dart
Questions about the Dart language.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-new
New people to the team and people who want to help them.Flutter contributors.raw HTML omitted Anyone can watch.#hackers-triageFor use while triaging bugs.Flutter contributors.raw HTML omitted Anyone can watch.#hidden-chat
Chat about anything related to Flutter.Flutter contributors only.raw HTML omitted Not public.general (voice)
Talk (audio) about anything related to Flutter.Anyone.team (voice)
Talk (audio) that is only open to team members.Flutter contributors.The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the "team member" role to see them.New channelsIf you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support.If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads.If you would like a channel for subcommunities, e.g. #women or #china, that should be fine.(Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.)For practical reasons, we do not use Discord for chat groups limited to specific customers.For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord.Each channel describes its topic in the channel description.Please read the channel description before posting in a channel, to make sure you're using the appropriate one.Policies
Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter.The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing.If you want help with your app, ask in #help instead.If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md).See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the "team" role.Please don't direct-message people unless they are comfortable with it (ask publicly first).You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.Discord features
Threading
Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.StatusYou can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.Design documentsThis page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).

--------------------------------

For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine.However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as "contributor access", "being a member of the flutter-hackers group", "being a member of the Flutter team").We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter.Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.The possible criteria are:-You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)).(This is rare.)Being granted access means that you will be added to the "flutter-hackers" group on GitHub and the "team" role on Discord.This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md).A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues.We grant access optimistically based on a reasonably small volume of evidence of good faith.Correspondingly, we will remove access quickly if we find our trust has been violated.Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously.(Please read it, it's stricter than most.)Responsibilities
Code of conductIf you have commit access or "team" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).Our code of conduct is much, much stricter than most.We do not wait until someone has been actively rude or insulting.Being disrespectful in any way is grounds for action.For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct.If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day.When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.Most people react very positively to this.If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment.On Discord, this would be kicking them from the channel.Repeat offenders should be banned.On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this).Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.Maintaining documentation
Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.If you spot something wrong, please fix it!As a contributor, you have access to the wiki.Privileges
Being in the GitHub "flutter-hackers" group gives you the following:-The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).- PRs will run their tests slightly faster.Being in the Discord "team" group gives you the following:-The ability to talk without rate-limiting on the #hackers-* channels.- The ability to kick people.- The ability to manage the server emoji.ProcessThe actual process (as followed by Flutter repo admins) is as follows:- Verify that they qualify under all the terms described above.Make sure they have a sponsor who isn't you.- Verify the identity of the person making the request.Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.- Add them to our private spreadsheet (go/flutter-organization-members).- Click the "Add a member" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.- Type their name in the text field, select them, then click the "Invite" button.- Add them to the "team" group on Discord.Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!For new Googlers joining the team:You need to ask someone in the team to add you to get added.It's not an automatic process after you join the flutter Google group.InactivityWe occasionally check for account with commit access that have not been used for a while.It takes very little to count as "active" (e.g. commenting on an issue, even adding an emoji reaction to an issue).If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access.If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.Access rights to Flutter dashboardThe [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits.To see rerun tasks, you need to be added to an allowlist.Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored.To get access, ask on #hackers-infra to be added to the allowlist.Adding a contributor to Flutter DashboardThis is only for team members with access to the Flutter Dashboard Datastore.- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)- Click `Create Entity`- Click `Email: Empty` ->Edit property.Insert contributor Google account- Click `Create`Access to LUCI recipes and configuration repositoriesIf you need access to the LUCI recipes, you need to be added to the relevant ACLs.Ask in #hackers-infra to be added to the LUCI ACLs.Process
A Googler has to be the one to grant permission.Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)Access to Flutter GoldIf you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user.Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.ProcessThe list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5).Googlers can submit a change to add to the authorized users.This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)
fcontrib.org accountsIf you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account.Ping @Hixie or another admin in the #server-support channel on Discord.ProcessYou’ll need the user’s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin.To add a fcontrib.org participant:- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)- Under “Users” in the upper left of the main content area, click “Add a User” and follow the prompts.- For a password, choose “Generate Password” and email the password to the new account holder using their non-fcontrib account -- they’ll be able to log in with that and then choose a new password.Review teams
Some parts of the codebase have teams specified so that PRs get round-robin assigned for review.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).We currently have the following review teams:- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions.To create a new team, contact @Hixie.You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.Pusher permissions
Some branches are protected to avoid accidents.Only people in the specific branches can push to them.Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security.To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord.Members must be a member of the Flutter Hackers group (as documented at the top of this page).The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia

--------------------------------

Primary issue triage processThe process of triaging new incoming bugs consists of processing the list of [issues without team-* labels, with no assignees, and not labeled will need additional triage](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+no%3Aassignee+-label%3A%22will+need+additional+triage%22+-label%3Ateam-release%2Cteam-codelabs%2Cteam-ecosystem%2Cteam-infra%2Cteam-engine%2Cteam-framework%2Cteam-news%2Cteam-ios%2Cteam-tool%2Cteam-web%2Cteam-linux%2Cteam-macos%2Cteam-windows%2Cteam-design%2Cteam-android%2Cteam-go_router%2Cteam-games%2Cteam-text-input+) as described in this section, so as to make that list empty.See also: [Issue triage reports](https://github.com/flutter/flutter/wiki/Issue-triage-reports)GeneralTo triage an issue, first look at the bug report, and try to understand what the described problem is.Edit the original comment to remove boilerplate that the bug reporter didn't remove.Edit the original comment to add backticks (```) around blocks of stack traces, code, the output of shell scripts like `flutter doctor`, etc.Ensure that the title is a meaningful summary of the issue.These changes make the bug much easier to manage.If their report is unclear, doesn't give sufficient steps to reproduce, or is otherwise lacking in sufficient detail for us to act on it, add a polite comment asking for additional information, add the `waiting for customer response` label, then skip the remaining steps.If the bug is still unclear -- we have previously asked for more detail, and the bug reporter has had a chance to provide additional feedback, but has not been able to do so in a way that makes the bug actionable -- either apologize for us not being able to fix it and then close the bug, or add the `waiting for customer response` label, depending on your confidence that the reporter will be able to eventually provide sufficient detail.Then, skip the remaining steps.It is fine to be aggressive in closing bugs where the issue is not clear, because we have plenty of other issues where the bug is clear and there's really no value to us in having low-quality bugs open in our bug database.If the issue describes something that you know for a fact has been fixed since the bug report was filed, add a cheerful comment saying so, close the issue, and skip the remaining steps.If the bug is clear enough for us to act on it, continue with the following steps.To reach this step, the bug should be actionable, with clear steps to reproduce the problem.We have enough bugs filed that we will not run out of work any time soon; therefore, it is reasonable to be quite aggressive in establishing if a bug is sufficiently clear.Artifacts
Ideally every issue would have a sample app that demonstrated the problem.Performance bugs should have timeline traces.Crashes should have crash logs with a Flutter version so that the [flutter-symbolizer-bot](https://github.com/flutter-symbolizer-bot) can do its work (see also [Crashes](../engine/Crashes.md)).What makes an issue actionableAn actionable issue is one for which it is easy to determine if a particular PR means the issue can be closed or not.Issues whose descriptions are vague, or that express a general malaise or general desire, issues that specify a failure mode but no steps to reproduce the problem, and other issues where the nature of the problem is not clear and where it would be difficult to determine if any particular change could actually fix the problem, should be closed.One example of an unactionable issue is one with such vaguely described symptoms that lots of people claim to have the same problem even when their described situations differ in mutually exclusive ways.As a project with literally thousands of open issues, we are not lacking in feedback.Time that would be spent trying to understand an unclear issue could be more effectively spent on a bug with a clear description.Unactionable bugs are simply not valuable enough to keep around when we have many actionable bugs already.Indeed, given how such issues are likely to affect search results, confuse new users filing issues, or attract hostile comments due to remaining open for a long time, they may literally have a negative value to the project.Unactionable bugs with unusual symptomsAs discussed above, if a filed issue is unactionable due to vagueness or a lack of steps to reproduce, it should be closed, because we're never going to get to it if we don't know what the problem is given that we have many, many other bugs that we can make progress on today.In the specific case of a bug with unclear steps to reproduce but very specific symptoms, we like to leave the issue open so that other people having the same problem can congregate together and maybe together we can figure out the underlying cause.This only applies to issues that have very specific symptoms like a specific and unusual crash signature, a specific and unusual error message, or other unusual and recognizable symptoms, and where some effort was made on the part of the bug reporter to determine the cause (even if that effort was ultimately futile).DuplicatesIf you recognize that this bug is a duplicate of an existing bug, add a reference to that bug in a comment, then close the bug.Skip the remaining steps.As you triage more and more bugs you will become more and more familiar with the existing bugs and so you will get better and better at marking duplicates in this way.When closing the duplicate bug, the GitHub issue tracker does not copy the list of people being notified on the closed bug into the original bug.This can matter, especially when asking on the original bug for things like reproduction steps.Consider cc'ing the author of the duplicate issue into the original issue, especially if we're still trying to determine reproduction steps for the issue.Requests for help (documentation issues)If the bug report is a question, then it probably belongs in Stack Overflow or on our #help channel or some other forum for getting help.However, if it appears that the reporter did try to read our documentation to find the answer, and failed, or, if you look in our documentation and find it is inadequate here, then please consider it a documentation bug (and update the summary accordingly).If you are confident our official documentation (on flutter.dev or api.flutter.dev) fully answers their question, then provide a link to the relevant page and close the issue, being very polite and asking them to reopen if the documentation is not sufficiently clear for them.Labels
General rule: The more labels an issue has, the better!See also: [List of labels](https://github.com/flutter/flutter/labels)Some labels are used to track the flow of issues from the time they're filed until they're assigned to a specific team for execution.You should use these to track the state of an issue through your first-level triage process.These are:- `in triage`: You are presently looking at an issue and trying to determine what other labels you should give it.- `assigned for triage`: The issue is assigned to a domain expert for further triage.- `has reproducible steps`: The issue has a reproducible case or test, Flutter doctor output, and usable stack traces if appropriate.It is actionable in the sense that it can be routed to a domain team for action.- `needs repro info`: We need more reproduction steps in order to be able to act on this issue.- `workaround available`: A workaround is available to overcome the issue until it is properly addressed.Read more about [providing workarounds](../contributing/issue_hygiene/README.md#comments-providing-workarounds).- `will need additional triage`: Assign this if you don't know how to route it to a team.To complete the triage of an issue, add one (and only one) `team-*` label.Team labels differ from the similar category names (such as `engine` or `framework`) in that the category labels indicate what part(s) of the codebase an issue affects, while `team-*` labels indicate the team that owns that work.Most issues will have both, and they won't always match.In general the flow chart for team assignment is as follows, stopping as soon as the first `team-` label is assigned:-If it's about the flutter/news_toolkit repository, add `team-news`.- If it's about a codelab, add `team-codelab`.- If it's about the release process or tooling (e.g., `conductor`), add `team-release`.- If it's about the Flutter team's CI or infrastructure, add `team-infra`.- If it's about Impeller, add `team-engine`.- If it's about accessibility (e.g. `Semantics`, `talkBack`, `voiceOver`), add `team-accessibility`.-If it's specific to a single platform, also add that platform's fyi label.- If it's about Cupertino or Material Design, add `team-design`.- If it's about text fields or other user-facing text input issues, add `team-text-input`.-If it's specific to a single platform, also add that platform's fyi label.- If it's specific to a single platform, add that platform's team (`team-android`, `team-ios`, `team-linux`, `team-macos`, `team-web`, or `team-windows`).-If the issue is about a first-party package, also add `fyi-ecosystem`.- If it's about one of our games templates, add `team-games`.- If it's about the Flutter engine, add `team-engine`.- If it's about the Flutter framework, add `team-framework`.- If it's about the Flutter tool, add `team-tool`.- If it's about a first-party package:
- If it's about `go_router` or `go_router_builder`, add `team-go_router`.- If it's about `two_dimensional_scrollables`, add `team-framework`.- If it's about `flutter_svg` or `vector_graphics`, add `team-engine`.- Otherwise, add `team-ecosystem`.- If none of the above apply, add `will need additional triage`.It is expected that some bugs will end up being re-assigned to a different team during secondary triage.If there are specific categories of issues where this always happens, the flow chart above should be updated accordingly, but having it happen occasionally is just the process working as expected; in some cases only the engineers working on an issue will know how the work is divided among teams.Bugs relating to the developer tools should be moved to the `flutter/devtools` repo, unless it looks like the first step is a change to the core parts of Flutter (in which case it should receive the `d: devtools` label as well as the pertinent labels for where the work should occur).Issues tagged with `d: devtools` or moved to the `flutter/devtools` repo will be triaged as described by [flutter/devtools/wiki/Triage](https://github.com/flutter/devtools/wiki/Triage).Bugs relating to the IntelliJ IDEs should be moved to the `flutter/flutter-intellij` repo, unless it looks like the first step is a change to the core parts of Flutter (in which case it should receive the `d: intellij` label as well as the pertinent labels for where the work should occur).Issues tagged with `d: intellij` will be reviewed by the Flutter IntelliJ team as described by [flutter/flutter-intellij/wiki/Triaging](https://github.com/flutter/flutter-intellij/wiki/Triaging).Bugs relating to the website should be moved to the `flutter/website` repo.Additional labelsOnce the main labels above are added, consider what additional labels could be added, in particular:Add any of the applicable "c: *" labels; typically only one will apply but sometimes `c: regression` will apply in conjunction with one of the others.Add any of the applicable "a: *" labels.There are many, it's worth browsing the list to get an idea of which ones might apply.Additional commentsIf you have something to say regarding the bug, for example if you happen to notice what the problem is, or if you have some insight based on having seen many other bugs over time, feel free to add a comment to that effect.Your experience is valuable and may help both the reporter and the rest of the Flutter team.Triage process for teamsWe intend for each area of the product to go through the following triage regularly:- Look at open bugs and determine what needs to be worked on.- Look at open PRs and review them.It is recommended to do these in separate dedicated meetings.For teams with multiple areas of focus (e.g. design languages), it's recommended that each area of focus have its own meeting.Team issue triage process
Each team has a label, for example `team-engine` is the engine team's label.Each issue gets assigned to a team during primary triage.In addition, each team has a "triaged" label (e.g. `triaged-engine`) and an "FYI" label (e.g. `fyi-engine`).Each team has an incoming issue list, the issues assigned to that team (team-foo), or marked for the attention of that team (fyi-foo), that the team has not yet triaged (triaged-foo).See below for links to those issue lists for each team.Each issue in this list should be examined, cleaned up (see next section), and either:- closed, with a comment saying why (e.g. is a duplicate, is not actionable, is invalid).The [r:](https://github.com/flutter/flutter/labels?q=r%3A) labels may be of use when closing an issue.- given a [priority](../contributing/issue_hygiene/README.md#priorities), and tagged with the team's corresponding `triaged-*` label.This marks the issue as triaged.If the priority is P3 and the reporter has expressed that the issue is important to them, it will help the reporter feel welcome if a comment is added expressing empathy for their plight and explaining why it is not something we consider important.- sent to another team, by removing the current `team-*` label and adding another one.A comment should be added explaining the action.- sent back to primary triage, by removing the `team-*` label but not adding another one.A comment should be added explaining the action.- escalated to critical triage, by adding the `will need additional triage` label.A comment should be added explaining the action.In addition, each team should look at their P0 list, and ensure that progress is being made on each one.Every P0 issue should have an update posted at least once a week.Teams may also look at other lists (e.g. checking over previously-triaged regression issues, checking all P1 issues, checking assigned issues, etc), as appropriate.To flag an issue for attention by another team, the `fyi-*` label for that team can be set on the label.This does not assign the issue to that team, it just adds it to their triage queue.Checklist for cleaning up issuesWhen looking at an issue, perform the following cleanup steps:- Correct any typos and inaccuracies in the summary.- Correct the set of labels applied.- Hide low quality comments.Restrict the time you spend diagnosing each issue during triage.You don’t have to fix the issue!30 seconds for P0 and 10~15 seconds for the others is reasonable!(Plus whatever time it takes to update the issue.)
 raw HTML omitted```
//This script is intended to be run in chrome devtools console
// during triage to open PRs and Issues faster.// Before the script can be run you need to enable popups in Chrome
// 1.On your computer, open Chrome Chrome.
//2. At the top right, click More More and then Settings.// 3. Click Privacy and security and then Site Settings.// 4. Click Pop-ups and redirects.
//5. Choose the option you want as your default setting.//
// https://support.google.com/chrome/answer/95472?hl=en&co=GENIE.Platform%3DDesktopconst plural = window.location.toString().split('?')[0];
const singular = plural.substring(0, plural.length-1);
const suffix = singular.includes("issue") ? "s" : "";
const re = new RegExp("^" + singular + suffix + "/\\d+$");var urls = document.getElementsByTagName('a');var targets = []
for (url in urls) {
    var link = urls[url].href;
    if(link == undefined) continue;
    if(link.match(re) == null) continue;
    if(targets.includes(link)) continue;
    targets.push(link);
}targets.forEach((target) => window.open(target));```raw HTML omitted 
PR triage process
Teams should also go through all PRs in their area (ideally in a separate meeting).PRs can apply to multiple areas, and different teams have different methods of organizing code, so there is no uniform guidance for this process.However, in general:
- Check that PRs have an assigned reviewer.- Check that the assigned reviewers have left comments; if not, contact them to remind them.- Check that any questions on the PR from the contributor have been answered.For more guidance on reviewing PRs, see [Tree Hygiene](../contributing/Tree-hygiene.md#how).Links for teams
Accessibility team (`team-accessibility`)
- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-accessibility%2Cfyi-accessibility+-label%3Atriaged-accessibility+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-accessibility+label%3AP0+sort%3Aupdated-asc+)- [Package PRs](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+accessibility%22+sort%3Aupdated-asc+-is%3Adraft+)Android platform team (`team-android`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-android%2Cfyi-android+-label%3Atriaged-android+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-android+label%3AP0+sort%3Aupdated-asc)- [P1, No Assignee list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-android+label%3Ap1+no%3Aassignee+sort%3Aupdated-asc)- PRs: [Framework/Tool](https://github.com/flutter/flutter/pulls?q=is%3Aopen+draft%3Afalse+is%3Apr+label%3Aplatform-android+-label%3A%22work+in+progress%3B+do+not+review%22+sort%3Aupdated-asc+), [Plugins (non-dependabot)](https://github.com/flutter/packages/pulls?q=is%3Aopen+draft%3Afalse+is%3Apr+label%3Atriage-android+sort%3Aupdated-asc+-author%3Aapp%2Fdependabot+), [Plugins (dependabot)](https://github.com/flutter/packages/pulls?q=is%3Aopen+draft%3Afalse+is%3Apr+label%3Aplatform-android+sort%3Aupdated-asc+author%3Aapp%2Fdependabot+)Codelabs team (`team-codelabs`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-codelabs%2Cfyi-codelabs+-label%3Atriaged-codelabs+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-codelabs+label%3AP0+sort%3Aupdated-asc)Design Languages team (`team-design`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-design%2Cfyi-design+-label%3Atriaged-design+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+-label%3A%22waiting+for+customer+response%22+)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-design+label%3AP0+sort%3Aupdated-asc)- [Design Languages PRs](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22f%3A+material+design%22%2C%22f%3A+cupertino%22+sort%3Aupdated-asc+draft%3Afalse)Ecosystem team (`team-ecosystem`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ecosystem%2Cfyi-ecosystem+-label%3Atriaged-ecosystem+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ecosystem+label%3AP0+sort%3Aupdated-asc)- [PR list](https://github.com/flutter/packages/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-asc+-label%3A%22p%3A+go_router%22+-label%3A%22p%3A+go_router_builder%22)In addition, consider these issues that fall under another team's triage, but are things the ecosystem team might want to be aware of:

- [a: plugins issues](https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3A%22a%3A+plugins%22+-label%3Ateam-ecosystem+-label%3Atriaged-ecosystem)- [package issues](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Apackage+-label%3Ateam-ecosystem+-label%3Atriaged-ecosystem+-label%3Ateam-go_router+sort%3Acreated-desc+)- [Package regressions](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+-label%3Ateam-go_router+label%3Apackage+label%3A%22c%3A+regression%22+sort%3Acreated-desc)Engine team (`team-engine`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-engine%2Cfyi-engine+-label%3Atriaged-engine+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-engine+label%3AP0+sort%3Aupdated-asc)- [Buildroot PRs](https://github.com/flutter/buildroot/pulls)- [Approved PRs that have not yet landed](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+draft%3Afalse+-label%3A%22Work+in+progress+%28WIP%29%22+review%3Aapproved+NOT+%22Roll+Skia%22+-label%3Aplatform-web+sort%3Acreated-asc)- [PRs awaiting review](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+draft%3Afalse+-label%3A%22Work+in+progress+%28WIP%29%22+-label%3A%22waiting+for+tree+to+go+green%22+-label%3A%22platform-web%22+-review%3Aapproved+-label%3A%22waiting+for+customer+response%22+NOT+%22Roll+Skia%22+NOT+%22Roll+Dart%22+NOT+%22Roll+Fuchsia%22+sort%3Aupdated-asc++-label%3A%22platform-web%22+)- [Draft PRs](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3A%22Work+in+progress+%28WIP%29%22+-label%3A%22waiting+for+tree+to+go+green%22+-label%3A%22platform-web%22+-review%3Aapproved+-label%3A%22waiting+for+customer+response%22+NOT+%22Roll+Skia%22+sort%3Aupdated-asc++-label%3A%22platform-web%22+)Framework team (`team-framework`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-framework+label%3AP0+sort%3Aupdated-asc)- [PR list](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3Aframework+-label%3A%22f%3A+material+design%22+-label%3A%22f%3A+cupertino%22+sort%3Acreated-desc+draft%3Afalse)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-framework%2Cfyi-framework+-label%3Atriaged-framework+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+-label%3A%22waiting+for+customer+response%22+)Games team (`team-games`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-games%2Cfyi-games+-label%3Atriaged-games+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-games+label%3AP0+sort%3Aupdated-asc)- [PRs awaiting review](https://github.com/flutter/games/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-asc)Go Router team (`team-go_router`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-go_router%2Cfyi-go_router+-label%3Atriaged-go_router+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-go_router+label%3AP0+sort%3Aupdated-asc)- [Package PRs](https://github.com/flutter/packages/pulls?q=is%3Apr+is%3Aopen+label%3A%22p%3A+go_router%22%2C%22p%3A+go_router_builder%22)Infrastructure team (`team-infra`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-infra+label%3AP0+sort%3Aupdated-asc)- [Cocoon PRs](https://github.com/flutter/cocoon/pulls)- [GoB CLs](https://flutter-review.googlesource.com/q/status:open+-is:wip)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-infra%2Cfyi-infra+-label%3Atriaged-infra+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [Latest updated issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-infra%2Cfyi-infra+sort%3Aupdated-desc)
iOS and macOS platform team (`team-ios` and `team-macos`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ios%2Cteam-macos+label%3AP0+sort%3Aupdated-asc+)- [iOS incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-ios%2Cfyi-ios+-label%3Atriaged-ios+-label%3A%22will+need+additional+triage%22+-label%3A%22waiting+for+customer+response%22+sort%3Aupdated-asc+)- [macOS incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-macos%2Cfyi-macos+-label%3Atriaged-macos+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+)- [Apple news](https://developer.apple.com/news) - check for updates that might affect us.PRs are reviewed weekly across the framework, packages, and engine repositories:- [iOS PRs on the engine](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3Aplatform-ios+sort%3Acreated-asc+-is%3Adraft)- [macOS PRs on the engine](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3A%22affects%3A+desktop%22+label%3Aplatform-macos+sort%3Aupdated-asc)- [iOS PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3Aplatform-ios+sort%3Acreated-asc+-is%3Adraft)- [macOS PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+desktop%22+platform-macos++sort%3Aupdated-asc)- [iOS and macOS PRs on packages](https://github.com/flutter/packages/pulls?q=is%3Aopen+is%3Apr+label%3Atriage-macos%2Ctriage-ios+sort%3Aupdated-asc+)Linux platforms team (`team-linux`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-linux%2Cfyi-linux+-label%3Atriaged-linux+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-linux+label%3AP0+sort%3Aupdated-asc)- [Linux PRs on the engine](https://github.com/flutter/engine/pulls?q=is%3Aopen+is%3Apr+label%3A%22affects%3A+desktop%22+label%3Aplatform-linux+sort%3Aupdated-asc)- [Linux PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+desktop%22+label%3Aplatform-linux+sort%3Aupdated-asc)- [Linux PRs on packages](https://github.com/flutter/packages/pulls?q=is%3Aopen+is%3Apr+label%3Atriage-linux+sort%3Aupdated-asc)News Toolkit team (`team-news`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-news%2Cfyi-news+-label%3Atriaged-news+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-news+label%3AP0+sort%3Aupdated-asc)Release team (`team-release`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-release%2Cfyi-release+-label%3Atriaged-release+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-release+label%3AP0+sort%3Aupdated-asc)Text Input team (`team-text-input`)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3A%22a%3A+text+input%22%2Cteam-text-input%2Cfyi-text-input+sort%3Aupdated-asc+label%3AP0+)- [PR list](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+sort%3Acreated-desc+draft%3Afalse+label%3A%22a%3A+text+input%22%2Cteam-text-input%2Cfyi-text-input+)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22a%3A+text+input%22%2Cteam-text-input%2Cfyi-text-input+no%3Aassignee+-label%3A%22triaged-design%22+-label%3A%22triaged-framework%22+-label%3A%22triaged-linux%22+-label%3A%22triaged-macos%22+-label%3A%22triaged-windows%22+-label%3A%22triaged-android%22+-label%3A%22triaged-ios%22+-label%3A%22triaged-web%22+-label%3A%22triaged-ecosystem%22+-label%3A%22triaged-engine%22+-label%3A%22triaged-tool%22+-label%3A%22triaged-text-input%22+-project%3Aflutter%2F111+)Flutter Tool team (`team-tool`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-tool%2Cfyi-tool+-label%3Atriaged-tool+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-tool+label%3AP0+sort%3Aupdated-asc)- [PR list](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3Atool+sort%3Aupdated-asc+-is%3Adraft)Web platform team (`team-web`)- See the [Flutter Web Triage](Flutter-Web-Triage.md) page.Windows platforms team (`team-windows`)- [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-windows%2Cfyi-windows+-label%3Atriaged-windows+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc)- [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-windows+label%3AP0+sort%3Aupdated-asc)- [Windows PRs on the framework](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+desktop%22+label%3Aplatform-windows+sort%3Aupdated-asc)- [Windows PRs on packages](https://github.com/flutter/packages/pulls?q=is%3Aopen+is%3Apr+label%3Atriage-windows+sort%3Aupdated-asc)Adding a new teamTo add a team:
- Create the `team-*`, `triaged-*`, and `fyi-*` labels with the same colors as other teams' labels.- Add the team to the list of teams in the triage bot ([the GitHubSettings.teams set](https://github.com/flutter/cocoon/blob/main/triage_bot/lib/engine.dart#L50)) and tell Hixie so he can restart the bot.- Add the team to the list of excluded labels in the link at the top of this page.- Add a section above with the incoming issue list and P0 issue list.Critical triageEach week we have a "critical triage" meeting where we check how things are going, to make sure nothing falls through the cracks.(It's not really "critical", the name is historical.)During these meetings, we go through the following lists:
- [P0](https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3AP0+sort%3Aupdated-asc): all bugs should be assigned, and progress should be happening actively.There should be an update within the last week.If no progress is happening and owner cannot work on it immediately (e.g. they're on vacation, they're busy with their day job, family reasons, etc), find a new owner.- [Bugs flagged for additional triage](https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+no%3Aassignee): figure out what should be done with the bug, then remove the `will need additional triage` label.- [flutter-pub-roller-bot](https://github.com/flutter/flutter/pulls/flutter-pub-roller-bot): check that the pub auto roller is chugging along.If it has gotten trivially stuck, such as having a merge conflict, close the PR so that it can open a new one.If it is non-trivially stuck, file an issue for the infra ticket queue: [https://github.com/flutter/flutter/blob/main/docs/infra/Infra-Ticket-Queue.md](https://github.com/flutter/flutter/blob/main/docs/infra/Infra-Ticket-Queue.md).- [The stale PRs](https://github.com/pulls?q=is%3Aopen+is%3Apr+archived%3Afalse+user%3Aflutter+-repo%3Aflutter%2Fwebsite-cms+sort%3Aupdated-asc+): examine the 25 least-recently updated PRs, if the least recently updated one was updated more than 2 months ago.Self test issueThe automation that supports our triage processes will periodically file an issue with every team's label on it.After a couple of weeks, it then adds the `will need additional triage` label to send it to the attention of the "critical triage" meeting, at which point we discover how well the triage processes are going, and which teams are not following the process completely, or are understaffed for the volume of issues they are dealing with.

--------------------------------

tl;dr- Avoid asking about the status of an issue; if we have an update, we'll post it.- If you have permission, assign bugs to yourself if you're working on them.- Unassign bugs that you are not working on soon.- If an issue is not assigned, assume it is available to be worked on.OverviewWe use three issue trackers: the [main one on flutter/flutter](https://github.com/flutter/flutter/issues), one for [the flutter.dev Website, on flutter/website](https://github.com/flutter/website/issues), and one for [the IntelliJ and Android Studio plugins, on flutter/flutter-intellij](https://github.com/flutter/flutter-intellij/issues).This page mostly talks about how we handle things for the flutter/flutter issue tracker.Issue philosophyWe assume that Flutter, like all non-trivial software, has an infinite number of bugs.The issue tracker contains the list of bugs that we are very lucky to have had reported by our generous community.Bugs includes known defects, as well as feature requests, planned work, and proposals.Within the bug database we try to make sure each issue is actionable and discoverable.We do this by carefully updating the issue subject line, making sure every issue has steps to reproduce, and using labels to categorize the issue in ways that can be found by GitHub search.CommentsDo not add "me too" or "same" or "is there an update" comments to issues or PRsThe Flutter team prioritizes issues in part based on the number of +1 (thumbs
up) reactions on the top level comment of the bug.Adding comments like "me
too" or "same here" is generally distracting and makes it harder to find
other more meaningful content in the bug.If you have no new details to add,
consider just thumbs up-ing the issue.If you wish to subscribe to the issue,
click the "subscribe" button in the right hand column of the GitHub UI.Adding comments explaining how a bug is dire and how you will stop using Flutter
if it is not fixed is upsetting for the engineers working on Flutter (many of
whom are volunteers, not that being paid to work on Flutter makes such comments
any less upsetting).Out of a respect for the team, and as required by our [code
of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md), we
ask that you avoid adding comments that are not actively helpful.There are other
venues if you want to complain without being constructive.Asking for updates is also not generally helpful, because it just leads to issues
being full of comments asking for updates and that makes finding useful information
in a bug harder (an exception might be if you are participating in the triage process,
but even then consider reaching out to people directly if possible).If you believe
there could be information that has not been posted, ask on our Discord server instead
(see [Chat](../Chat.md)).Issues are not always the best venue for discussions
Discussions within an issue should remain focused on the topic, specifically about what the filed issue is and how to solve it.Broader discussions are best suited to happen on Discord (see [Chat](../Chat.md)) or in design docs using Google Docs (see [Design Documents](../Design-Documents.md)).This is because GitHub hides comments, doesn't have threading, notifications get lost in the swamp of other GitHub e-mails, etc.If you move to another tool for part of the discussion, remember to add a summary of the discussion and document any decisions that took place.This allows people following the issue to keep updated and continue to participate.Issues are never an appropriate venue for asking for help with your code.Issues are also not a good venue for discussing project direction.Comments providing workarounds
Providing workarounds for issues can be helpful for developers using Flutter and finding a bug,
but please keep such comments to a minimum so as to avoid disrupting the engineers trying to
fix the issue.Rather than discussing workarounds, provide a pointer to another forum
(e.g. Stack Overflow) where workarounds and temporary solutions are more appropriate.Thanks.However, when a workaround has been identified, consider applying the `workaround available` label to make that info readily available.Avoid posting screenshots of textIf you want to show code, quote someone, or show a string of text that does
not render properly with Flutter, please avoid sharing it via an image or
screenshot.Text in images cannot be copied, and cannot be automatically
translated via services like Google Translate.This makes it harder for team
members who do not speak that language to participate in the issue.It is perfectly fine to share a screenshot of text rendering invalidly, but
also include the actual string or character(s) that lead to it so that they
can be copied and pasted into a test case.Provide reduced test casesTo debug a problem, we will need to be able to reproduce it.The best way
to help us do that is to provide code, licensed according to [the BSD license
used by Flutter](https://github.com/flutter/flutter/blob/main/LICENSE), that
has been reduced as far as possible (such that removing anything further stops
showing the bug).Attach such a file or files to the issue itself.For legal reasons, we cannot debug problems that require looking at proprietary
code or, generally, code that is not publicly available.Consider posting issues in EnglishIf you are able to read and write English clearly, consider posting your issue
in English, even if it is about a language specific issue (like the way text
renders in some non-English language).It is fine to post issues in languages other than English, but consider that
many readers will rely on automatic translation services to read your issue.Please avoid using screenshots in languages other than English, as services like
Google Translate will not translate the text in images, and the pool of people
able to assist you will be reduced.Locking an issue
Closed issues that haven't received any activity in a [few weeks](https://github.com/flutter/flutter/blob/main/.github/lock.yml#L4)
are automatically locked by a [bot](https://github.com/apps/lock).This is
done to encourage developers to file new bugs, instead of piling comments
on old ones.Under normal circumstances, open issues should not regularly be locked.The most
common reason for manually locking an open issue is that issue is well
understood by the engineers working on it,
is believed to be appropriately prioritized, has a clear
path to being fixed, and is otherwise attracting
a lot of off-topic or distracting comments like "me too" or
"when will this be fixed" or "I have a similar issue that might
or might not be the same as this one".If you are concerned that such an issue is not receiving its due
attention, see Escalating an Issue, described above.If you are
not already a contributor but would like to work on that issue,
consider reaching out on an appropriate [chat](../Chat.md).If you have a similar issue and are not sure if it is the same,
it is fine to file a new issue and linking it to the other issue.Please avoid intentionally filing duplicates.Very rarely, an issue gets locked because discussion has become
unproductive and has repeatedly violated the [Code of Conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).PrioritiesThe [P0](https://github.com/flutter/flutter/labels/P0) label indicates that the issue is one of the following:- a build break, regression, or failure in an existing feature that prevents us from shipping the current build.- an important item of technical debt that we want to fix promptly because it is impacting team velocity.- an issue blocking, or about to block, a top-tier customer.(See  under "customers" for a definition of "top-tier customer".)There are generally less than twenty-five P0 bugs (one GitHub search results page).If you find yourself assigning a P0 label to an issue, please be sure that there's a positive handoff between filing and a prospective owner for the issue.Issues at this level should be resolved in a matter of weeks and should have weekly updates on GitHub.During normal work weeks (e.g. not around the new year), issues marked P0 get audited weekly during the "critical triage" meeting to ensure we do not forget about them.Issues marked P0 should get updates at least once a week, to keep the rest of the team (and anyone affected by the issues) apprised of progress.The [P1](https://github.com/flutter/flutter/labels/P1) label indicates high-priority issues that are at the top of the work list.This is the highest priority level a bug can have if it isn't affecting a top-tier customer or breaking the build.Bugs marked P1 are generally actively being worked on unless the assignee is dealing with a P0 bug (or another P1 bug).Issues at this level should be resolved in a matter of months and should have monthly updates on GitHub.The [P2](https://github.com/flutter/flutter/labels/P2) label indicates issues that we agree are important to work on, but are not at the top of the work list.This is the default level for new issues.A bug at this priority level may not be fixed for a long time.Sometimes an issue at this level will first migrate to P1 before we work on them, but that is not required.The [P3](https://github.com/flutter/flutter/labels/P3) label indicates issues that we currently consider less important to the Flutter project.We use "thumbs-up" on these issues as a signal when discussing whether to promote them to P2 or higher based on demand.(Of course, this does not mean the issues are not important to you, just that we don't view them as the especially important for Flutter itself.)Typically we would accept PRs for `P3` issues (assuming they follow our [style guide](../Style-guide-for-Flutter-repo.md) and follow our [other rules](../Tree-hygiene.md)).Issues marked with the [would require significant investment](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22would+require+significant+investment%22) label may require more than just a PR, for example, adding support for a whole new platform will require a commitment to provide CI resources for build and test, and someone to own the maintenance of those systems.When will my bug be fixed?Flutter is an open source project and many people contribute their time (or their employees' time) to fix code and implement features.Typically, people fix bugs that are relevant to their customers.For example, Google engineers who contribute to Flutter are going to prioritize issues that affect Flutter apps written by Google teams.Many of us, however, also volunteer time to fix more general issues.To determine when a bug will be fixed, look at the issue.If there's a recent status update on the issue, that is the best information we have about the bug.If there's a lot of comments on the issue, we try to link to the latest status from the top comment, so look there.(Please  for updates, though.)If the issue is labeled with priorities `P0` or `P1`, or if the issue is assigned, we are likely to address it in the near term; we just need to find time.Otherwise, we don't know when we're going to fix it.We may never get to it.In general, `P2` bugs are seen as more important than `P3` bugs.See the more detailed definitions of priorities above.See also [Popular issues](../issue_hygiene/Popular-issues.md).Escalating an issue that has the wrong priorityIf you have a relationship with the Flutter team, raise the issue with
your contact if you think the priority should be changed.If you don't, consider finding like-minded developers to either implement
the feature as a team, or to fund hiring someone to work on the feature,
or to .Please don't comment on an issue to indicate your interest.Comments should
be reserved for making progress on the issue.Thumbs-up reactionsTo vote on an issue, use the "Thumbs-up" emoji to react to the issue.When examining issues, we use the number of thumbs-up reactions to an issue to determine an issue's relative popularity.This is, of course, but one input.At the end of the day, Flutter is an open source project and everyone (or every company) who contributes does so to further their own needs.To the extent that those needs are aligned with making Flutter popular,
they tend to let their priorities be influenced by the "thumbs-up" reactions,
but if you have something on which your business depends,
the best solution is to pay someone to work on it.See also:- [All open issues sorted by thumbs-up](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc)- [Feature requests by thumbs-up](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3A%22c%3A+new+feature%22)- [Bugs by thumbs-up](https://github.com/flutter/flutter/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+-label%3A%22c%3A+new+feature%22+)We ignore other emoji reactions.LabelsWe use [many labels](https://github.com/flutter/flutter/labels).Naming conventions
Common naming conventions for labels include:

- `a: *` - The `a` ("area") prefix is used for labels that are about a specific topic that could span different layers of Flutter's implementation (for example "accessibility" or "text input").- `browser: *` - Indicates the browser for browser-specific issues for the web port of Flutter.- `c: *` - The `c` ("category") prefix says what kind of bug we're looking at (regression, crash, new feature request, etc).- `d: *` - The purple `d` ("devtools") labels are for organizing our developer tool issues.- `d: *` - The green `d` ("documentation") labels are for organizing our documentation-related issues.- `dependency: *` - Indicates the upstream team for issues that are blocked on some work from an upstream project (e.g. Skia, Dart).- `e: *` - The `e` ("engine") prefix is for subsets of the Flutter engine ([flutter/engine](https://github.com/flutter/engine)).- `f: *` - The `f` ("framework") prefix is for subsets of the Flutter framework ([flutter/flutter's packages/flutter/](https://github.com/flutter/flutter/tree/main/packages/flutter)).- `found in release: x.yy` - Used for a series of labels that indicate which versions of Flutter an issue was found in.- `from: *` - Labels that indicate where an issue originated (e.g. research, postmortems), if it wasn't filed organically.- `t: *` - The `t` ("tool") prefix is for subsets of the Flutter tool ([flutter/flutter's packages/flutter_tools/](https://github.com/flutter/flutter/tree/main/packages/flutter_tools)).- `p: *` - The `p` ("package") prefix is for specific packages ([flutter/packages](https://github.com/flutter/packages)).Light teal for packages and darker teal for plugins.- `platform-*` - The `platform` prefix is for bugs that are specific to one or more platforms.- `r: *` - The `r` ("resolution") prefix is used for labels that describe why an issue was closed.Adding labels
Labels are more or less free, so we can add them pretty easily.Please mention it to other team members first, so that they know what you are planning and can give feedback (please at a minimum mention it on `#hidden-chat` in our [Chat](../Chat.md)).Please make sure labels use a consistent color and naming scheme (e.g. all the framework-related labels are blue and start with `f:`).Labels should be used for adding information to a bug.If you plan to use a label to find all instances of a particular topic (e.g. finding all PRs where someone wrote a design doc), be aware that there's no way to force people to label issues or PRs.You can, however, rely on automation to do it, for example we have a script that labels all PRs that affect the framework.CustomersThe Flutter team is formed of engineers from many sources, including dedicated volunteers and employees of companies like Google.Each of these may have different ideas of who their customers are.For example, Google engineers consider some Google teams to be their customers, but someone who contributes on a code-for-hire basis may have their own customers.Some teams using Flutter have a special relationship with some members of the Flutter team (e.g. they're collaborating with us on a new feature, or they're working with us on a product demo for an upcoming event).This is usually a fairly short-term arrangement for a specific business purpose.We provide such customers with a label (`customer: ...`) in our GitHub issue tracker.When these customers are working closely with members of the Flutter team, we may consider them "top-tier customers" for the purposes of prioritization.Priority `P0` (see below) is sometimes used for bugs that affect these top-tier customers.Coordinating between bug systems
Some customers have their own separate bug systems, in which they track Flutter
issues.We consider our GitHub issue list to be canonical.However, if there
is a link from the issue in our bug system to the customer's issue in their bug
system, and we have been granted access, we will follow that link and may
communicate in that separate bug system when attempting to track down the issue.Special customer labelsThe `customer: product` label is used to bring issues that product management
and senior leads want resolved to the attention of the appropriate engineering
team.The `customer: crowd` label is used to represent bugs that are affecting large
numbers of people; during initial [Triage](../../triage/README.md), high-profile bugs get labeled in
this way to bring them to the attention of the engineering team."Large numbers"
is a judgement call.If dozens of people independently run into the same issue
and file a bug and we end up realizing that they're all duplicates of each other,
then that would be a good candidate.On the other hand, if there is an active
campaign to get people to comment on a bug, then it's probably not legitimately
a `customer: crowd` bug, because people generally report bugs without having to
be convinced to do so.In general, a bug should only be marked `customer: crowd` `P0` if it
is so bad that it is literally causing large numbers of people to consider changing
careers.Other noteworthy labelsThe `blocked` label can be used to indicate that a particular issue is unable to make progress until some other problem is resolved.This is particularly useful if you use your own list of assigned issues to drive your work.The `good first issue` label should be used on issues that seem like friendly introductions to contributing to Flutter.They should be relatively well-understood issues that are not controversial, do not require a design doc, and do not require a deep understanding of our stack, but are sufficiently involved that they at least require a basic test to be added.MilestonesWe do not use GitHub milestones to track work.Assigning Issues
Issues are typically self-assigned.Only assign a bug to someone else if
they have explicitly volunteered to do the task.If you don't have permissions
to assign yourself an issue you want to work on, don't worry about it, just
submit the PR (see [Tree Hygiene](../Tree-hygiene.md)).Only assign a bug to yourself when you are actively working on it
or scheduled to work on it.If you don't know when you'll be working
on it, leave it unassigned.Similarly, don't assign bugs to
people unless you know they are going to work on it.If you find
yourself with bugs assigned that you have not scheduled specific time
to work on, unassign the bug so that other people feel
empowered to work on them.Do assign a bug to yourself if you are working on it, or if you have
scheduled time to work on it and are confident you will do so!This is how
people can figure out what is happening.It also prevents duplicate
work where two people try to fix the same issue at once.You may hear team members refer to "licking the cookie".Assigning a
bug to yourself, or otherwise indicating that you will work on it,
tells others on the team to not fix it.If you then don't work on it,
you are acting like someone who has taken a cookie,
licked it to be unappetizing to other people, and then not eaten it.By extension, "unlicking the cookie" means indicating to the
rest of the team that you are not actually going to work on the bug
after all, e.g. by unassigning the bug from yourself.File bugs for everything
File bugs for anything that you come across that needs doing.When you
implement something but know it's not complete, file bugs for what you
haven't done.That way, we can keep track of what still needs doing.ExceptionsDo not file bugs that meet the following criteria:- Asking meta-questions like "why was bug #XYZ closed?"Instead, poston the original issue or raise the actual problem that is still not
resolved.- Intentional duplicates like  "This is the same as bug #ABC but thatone is not getting enough attention."Instead, upvote the original
issue or add a comment that provides new details that are not already
captured or (best of all) assign it to yourself and start working on it!How to propose a specific changeIf you have an idea that you would like to land, the recommended process is:- [File a bug](https://github.com/flutter/flutter/issues/new/choose) describing the problem.- Write a [design doc](https://flutter.dev/go/template) that references this problem and describes your solution.- Socialize your design on the bug you filed and on [Chat](../Chat.md).Collect feedback from various people.- Once you have received feedback, if it is mostly positive, implement your idea and submit it.See the [Tree Hygiene](../Tree-hygiene.md) wiki page for details on submitting PRs.Every issue should be actionable
Avoid filing issues that are on vague topics without a clear problem description.Please close issues that are not actionable.See [Triage](../../triage/README.md) for more details.Issues should have clear steps to reproduce
Every issue should have a clear description of the steps to reproduce the problem, the expected results, and the actual results.If an issue is lacking this information, request it from the commenter and close the issue if information is not forthcoming.Closing issuesAn issue should be closed if:- it is fixed!- it is a [duplicate](../../triage/README.md#duplicates).- it makes multiple requests which could be addressed independently.Encourage people to file separate bugs for each independent item.- it is describing a solution rather than a problem.For example, it has no use cases, and the use cases are not obvious, or might have other solutions.- it is not [actionable](../../triage/README.md#what-makes-an-issue-actionable) and does not [have unusual symptoms](../../triage/README.md#unactionable-bugs-with-unusual-symptoms).This covers a wide variety of cases, such as invalid bugs, bugs without steps to reproduce, bugs that have become irrelevant, or bugs that are unclear and which the reporter has not offered more details for.It also includes non-catastrophic bugs that cannot be reproduced by anyone but the original reporter.For this latter case, encourage the reporter to attempt to debug the issue themselves, potentially giving suggestions for places where they could instrument the code to find the issue, and invite them to join the Discord for help; then add the `waiting for customer response` label.The issue will get automatically closed after a few weeks if they don't respond.- it is a feature request that we are unlikely to ever address, and if we did address it, it would not be part of the core SDK (e.g. it would be in a package).(For example, anything in the [would be a good package P3](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22would+be+a+good+package%22+label%3AP3) list is a good candidate for closing without fixing.)- we would not accept a fix even if one were to be offered ([e.g. support for platforms at level of support 4](../../about/Values.md#levels-of-support)).- it is an issue regarding internal processes, tooling, or infrastructure (i.e. something that our users are not affected by), that we have no plans to get to (e.g. that would be marked P3).(For example, anything in the [c: tech-debt P3](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22c%3A+tech-debt%22+label%3AP3) list is a good candidate for closing.)- it is tracking technical debt but the suggested improvements are marginal at best or would require significant research to be evaluated.Prefer having folks who work in the relevant part of the code make improvements based on their judgment.The following are poor reasons for closing an issue:- it has not been updated for a long time.This is fine; if the issue has not changed, then it is normal for it to not be updated.- it is a low-priority user-facing issue.We would prefer to have one long-lived open bug with a single conversation, than many short-lived closed bugs with many independent conversations.- it would be hard to fix.In general, any bug that has the following characteristics should definitely not be closed:- it is a well-described problem that we can reproduce reliably.- it is a well-argued feature request with a solid use case and clear goal that cannot reasonably be implemented in a package.(If it's something we're unlikely to ever do, it should be marked P3.)- it is tracking technical debt that is clearly actionable and whose benefits are clear.- it is a request to add a customization to a material widget that fits cleanly into the existing material design library's ethos.- it was filed by a team member and is assigned to that team member.Tracking bugs for team membersIf you need to track some work item, you can file a bug and assign it to yourself.Self-assigned bugs like this are mostly ignored by the bots and you can ignore the rules for such issues.(When you leave the team, we'll likely close these issues.)Some people like to use bugs like this as "umbrella" bugs for tracking work.You may also find it useful to use GitHub projects to manage work items.Flaky testsWhen a test flakes, a P0 bug is automatically filed with the label [team: flakes](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22team%3A+flakes%22+sort%3Aupdated-asc).This issue should be investigated with all due haste, and a priority level should then be assigned to the issue.At any particular time, the most flaky tests should remain P0.However, flakes that are hard to pin down may be downgraded in priority (e.g. to P1).Please do not ignore the issue entirely, however, and make sure to close bugs once they are resolved, even if it's by magic.See also: [Reducing test flakiness](../../infra/Reducing-Test-Flakiness.md)

--------------------------------

With each beta we need to test that there are no regressions.We have lots of automated tests, but sometimes the thing that breaks is something we hadn't thought to test (or haven't figured out how to test) and so human testing is important!When to test betas
We announce betas on our Discord (see the [Chat](../contributing/Chat.md) page for the invite link), in the #releases channel, about once a month.How to get a beta buildWhen a beta build is announced, switch to the beta channel:`flutter channel beta && flutter upgrade`If you get a `git` error, then you probably have a contributor checkout of Flutter.Use git instead:
`git fetch upstream && git checkout upstream/beta`Either way, check that everything is as you expect:
`flutter --version`It should specify the version number that you are testing.How to test a beta buildThis is the easiest part: just use it!Test it on your projects, try running demos, try doing things you depend on normally.Tell others who are testing the beta branch what you're doing in #quality-assurance on Discord!In time, we will collect some specific things to try out here.

--------------------------------

tl;dr- Regressions should be [reverted first](../infra/Landing-Changes-With-Autosubmit.md) and questions asked later.Bringing the tree to green is higher priority.- A breaking change is one that breaks the tests in the flutter/tests repo, and those need a migration guide.- Expect that a new patch will be reviewed within two weeks, unless it is fixing a P0 bug in which case it should be reviewed the same day.If it has not been reviewed in that timeframe, reach out on [Chat](Chat.md).Remember that reviewers are human beings with additional professional and personal responsibilities.IntroductionThis page covers how to land a PR and other aspects of writing code for
Flutter other than the actual writing of the code.For guidance on
designing APIs, documenting, and formatting your code, see the
[Style guide for Flutter repo](Style-guide-for-Flutter-repo.md) document.OverviewThe general process for submitting code to a Flutter repository is as follows:-Fork the repository on GitHub (see the[contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md)
for advice on doing this and in general setting up your development environment).-If there is not already an issue covering the work you are interested in doing,then file a new bug to describe the issue you are addressing.Having an issue means
that if we have to revert the PR, we can reopen the issue and not lose track of the
fact that the work didn't fully land.Similarly if someone works on a PR then stops
before it can land, having an issue means we have somewhere to point to the code when
we close the PR without landing it, so other people can take it over.- Discuss your design on the issue.See [Design Documents](Design-Documents.md) for advice.You may find it useful to create a Google Doc to
solicit feedback (use the template at [flutter.dev/go/template](https://flutter.dev/go/template)).You may wish to e-mail the mailing list, or discuss the topic
on our [Chat](Chat.md) channels.The more buy-in you get from the rest of the
team (especially the relevant leads), the easier the rest of the process will be.You can put the label "proposal" on your issue to indicate that you have a design
up for discussion in the issue.-If the work you are doing affects our privacy surface, such as modifying howwe collect analytics, crash logs, or the like, then please reach out to a Googler
to discuss your changes (you'll want to start a Google Doc to
solicit feedback, use the template at [flutter.dev/go/template](https://flutter.dev/go/template)),
who will be happy to loop in one of our engineers who explicitly focus on privacy issues
so that they're able to give feedback on the work you plan to do.- Create a branch off of `main` (or if the repository has not yet switched tohaving a `main` branch, from `master`) on your GitHub fork of the repository, and implement
your change.Make sure it is tested (see the next section for details).You must follow the guidelines described in the [Style guide for Flutter repo](Style-guide-for-Flutter-repo.md).Files must not have trailing spaces.For the engine repository, C, C++, and Objective-C code should be formatted with`clang-format` before submission (use `buildtools/<OS>/clang/bin/clang-format --style=file -i`).- Submit this branch as a PR to the relevant Flutter repository.(See also: [Signing commits](./Signing-commits.md))- Get your code reviewed (see below).You should probably reach out to the relevant

expert(s) for the areas you touched and ask them to review your PR directly.GitHub sometimes recommends specific reviewers; if you're not sure who to ask,
that's probably a good place to start.- Make sure your PR passes all the pre-commit tests.Consider running some of thepost-commit tests locally (see the[devicelab](https://github.com/flutter/flutter/blob/main/dev/devicelab/README.md)
directory).If any tests break, especially the `customer_testing` tests, please
see the breaking change policy section below for details on how to proceed.The `luci-flutter` test isn't checking your PR, it's letting you know
whether the tree itself is passing the tests right now (including post-
commit tests).If the trees or dashboards are showing any regressions, only fixes
that improve the situation are allowed to go in.- Once everything is green and you have an LGTM from the owners of the code you are affecting (or someone to whom they

have delegated), and an LGTM from any other contributor who left comments, add the "autosubmit" label if you're in the flutter-hackers github group.A bot will land the patch when it feels like it.If you're not in the flutter-hackers group a reviewer will add the label for you.- Watch the post-commit tests on the [dashboard](https://dashboard.flutter.dev/#/build) to make sure everything passes.If anythinggoes wrong, revert your patch and study the problem.You should aim to be the one to revert your patch.You will be racing everyoneelse on the team who will also be trying to revert your patch.(See below for guidance on reverting PRs.)See also: [What should I work on?](What-should-I-work-on.md)
Tests
Every change in the flutter/engine, flutter/flutter, and flutter/packages repos
must be tested; consider using the code coverage tools to check that all your
new code is covered by tests (see [Test coverage for package:flutter](./testing/Test-coverage-for-package-flutter.md)).There is an automatic exception for PRs that:
- only remove code (no modified or added lines) to remove a feature or remove dead code.- removing code to fix a bug still needs a test, the exemption does not apply- only affect comments (including documentation).- only affect code inside the `.github` directory or `.ci.yaml` config files.- only affect `.md` files.- are generated by automated bots (rollers).If a reviewer says a PR should have a test, then it needs a test regardless of the exemptions above.Feel free to update the bot's logic to catch more cases that should be
automatically exempt ([in the cocoon repo](https://github.com/flutter/cocoon/blob/main/app_dart/lib/src/request_handlers/github/webhook_subscription.dart)).[!NOTE]PRs adding data-driven fixes require tests that fall under the test_fixes
directory, but are not yet recognized by the bot as being tested.The following kinds of PRs are not automatically exempt and require an exemption even if the answer may be obvious:
- refactors with no semantic change (e.g. null safety migrations)- configuration changes in the aforementioned repos- changes to analysis (fixing lints, turning on lints)- changes to test infrastructure- manual dependency rolls- fixes to existing tests- cosmetic fixes to unpublished example apps.In the repositories listed above, a bot will comment on your PR if you need an explicit exemption.[!IMPORTANT]If the PR is in a repository that is not listed above, meaning is not
supported by the bot, then it is still a responsibility of the pull request
reviewer to make sure that tests have been added to support the code change.Test Exemptions
A `@test-exemption-reviewer` member on [Discord](Chat.md) can exempt a PR by
commenting `test-exempt: <reason>`.The reviewer of the PR (not the test exemption reviewer) should first:
- ensure that the PR meets the criteria for exemption- LGTM the PR before requesting the exemption, or clarify why an LGTM was
not given.Exemption reviewers are a small volunteer group - all reviewers should
feel empowered to ask for tests.Using git
Assuming your environment has been configured according to the instructions in
[Setting up the Engine development environment](../engine/contributing/Setting-up-the-Engine-development-environment.md),
[Setting up the Framework development environment](Setting-up-the-Framework-development-environment.md), or
[Setting up the Packages development environment](../ecosystem/contributing/Setting-up-the-Packages-development-environment.md),
follow these steps to start working on a patch:
- `git fetch upstream`- `git checkout upstream/main -b name_of_your_branch`- `flutter update-packages`- Hack away.- `git commit -a -m "<your informative commit message>"`- `git push origin name_of_your_branch`GitHub provides you with a link for submitting the pull request in the message output by `git push`.Because `git pull` will often miss tags that are used to define the release of the flutter tool, it is recommended to use `git fetch` typically to avoid version mismatches when running `flutter update-packages`.Use `git fetch upstream; git rebase upstream/main; git push origin your_branch_name` to update your PRs, rather than using merge, because that way our tooling will recognize your PR as being up to date.(Otherwise it'll try testing against the tests at the time you originally branched.)Also, be wary of force pushing to your PR branch if you are dealing with golden image tests; see [gold troubleshooting instructions](./testing/Writing-a-golden-file-test-for-package-flutter.md#troubleshooting).Please make sure all your patches have detailed commit messages explaining what the problem was and
what the solution is.(Avoid GitHub @-mentions in commit messages.GitHub turns this into a notification
for the person any time someone rebases your commit on their own fork.On a project of this size, that's
rather disruptive.If you need to @-mention someone, do it as a separate comment on the PR.)You must complete the
[Contributor License Agreement](https://cla.developers.google.com/clas).You can do this online, and it only takes a minute.Getting a code review
Every PR must be code-reviewed before check-in, including things like
rolling a dependency.Getting a review means that a regular Flutter
contributor (someone with commit access; see [contributor access](Contributor-access.md) for details) has "approved" the PR in the
GitHub UI.We call this "getting an LGTM" ("looks good to me").If you are not yourself someone with commit access, then a second person
with commit access must also review and approve your PR.This ensures that
two people with commit access (trusted contributors) agree on every commit.Why
Code review serves many critical purposes.There's the obvious
purpose: catching errors.Even the most experienced engineers
frequently make errors that are caught by code review.But there are
also many other benefits of code reviews:
-It spreads knowledge among the team.Since every line of code willhave been read by two people, it's more likely that once you moveon, someone else will understand the code.- It keeps you honest.Knowing that someone will be reading yourcode, you are less tempted to cut corners and more motivated towrite code you are proud of.- It exposes you to different modes of thinking.Your code reviewerhas probably not thought about the problem in the same way youhave, and so may have a fresh perspective and may find you a better
way to solve the problem.We recommend you consider
[these suggestions](https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html)
for addressing code review comments on your PR.WhenIf you're working on a big patch, don't hesitate to get reviews early,
before you're ready to check code in.Also, don't hesitate to ask for
multiple people to review your code, and don't hesitate to provide unsolicited
comments on other people's PRs (although approvals in the GitHub UI
should be reserved for those with contributor access).The more
reviews the better.If nobody reviews your PR within two weeks, you can ask for
a review via our [Chat](Chat.md) channels.Start by asking in #hackers,
saying what your patch does and providing a link.Who
PRs are assigned reviewers weekly.The precise process varies by team but tends to be combined with issue [triage](../triage/README.md).Code should be reviewed by the owner (tech lead) of the area(s) of the codebase that you are changing,
or someone to whom they have delegated that authority.If anyone else leaves comments, please also wait for their approval (LGTM) before landing code.If nobody has reviewed your code after a week, then reach out on our [Chat](Chat.md) channels.The `#hackers-new` channel is a good place to ask for help if you're a new contributor.For PRs affecting the `material` and `cupertino` libraries, team members are expected to seek reviewers directly;
they will not be assigned during PR triage.How
Code review status is managed via GitHub's approval system.PRs should
not be merged unless one or more contributors with commit access (at
least one of which should be very familiar with the code in question)
have approved the PR in the GitHub UI.Reviewers should carefully read the code and make sure they understand
it.A reviewer should check the code for both high level concerns,
such as whether the approach is reasonable and whether the code's structure makes sense, as well as
lower-level issues like how readable the code is and adherence to the
[Flutter style guide](Style-guide-for-Flutter-repo.md).Use [these best practices](https://mtlynch.io/human-code-reviews-1/)
when reviewing code and providing comments.As a reviewer, you are the last line of defense.- Did the author sign the CLA?If not, ask them to do so and don't look at the code.- Take a step back.What problem is the PR trying to solve?Is it a real problem?- What other solutions could we consider?What could we do to make this even better?- Is it the best API?See our [philosophy](Style-guide-for-Flutter-repo.md#philosophy) section.Look for state duplication, synchronous slow work, complecting, global state, overly-specific APIs, API cliffs and API oceans, API design in a vacuum (without a customer).If these terms don't make sense, read the style guide again. :-)- Is it the best implementation?Again, see our [style guide](Style-guide-for-Flutter-repo.md#coding-patterns-and-catching-bugs-early), in particular its section on good coding patterns.Are there hacks?Are we taking on more technical debt?Think of ways in which the code could break.- Is it testable?Is it tested?All code must be tested.Are there asserts?Encourage liberal use of assertions.- Look for mistakes in indenting the code and other trivial formatting problems.- Is new code licensed correctly?- Is the documentation thorough and useful?Look for useless documentation, empty prose, and breadcrumbs.See the [documentation section](Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc) of our style guide for what that means.- Check for good grammar in API docs and comments.Check that identifiers are named according to our conventions.Once you are satisfied with the contribution, and only once you are satisfied,use the GitHub "Approval" mechanism (an "LGTM" comment is not sufficient).If you feel like you are being worn down, hand the review to someone else.Consider
our [conflict resolution](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md#conflict-resolution)
policy if you feel like you are being forced to agree to something you don't like.Reviewers should not give an LGTM unless the patch has tests that verify
all the affected code, or unless a test would make no sense.If you
review a patch, you are sharing the responsibility for the patch with
its author.You should only give an LGTM if you would feel confident
answering questions about the code.In general, reviewers should favor approving a PR once it is in a state where it definitely improves the overall code health of the system being worked on, even if the PR isn't perfect.Reviewers should also provide positive feedback throughout the process, to offset the impact of the stream of critiques that is code review.Reviewers should always feel free to leave comments expressing that something could be better, but if it's not very important, prefix it with something like "Shouldn't block this PR but: " to let the author know that it's just a point of polish that they could choose to ignore in the current PR (these should be documented in TODO comments with a tracking issue).If you are not a regular Flutter contributor (someone with commit access),
we very much welcome your reviews on code contributions in the form of comments
on the code, but please refrain from approving or LGTM'ing changes, as it
confuses PR authors, who may think your approval is authoritative and merge
the PR prematurely.When commenting on a PR, keep in mind the following mantra:
- Be polite and grateful.Graceful professionalism.- Explain what is happening.Explain why it is happening.- Provide next steps.Set expectations.It's better to close a PR than to leave it in limbo.See also: [How to review a Flutter PR](https://docs.google.com/presentation/d/1apKVLEAEqxINby49JhLWSLI-CMH0nxCcnrf90nW4cts/edit?usp=sharing) presentationWhat (to do when the patch is abandoned)Sometimes the contributor is unable to finish the work of landing the patch.In that case, if the PR has promise, we may close it but mention it on the relevant issue so that other interested parties can pick it up.Such issues are given the label [has partial patch](https://github.com/flutter/flutter/labels/has%20partial%20patch).Landing a patchOnce you have submitted your patch and received your LGTM, if you do not have commit access to
the repository yet, then wait for one of the project maintainers to submit it for you.If you do have access, add the "autosubmit" label.A bot will land the PR for you.Squashing commitsWhen you squash commits, by default, GitHub will concatenate all your commit messages to form a unified commit message.This often yields an overly verbose commit message with many unhelpful entries (e.g. "fix typo").Please double-check (and hand-edit if necessary) your commit message before merging such that the message contains a helpful description of the overall change.Tree breakage (regressions in functionality)If a check-in has caused a regression on the main branch (sometimes "master") for any of the flutter repositories,
revert (roll back) the check-in (even if it isn't yours).Do not attempt to forward-fix post-submit test failures.There is no shame in making mistakes!Reverts happen all the time and are a normal part of engineering.To revert a PR, just add the `revert` label to it.For more details, see [Landing Changes With Autosubmit](../infra/Landing-Changes-With-Autosubmit.md).Avoid "Revert "Revert "Revert "Revert "Fix foo"""" commit messages
Please limit yourself to one "Revert" per commit message, otherwise we won't
have any idea what is actually landing.Is it putting us back to where we were before?Is it adding new code?Is it a controversial new feature that actually caused
a regression before but is now fixed (we hope)?Only use "Revert" if you are actually returning us to a known-good state.Also avoid using "Reland" in the commit message.When you later revert the revert, just land the PR afresh with the original commit message,
possibly updated with the information since collected, and include a link
to the original PR and to the revert PR so that people can follow the breadcrumbs later.Regressions in performance
After each check-in, please monitor the [performance dashboards](https://flutter-dashboard.appspot.com/).If you see a regression (any of the charts increasing after your commit), please
follow these steps:
- Comment on the PR acknowledging the regression.- If the regression is expected and is a desirable trade-off (e.g. disk size
increased slightly in exchange for a significant improvement in speed), thenrebaseline the relevant benchmarks (log in, then click the magnifying glass
at the top right of each chart, then click the button to auto rebaseline and
commit).- If the regression is not expected, and may be a problem in your PR, revertyour PR and investigate.- If the regression is not expected, and is quite severe, revert your PR andinvestigate.- If the regression is not expected, and is not severe, and is definitely nota problem in your PR (e.g. you changed a comment and the analyzer performancegot worse, or you deleted a README and the rasterizer slowed down), then file
a bug, labeled with the "regression", "performance", `P0` labels, and either
investigate or delegate to someone to investigate.The investigation should be
considered a high priority.It is your responsibility to make sure that the
cause is understood within a few days.Performance regressions are not a problem so long as they are promptly dealt with.Therefore, Flutter considers all unexpected performance regressions to be `P0` until
we have it under control (e.g. we know what caused it and either have a fix under
way or have determined it is an acceptable trade-off).Performance regressions caused by auto-roller commits
Although reverting a normal commit that caused performance regressions is the default
behavior, reverting an [auto-roller](../infra/Autorollers.md)
(e.g., an engine-roller commit like [https://github.com/flutter/flutter/commit/fdcb57b69eff2162e9aead6dec0f8058788e7608](https://github.com/flutter/flutter/commit/fdcb57b69eff2162e9aead6dec0f8058788e7608))
commit could cause some complications:
- The auto-roller commit usually include multiple commits of the source repo (e.g., engine-rollercommit includes multiple commits of [https://github.com/flutter/engine](https://github.com/flutter/engine)).This can be appliedrecursively as the engine-roller commit includes a dart-roller commit, or a skia-roller commit.Therefore, a roller commit could actually include a ton of leaf-level commits, which makes it
really hard to triage which leaf commit actually caused the regression.- The auto-roller will try to roll again as soon as possible that will reland any changes revertedby a Flutter commit revert.So in order to keep the revert effective, one has to either(1) pause the auto-roller, or (2) revert the leaf commit in the source repo.- If the auto-roller is paused for a long time (say 1 day), the source repo will accumulate manycommits.That makes the next roll very hard to manage: it's difficult to triage a build failureor a new performance regression caused by the next roll, since that roll will include all the commits
in the paused period.Therefore, reverting a roller commit or pausing the auto-roller is
NOT the default action if it causes a performance regression.The default action should be to file an issue with labels "performance", "regression", and `P0`
immediately, and start investigating which leaf-commit caused the regression.Once the leaf-commit
is identified, check if it's an expected trade-off.If so, remove the `P0` label and try to see
if there's any way to mitigate the regression.If not, revert the leaf commit in the source repo
and let the auto-roller apply that revert.Once the revert is rolled into Flutter, close the issue.Handling interdependent/multi-repo changesIf you're working on a feature that requires changes in both the [framework](https://github.com/flutter/flutter) and [engine](https://github.com/flutter/flutter) repos, you'll need to make 2 separate PRs.In such situation CI on the framework PR may fail because it depends on engine code that is not (yet) on engine repo's main branch.In such situation, you need to land the changes in the engine first, wait for them to roll into the framework's main branch, and then rebase your framework PR.Handling breaking changesIn general, we want to avoid making changes to Flutter, our plugins, or our packages, that force developers using Flutter to change their code in order to upgrade to new versions of Flutter.See [our compatibility policy](https://flutter.dev/docs/resources/compatibility).Sometimes, however, doing this is necessary for the greater good.We want our APIs to be
intuitive; if being backwards-compatible requires making an API into something that we would
never have designed that way unless forced to by circumstances, then we should instead break
the API and make it good.The process for making breaking changes is as follows:1. Determine if your change is a breaking changeImplement the change you wish to see and run the existing tests against your new code (without having changed the tests first).Changes that break (i.e. require changes to) one or more of the contributed tests are considered "breaking changes".The "contributed tests" are:
- Those in the [customer_testing](https://github.com/flutter/tests) shard on `flutter/flutter` PRs.- Additional test suites that we have been allowed to run but that are not public.(Notably, Google allows us to run several tens of thousands of [proprietary tests](../infra/Understanding-Google-Testing.md) on each commit.)There are no exemptions to this policy, because these tests run in our CI and breaking them will close the tree.In cases where these tests pass but we can nonetheless imagine reasonable scenarios where developers would be affected negatively, by courtesy, once the change has landed, engineers are encouraged to announce the changes by sending an e-mail to [flutter-announce@](https://groups.google.com/g/flutter-announce), a message to the `#announcements` channel on our [Chat](Chat.md), and tagging the relevant issues with the [c: API break label](https://github.com/flutter/flutter/labels/c%3A%20API%20break) (such that they will be included in our release notes).However, we do not consider these breaking changes.(One reason to do this would be if we see our own tests being significantly affected, even if no contributed test actually fails.)2. Evaluate the breaking changeIf your change counts as a breaking change, seriously consider whether it is truly necessary and beneficial.Consider writing a [design document](Design-Documents.md).Discuss it with your code reviewer.Raise it in [Chat](Chat.md).3. Prepare your change.If you decide your change is valuable enough to deploy, adjust your PR so that it introduces the new functionality, API, behavior change, etc, in an opt-in fashion, thus avoiding the immediate breakage.For example, rather than replacing a widget with another, introduce the new widget and discourage use of the old one.Rather than changing the order in which a certain argument is processed, provide a flag that selects which order the arguments will be processed in.When changing the semantics of an API with a temporary opt-in, a three-phase change is needed (adding the new API and opt-in, then removing the old API, then removing the opt-in.)If possible, avoid four-phase deprecations (adding a new API with a temporary name and deprecating an old API, removing the old API, changing the new API to the old name and deprecating the temporary name, and finally removing the temporary name), because they involve a lot of churn and will irritate our developers.Stage your change and the documentation for your change.Typically this will be two or more PRs, plus PRs to fix the tests that were broken (see step 1), as well as writing a migration guide as a PR to the Website repository.If possible, include flutter fixes to aid users in migration.Whether or not the change is supported by flutter fix should be included in the migration guide.To learn about authoring fixes, see [Data driven Fixes](Data-driven-Fixes.md).Use our [breaking change migration guide template](https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/template.md) (follow all the instructions in the comments) to create the migration guide that describes the change.Do not land the migration guide at this time.You will need to update it before you land it in the last step.4. Land your change.Once you are ready, have received feedback, iterated on your design and your migration guide, land your initial change and start migrating clients.Do not yet land the migration guide.Once all the clients are migrated, land your final change.(You may have several iterations here if you have a multiphase roll-out.)During this process, each individual PR does not break any tests, so it should not block any autorollers.5. Document the change, including clear documentation for migrating code, with samples, and clear rationales for each changeOnce everything has landed:- update your migration guide based on your experience migrating everyone,- update the timeline on the guide, and push it to [the flutter.dev Web site](https://flutter.dev/docs/release/breaking-changes)(don't forget to update the [index](https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/index.md) of that directory as well),- e-mail a copy to [flutter-announce@](https://groups.google.com/g/flutter-announce),- notify the `#announcements` channel on our [Chat](Chat.md), and- add the [c: API break label](https://github.com/flutter/flutter/labels/c%3A%20API%20break) to the relevant issues, so they get listed in the upcoming Release notes.DeprecationsOld APIs can be marked as deprecated as part of this process.Deprecation is not a way to avoid making a breaking change; you should consider deprecating an API to be equivalent to removing it, as some of our customers (and we ourselves) consider using a deprecated API to be anathema (triggering a build failure).The syntax for deprecations must match the following pattern:```
@Deprecated(
  'Call prepareFrame followed by owner.requestVisualUpdate() instead. '
  'This will enable an improvement to performance in a future version of Flutter.'
  'This feature was deprecated after v2.9.0-0.1.pre.'
)```In other words:```
@Deprecated(
  '[description of how to migrate] '
  '[brief motivation for why we are breaking the API] '
  'This feature was deprecated after [beta version at time of deprecation].'
)```Using this standard form ensures that we can write a script to detect all deprecated APIs and remove them.We have a test that verifies that this syntax is followed.To determine the latest beta version, see [https://flutter.dev/docs/development/tools/sdk/releases](https://flutter.dev/docs/development/tools/sdk/releases).When adding a deprecation notice to the framework, a flutter fix should be included with your change.This helps users migrate to the new API as easily as possible.To learn more about authoring fixes, see [Data driven Fixes](Data-driven-Fixes.md).If a fix cannot be written for the new API, please file an issue in [https://github.com/dart-lang/sdk](https://github.com/dart-lang/sdk) and link to it in your change.When deprecating features, be aware that you will not by default be informed when the Flutter code itself uses the deprecated feature (there is a `deprecated_member_use_from_same_package: ignore` line in the root `analysis_options.yaml` file).To find places where the old feature is used, rename its declaration and see where the compiler complains.(You can't just comment out the "ignore" in the `analysis_options.yaml` file because it's hiding hundreds of other warnings...)Removing deprecated APIs from the framework are not currently planned.In the past, deprecations were removed after a set
amount of time.This is not currently in practice.If and when we do resume removing deprecated APIs, it will be announced
across several channels like the [flutter-announce group](https://groups.google.com/g/flutter-announce), and the
[Discord](../contributing/Chat.md).Skipped Tests
Tests can be skipped using the `skip` parameter of `test()`, `group()` and `testWidgets()`.However, they  should be kept to a minimum and only done for the following two reasons.The first is if there is a test that is flaky, we can mark is as temporarily skipped to keep the tree green while a fix for it is developed.For these types of skips you need to file a tracking issue so we can ensure there is follow up to remove the skip.This tracking issue should be tagged with the `skip-test` label.Then in a comment on the same line as the parameter, include a link to this issue:```
  skip: true, // https://github.com/flutter/flutter/issues/XXXXX```The other reason to use the skip parameter is to mark a test that by design doesn't make sense to test under a specific condition.An example would be a test that only tests a feature available on a specific platform or environment.For these cases, include a comment on the same line as the skip parameter with the text `[intended]` and a short description of why the skip is needed:```
  skip: isBrowser, // [intended]There are no default transitions to test on the web.```If the analyzer script sees a skip without a comment containing either an issue link or an `[intended]` tag, it will report and error and fail the check.

--------------------------------

If you want to write a design doc for people to review, we recommend using Google Docs.We have a template you can use, at [flutter.dev/go/template](https://flutter.dev/go/template).It describes the process for minting a `flutter.dev/go/foo` shortlink for your design doc.We recommend you use that template so that people can immediately recognize that this is a Flutter design document and that it is shared publicly.After you have created your design doc, the next step is to create a tracking GitHub issue for it.File a new issue to track the design doc using [the design doc issue template](https://github.com/flutter/flutter/issues/new?template=7_design_doc.yml).Assign it to yourself.Add the label "design doc" to the issue.Don't forget to configure your document's Sharing settings so that everyone has comment access.The idea of sharing the document in this way is not necessarily to proactively obtain feedback from the entire community; it is to make it possible for people to share the document with anyone in the community, whether they work for your employer or not, and whether you have personally shared the document with them yet or not.The template discusses how to create a shortlink for your design doc (flutter.dev/go/...).When creating the shortlink, remember to test the URL you are publishing in an incognito window!Googlers: Design docs must be created by non-corp accounts!See [Contributor Access](Contributor-access.md#fcontriborg-accounts) for details on getting `fcontrib.org` accounts if you don't want to use your personal GMail account.When you implement a design, document it in the source code in detail.The API documentation is the usual place where we document our designs.It's perfectly reasonable for API docs to be multiple pages long with subheadings (e.g. see the docs for [RenderBox](https://master-api.flutter.dev/flutter/rendering/RenderBox-class.html)!).Do not assume that anyone will ever read your design doc after the discussion has finished.Similarly, do not assume that anyone will look at closed GitHub issues or PR discussions.See also:- [design doc](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22design+doc%22) GitHub issue label: list of all design documents.- [Archive of design documents](https://github.com/flutter/flutter/issues/151486) from before the [design doc](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22design+doc%22)GitHub issue label was introduced.Purpose of design docsThe Flutter project uses design docs as a tool for guiding discussions.Decisions are made in PRs, not in design docs.Approvals are given in PRs, not in design docs.Soliciting feedbackIf you wish to get feedback on your design doc, you have many options for doing so, depending on how much feedback you want:-If there is an issue already filed on the topic, definitely put a link to the design doc there.People who have found the issue and want to get updates on the topic will have subscribed to the issue, so this is the most effective way to communicate with them.- Post the link on Discord.You can post it to #hidden-chat to just get feedback from team members.You can post it to one or more of the #hackers-* channels if you want feedback from people who are interested in the general area.You can post it to the global #hackers channel if you want feedback from anyone interested in working on Flutter.If you really want feedback, you can post a request to #announcements and publish it to any server that is following ours.- If you want feedback from the broad community, tweet out the link and let other team members know so that we can retweet it.Similarly, you can post the request to one of the Flutter reddit channels, such as r/FlutterDev.- You can ask our developer relations (devrel) team to broadcast a request for comments.(Start by asking in #hackers-devrel; if nobody responds, ping Hixie on that channel.)- You can ask our user experience researcher (UXR) team to study the proposal and potentially test it with real users, or collect relevant data from the next quarterly survey.(Start by asking in #hackers-devexp; if nobody responds, ping Hixie on that channel.)- If you have commit access, you can ask to talk about the design doc at the next Dash Forum meeting (normally held on Tuesdays at 11am US west coast time).Ping Hixie on #hidden-chat to get on the schedule, or use the form to request to be added, the link for which is pinned in the #hidden-chat channel.How to get good feedback
Often, you will solicit feedback, and get none.There are many causes of this.Maybe your proposal is unclear, and so people don't really know what to suggest.People are often reluctant to provide broad criticisms.Consider if you can improve the clarity of your design doc.Do you have a clear problem statement separate from your solution?Do you show example code of the problem?Do you have screenshots or diagrams of the problem?For your solution, do you start from first principles and explain it?Often it's easy to forget that your readers don't have the same context you do, so without a gentle introduction they'll get lost very quickly.Do you have sample code of your proposed solution(s)?Do you need more diagrams or screenshots?Ask someone you trust if they think your document is sufficiently clear.Maybe your proposal is too big for anyone to get their head around.Can it be split into smaller components, so that each one can be understood separately, before bringing all the pieces together into your grand design?(You can do this all in the same doc.)Maybe people don't know what to provide feedback about.If you have an area you are particularly interested in getting feedback about, it can be very helpful to explicitly invite such feedback.Maybe you are asking the wrong people.Consider the suggestions in the earlier section, and reach out explicitly to people who are affected by your proposal.Consider escalating, asking more and more people until you get the volume of feedback you desire.Maybe everyone agrees.Consider leaving some intentionally sketchy details in your proposal to encourage people to engage!(This is a risky strategy, sometimes people end up liking your "bad" ideas...)Maybe your proposal is too obvious or uninteresting.Sometimes, a change is so uncontroversial and simple that frankly it would be better just to write the PR and submit it.Content in design docs
Screen capturesThe easiest way to capture videos for design docs is using macOS.Press Command+Shift+5 for a whole bunch of options.DiagramsAs we use Google Docs for the text portion of design docs, the easiest way to draw diagrams is using Google Diagrams.Select `Insert` > `Drawing` > `New` to create a new diagram.

--------------------------------

Prerequisites- Linux, macOS, or Windows- `git` (used for source version control)- An IDE, such as [Android Studio with the Flutter plugin](https://docs.flutter.dev/development/tools/android-studio) or [VS Code](https://docs.flutter.dev/development/tools/vs-code)- Android platform tools
- Mac: `brew install --cask android-platform-tools`- Linux: `sudo apt-get install android-tools-adb`Verify that `adb` is in your [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) (that `which adb` prints sensible output).If you're
[also working on the Flutter engine](../engine/contributing/Setting-up-the-Engine-development-environment.md),
you can use the copy of the Android platform tools in`.../engine/src/third_party/android_tools/sdk/platform-tools`.- Python (used by some of our tools)Set up your environment- Clone the flutter/flutter repo using either SSH or HTTPS (SSH is recommended, but requires a working [SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh) on your GitHub account):- SSH: `git clone git@github.com:flutter/flutter.git`- HTTPS: `git clone https://github.com/flutter/flutter.git`- Change into the directory of the cloned repository and rename the origin remote to upstream:
- `cd flutter`- `git remote rename origin upstream`- [Fork the flutter/flutter repo](https://github.com/flutter/flutter/fork) into your own GitHub account.- Add your fork as the origin remote to your local clone either using SSH or HTTPS (SSH is recommended, but requires a working [SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh) on your GitHub account) by replacing ████████ with your GitHub account name:
- SSH: `git remote add origin git@github.com:████████/flutter.git`- HTTPS: `git remote add origin https://github.com/████████/flutter.git`- Verify the upstream and origin repository you've specified for your clone.- `git remote -v`- Add the repo's `bin` directory to your [PATH](https://en.wikipedia.org/wiki/PATH_(variable)): e.g. on UNIX, using `export PATH="$PATH:$HOME/<path to flutter repository>/bin"`
-If you already have a Flutter installation you will either need to remove it from your PATH, or use a full path whenever you are running `flutter` in this repository.If you have version solving errors when trying to run examples below, you are running a version of Flutter other than the one checked out here.- `flutter update-packages`This will recursively fetch all the Dart packages thatFlutter depends on.If version solving failed, try `git fetch upstream` to update Flutter versions before `flutter update-packages`.TipIf you plan on using IntelliJ as your IDE, then also run
`flutter ide-config --overwrite` to create all of the IntelliJ configuration
files so you can open the main flutter directory as a project and run examples
from within the IDE.Next steps:
- [Running examples](../examples/Running-examples.md), to see if your setup works.- [The flutter tool](../tool/README.md), to learn about how the `flutter` command line tool works.- [Style guide for Flutter repo](Style-guide-for-Flutter-repo.md), to learn how to write code for Flutter.- [Tree hygiene](Tree-hygiene.md), to learn about how to submit patches.- [Signing commits](Signing-commits.md), to configure your environment to securely sign your commits.

--------------------------------

If you've already built the engine and have the configuration set up but merely need a refresher on
actually compiling the code, see [Compiling the engine](Compiling-the-engine.md).If you are checking these instructions to refresh your memory and your fork of the engine is stale,
make sure to merge up to HEAD before doing a `gclient sync`.Getting dependenciesMake sure you have the following dependencies available:- A Linux, macOS, or Windows host
- Linux supports cross-compiling artifacts for Android and Fuchsia, but not iOS.- macOS supports cross-compiling artifacts for Android and iOS.- Windows doesn't support cross-compiling artifacts for any of Android, Fuchsia, or iOS.- `git` (used for source version control).- An ssh client (used to authenticate with GitHub).- `python3` (used by many of our tools, including `gclient`).- Chromium's[depot_tools](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up)(Which includes gclient)-Add the `depot_tools` directory to the front of your `PATH`.- On macOS and Linux: `curl` and `unzip` (used by `gclient sync`).- On Linux: The `pkg-config` package.- On Windows:
- Visual Studio 2017 or later (required for non-Googlers only).- [Windows 10 SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/) (required for non-Googlers only).Be sure to install the "Debugging Tools for Windows" feature.- On macOS:
- Install the latest Xcode.- On Apple Silicon arm64 Macs, install the Rosetta translation environment by running `softwareupdate --install-rosetta`.You do not need to install [Dart](https://www.dartlang.org/downloads/linux.html).A Dart toolchain is automatically downloaded as part of the "Getting the source"
step.Similarly for the Android SDK, it is downloaded by the `gclient sync` step below.Getting the source
Run the following steps to set up your environment:
[!IMPORTANT]Non-Googler Windows users should set the following environment variables to point`depot_tools` to their Visual Studio installation directory:
- `DEPOT_TOOLS_WIN_TOOLCHAIN=0`- `GYP_MSVS_OVERRIDE_PATH=C:\Program Files\Microsoft Visual Studio\2022\Community`
- Use the path of your installation.Clone the Flutter source code.As of late 2024, the engine source is part of the main [flutter/flutter repo](https://github.com/flutter/flutter).The convention is to fork this repo and point `origin` to your fork and `upstream` to `git@github.com:flutter/flutter.git`.See [Setting up the Framework development environment](https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#set-up-your-environment) for more.[!IMPORTANT]On Windows, the following must be run as an Administrator due to [a known issue](https://github.com/flutter/flutter/issues/94580).[Setup a .gclient file](../../../../../engine/README.md) in the repository
root (the `flutter/flutter` repository root), and run `gclient sync`.The "Engine Tool" called `et` is useful when working with the engine.It is located in the [flutter/engine/src/flutter/bin](https://github.com/flutter/flutter/tree/0c3359df8c8342c8907316488b1404a216f215b6/engine/src/flutter/bin) directory.Add this to your `$PATH` in your `.rc` file: e.g. on UNIX, using `export PATH=/path/to/flutter/engine/src/flutter/bin:$PATH`.Additional Steps for Web Engine
Amend the generated `.gclient` file in the root of the source directory to add the following:```
solutions = [
  {
    # Same as above...
    "custom_vars": {
      "download_emsdk": True,
    },
  },
]```Now, run:```
gclient sync```Next steps:
- [Compiling the engine](Compiling-the-engine.md) explains how to actually get builds, now that you have the code.- [The flutter tool](https://github.com/flutter/flutter/blob/master/docs/tool/README.md) has a section explaining how to use custom engine builds.- [Signing commits](https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md), to configure your environment to securely sign your commits.Editor autocomplete supportXcode [Objective-C++]On Mac, you can simply use Xcode (e.g., `open out/host_debug_unopt/products.xcodeproj`).VSCode with C/C++ Intellisense [C/C++]VSCode can provide some IDE features using the [C/C++ extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools).It will provide basic support on install without needing any additional configuration.There will probably be some issues, like header not found errors and incorrect jump to definitions.Intellisense can also use our `compile_commands.json` for more robust functionality.Either symlink `src/out/compile_commands.json` to the project root at `src` or provide an absolute path to it in the `c_cpp_properties.json` config file.See ["compile commands" in the c_cpp_properties.json reference](https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference).This will likely resolve the basic issues mentioned above.For example, in `src/.vscode/settings.json`:```
{
  "clangd.path": "buildtools/mac-arm64/clang/bin/clangd",
  "clangd.arguments": [
    "--compile-commands-dir=out/host_debug_unopt_arm64"
  ],
  "clang-format.executable": "buildtools/mac-arm64/clang/bin/clang-format"
}```... which is built with:```
THIS IS END BLOCK MARKER.
# M1 Mac (host_debug_unopt_arm64)
./tools/gn --unopt --mac-cpu arm64 --enable-impeller-vulkan --enable-impeller-opengles --enable-unittests```For adding IDE support to the Java code in the engine with VSCode, see .Zed Editor
[Zed](https://zed.dev/) can be used to edit C++ code in the Engine.To enable analysis and auto-completion, symlink `src/out/compile_commands.json` to the project root at `src`.
cquery/ccls (multiple editors) [C/C++/Objective-C++]Alternatively, [cquery](https://github.com/cquery-project/cquery) and a derivative [ccls](https://github.com/MaskRay/ccls) are highly scalable C/C++/Objective-C language server that supports IDE features like go-to-definition, call hierarchy, autocomplete, find reference etc that works reasonably well with our engine repo.They([https://github.com/cquery-project/cquery/wiki/Editor-configuration](https://github.com/cquery-project/cquery/wiki/Editor-configuration)) [supports](https://github.com/MaskRay/ccls/wiki/Editor-Configuration) editors like VSCode, emacs, vim etc.To set up:
- Install cquery- `brew install cquery` or `brew install ccls` on osx; or- [Build from source](https://github.com/cquery-project/cquery/wiki/Getting-started)- Generate compile_commands.json which our GN tool already does such as via `src/flutter/tools/gn --ios --unoptimized`- Install an editor extension such as [VSCode-cquery](https://marketplace.visualstudio.com/items?itemName=cquery-project.cquery) or [vscode-ccls](https://marketplace.visualstudio.com/items?itemName=ccls-project.ccls)- VSCode-query and vscode-ccls requires the compile_commands.json to be at the project root.Copy or symlink `src/out/compile_commands.json` to `src/` or `src/flutter` depending on which folder you want to open.- Follow [Setting up the extension](https://github.com/cquery-project/cquery/wiki/Visual-Studio-Code#setting-up-the-extension) to configure VSCode-query.Using VSCode as an IDE for the Android Embedding [Java]- Install the extensions vscjava.vscode-java-pack (Extension Pack for Java) and vscjava.vscode-java-dependency (Project Manager for Java).- Right click on the `shell/platform/android` folder in the engine source and click on `Add Folder to Java Source Path`.This creates an anonymous workspace and turns those files from ["syntax mode"](https://code.visualstudio.com/docs/java/java-project#_syntax-mode) to "compile mode".At this point, you should see a lot of errors since none of the external imports are found.- Find the "Java Dependencies" pane in your Explorer view.Use the "Explorer: Focus on Java Dependencies View" command if hidden.- Refresh the view and find the "flutter_*" project.There should be a "_/shell/platform/android" source folder there.- In the "Referenced Libraries" sibling node, click the + button, navigate to `engine/src/third_party/android_embedding_dependencies` and add the entire folder.This is the equivalent of adding```"java.project.referencedLibraries": [
  "{path to engine}/src/third_party/android_embedding_dependencies/lib/**/*.jar"
]```to your VSCode's settings.json for your user or for your workspace.- If you previously had a `shell/platform/android/.classpath`, delete it.Using Android Studio as an IDE for the Android Embedding [Java]Alternatively, Android Studio can be used as an IDE for the Android Embedding Java code.See docs
at [https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#editing-java-code](https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#editing-java-code) for
instructions.VSCode Additional Useful Configuration
- Create [snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets) for header files with [this configuration](https://github.com/chromium/chromium/blob/master/tools/vscode/settings.json5).This will let you use `hdr` keyboard macro to create the boiler plate header code.Also consider some of [these settings](https://github.com/chromium/chromium/blob/master/tools/vscode/settings.json5) and [more tips](https://chromium.googlesource.com/chromium/src/+show/lkgr/docs/vscode.md).- To format GN files on save, [consider using this extension](https://marketplace.visualstudio.com/items?itemName=persidskiy.vscode-gnformat).

--------------------------------

This wiki is primarily aimed at engineers building or making contributions to Flutter.If you are new to Flutter, then you will find more general information on the Flutter project, including tutorials and samples, on our website at [flutter.dev](https://flutter.dev).For specific information about Flutter's APIs, consider our API reference which can be found at the [api.flutter.dev](https://api.flutter.dev/).If you want to know what we're likely to do in the future, our [roadmap](./roadmap/Roadmap.md) may be of interest.If you intend to contribute to Flutter, welcome!You are encouraged to start with [our contributor guide](../CONTRIBUTING.md), which helps onboard new team members.It points to the most relevant pages on this wiki.You are also invited to join our [Discord](./contributing/Chat.md) server.Index of notable sections- [Actionable bugs](./triage/README.md#what-makes-an-issue-actionable), and the closing of unactionable bugs- [Breaking changes](./contributing/Tree-hygiene.md#handling-breaking-changes)- [Cherrypick process](./releases/Flutter-Cherrypick-Process.md)- [Closing issues](./contributing/issue_hygiene/README.md#closing-issues)- [Dashboards](./infra/Dashboards.md)- [Debugging a broken engine autoroll](./engine/Debugging-the-engine.md#bisecting-a-roll-failure)- [Deprecations](./contributing/Tree-hygiene.md#deprecations)- [Design documents](./contributing/Design-Documents.md)- [Discord](./contributing/Chat.md)- [Engineering Philosophy](./contributing/Style-guide-for-Flutter-repo.md#philosophy)- [Flaky tests](./contributing/issue_hygiene/README.md#flaky-tests)- [flutter.dev is down](./In-case-of-emergency.md)- [Issue prioritization](./contributing/issue_hygiene/README.md#priorities)- [Labels](./contributing/issue_hygiene/README.md#labels)- [Milestones](./contributing/issue_hygiene/README.md#milestones)- [Plugin compatibility policy](./contributing/Style-guide-for-Flutter-repo.md#plugin-compatibility)- [Reviewing code](./contributing/Tree-hygiene.md#getting-a-code-review)- [RFC process](./contributing/issue_hygiene/README.md#how-to-propose-a-specific-change)- [Status of popular issues](./contributing/issue_hygiene/Popular-issues.md)- [Style guide for Flutter repo](./contributing/Style-guide-for-Flutter-repo.md)- [Submitting code, process for](./contributing/Tree-hygiene.md#overview)- [Support levels, definitions of](./about/Values.md#support)- [Symbolicating stack traces](./engine/Crashes.md)- [Threading in the Engine](./about/The-Engine-architecture.md#threading)- [When will my bug be fixed?](./contributing/issue_hygiene/README.md#when-will-my-bug-be-fixed)- [Security best practices](./infra/Security.md#best-practices)

--------------------------------

Contributing to Node.js
Contributions to Node.js include code, documentation, answering user questions,
running the project's infrastructure, and advocating for all types of Node.js
users.The Node.js project welcomes all contributions from anyone willing to work in
good faith with other contributors and the community.No contribution is too
small and all contributions are valued.The Node.js project has an open governance model.Individuals making significant and valuable contributions are made
Collaborators and given commit-access to the project.See the
[GOVERNANCE.md](./GOVERNANCE.md) document for more information about how this
works.Contents

----[Code of Conduct](./doc/contributing/code-of-conduct.md)The Node.js project has a
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md)
to which all contributors must adhere.See [details on our policy on Code of Conduct](./doc/contributing/code-of-conduct.md).[Issues](./doc/contributing/issues.md)- [Asking for General Help](./doc/contributing/issues.md#asking-for-general-help)- [Discussing non-technical topics](./doc/contributing/issues.md#discussing-non-technical-topics)- [Submitting a Bug Report](./doc/contributing/issues.md#submitting-a-bug-report)- [Triaging a Bug Report](./doc/contributing/issues.md#triaging-a-bug-report)[Pull Requests](./doc/contributing/pull-requests.md)Pull Requests are the way concrete changes are made to the code, documentation,
dependencies, and tools contained in the `nodejs/node` repository.- [Dependencies](./doc/contributing/pull-requests.md#dependencies)- [Setting up your local environment](./doc/contributing/pull-requests.md#setting-up-your-local-environment)- [The Process of Making Changes](./doc/contributing/pull-requests.md#the-process-of-making-changes)- [Reviewing Pull Requests](./doc/contributing/pull-requests.md#reviewing-pull-requests)- [Notes](./doc/contributing/pull-requests.md#notes)Developer's Certificate of Origin 1.1```By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I
     have the right to submit it under the open source license
     indicated in the file; or(b) The contribution is based upon previous work that, to the best
     of my knowledge, is covered under an appropriate open source
     license and I have the right under that license to submit that
     work with modifications, whether created in whole or in part
     by me, under the same open source license (unless I am
     permitted to submit under a different license), as indicated
     in the file; or(c) The contribution was provided directly to me by some other
     person who certified (a), (b) or (c) and I have not modified
     it.(d) I understand and agree that this project and the contribution
     are public and that a record of the contribution (including all
     personal information I submit with it, including my sign-off) is
     maintained indefinitely and may be redistributed consistent with
     this project or the open source license(s) involved.```

--------------------------------

Node.js Project Governance
 raw HTML omitted 

-- -- -- -----
 raw HTML omittedTriagers
Triagers assess newly-opened issues in the [nodejs/node](https://github.com/nodejs/node) and [nodejs/help](https://github.com/nodejs/help)
repositories.The GitHub team for Node.js triagers is @nodejs/issue-triage.Triagers are given the "Triage" GitHub role and have:- Ability to label issues and pull requests- Ability to comment, close, and reopen issues and pull requestsSee:- [List of triagers](./README.md#triagers)- [A guide for triagers](./doc/contributing/issues.md#triaging-a-bug-report)Collaborators
Node.js core collaborators maintain the [nodejs/node](https://github.com/nodejs/node)GitHub repository.The GitHub team for Node.js core collaborators is @nodejs/collaborators.Collaborators have:- Commit access to the [nodejs/node](https://github.com/nodejs/node) repository- Access to the Node.js continuous integration (CI) jobsBoth collaborators and non-collaborators may propose changes to the Node.js
source code.The mechanism to propose such a change is a GitHub pull request.Collaborators review and merge (land) pull requests.Two collaborators must approve a pull request before the pull request can land.(One collaborator approval is enough if the pull request has been open for more
than 7 days.)Approving a pull request indicates that the collaborator accepts
responsibility for the change.Approval must be from collaborators who are not
authors of the change.If a collaborator opposes a proposed change, then the change cannot land.The
exception is if the TSC votes to approve the change despite the opposition.Usually, involving the TSC is unnecessary.Often, discussions or further changes
result in collaborators removing their opposition.See:- [List of collaborators](./README.md#current-project-team-members)- [A guide for collaborators](./doc/contributing/collaborator-guide.md)Collaborator activities- Helping users and novice contributors- Contributing code and documentation changes that improve the project- Reviewing and commenting on issues and pull requests- Participation in working groups- Merging pull requestsThe TSC can remove inactive collaborators or provide them with emeritus
status.Emeriti may request that the TSC restore them to active status.A collaborator is automatically made emeritus (and removed from active
collaborator status) if it has been more than 12 months since the collaborator
has authored or approved a commit that has landed.Technical Steering Committee
A subset of the collaborators forms the Technical Steering Committee (TSC).The TSC has final authority over this project, including:- Technical direction- Project governance and process (including this policy)- Contribution policy- GitHub repository hosting- Conduct guidelines- Maintaining the list of collaboratorsThe current list of TSC members is in
[the project README](./README.md#current-project-team-members).The [TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md) governs the operations of the TSC.All changes to the
Charter need approval by the OpenJS Foundation Cross-Project Council (CPC).TSC meetings
The TSC meets in a video conference call.Each year, the TSC elects a chair to
run the meetings.The TSC streams its meetings for public viewing on YouTube.The TSC agenda includes issues that are at an impasse.The intention of the
agenda is not to review or approve all patches.Collaborators review and approve
patches on GitHub.Any community member can create a GitHub issue asking that the TSC review
something.If consensus-seeking fails for an issue, a collaborator may apply the`tsc-agenda` label.That will add it to the TSC meeting agenda.Before each TSC meeting, the meeting chair will share the agenda with members of
the TSC.TSC members can also add items to the agenda at the beginning of each
meeting.The meeting chair and the TSC cannot veto or remove items.The TSC may invite people to take part in a non-voting capacity.During the meeting, the TSC chair ensures that someone takes minutes.After the
meeting, the TSC chair ensures that someone opens a pull request with the
minutes.The TSC seeks to resolve as many issues as possible outside meetings using
[the TSC issue tracker](https://github.com/nodejs/TSC/issues).The process in
the issue tracker is:
- A TSC member opens an issue explaining the proposal/issue and @-mentions@nodejs/tsc.- The proposal passes if, after 72 hours, there are two or more TSC votingmember approvals and no TSC voting member opposition.- If there is an extended impasse, a TSC member may make a motion for a vote.Collaborator nominationsWho can nominate Collaborators?Existing Collaborators can nominate someone to become a Collaborator.Ideal Nominees
Nominees should have significant and valuable contributions across the Node.js
organization.Contributions can be:
- Opening pull requests.- Comments and reviews.- Opening new issues.- Participation in other projects, teams, and working groups of the Node.js
organization.Nominating a new CollaboratorTo nominate a new Collaborator, open an issue in the [nodejs/node](https://github.com/nodejs/node) repository.Provide a summary of the nominee's contributions.For example:
- Commits in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/commits?author=GITHUB_ID`- Pull requests and issues opened in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/issues?q=author:GITHUB_ID`- Comments on pull requests and issues in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/issues?q=commenter:GITHUB_ID`- Reviews on pull requests in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/pulls?q=reviewed-by:GITHUB_ID`- Help provided to end-users and novice contributors- Pull requests and issues opened throughout the Node.js organization
- Use the link  `https://github.com/search?q=author:GITHUB_ID+org:nodejs`- Comments on pull requests and issues throughout the Node.js organization
- Use the link `https://github.com/search?q=commenter:GITHUB_ID+org:nodejs`- Participation in other projects, teams, and working groups of the Node.js
organization- Other participation in the wider Node.js communityMention @nodejs/collaborators in the issue to notify other collaborators aboutthe nomination.The nomination passes if no collaborators oppose it after one week.In the case
of an objection, the TSC is responsible for working with the individuals
involved and finding a resolution.There are steps a nominator can take in advance to make a nomination as
frictionless as possible.To request feedback from other collaborators in
private, use the [collaborators discussion page](https://github.com/nodejs/collaborators/discussions/categories/collaborator-nominations)
(which only collaborators may view).A nominator may also work with the
nominee to improve their contribution profile.Collaborators might overlook someone with valuable contributions.In that case,
the contributor may open an issue or contact a collaborator to request a
nomination.OnboardingAfter the nomination passes, a TSC member onboards the new collaborator.See
[the onboarding guide](./onboarding.md) for details of the onboarding
process.Consensus seeking processThe TSC follows a [Consensus Seeking](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision-making model per the
[TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md).

--------------------------------

Issues

----Asking for general help
Because the level of activity in the `nodejs/node` repository is so high,
questions or requests for general help using Node.js should be directed at
the [Node.js help repository](https://github.com/nodejs/help/issues).Discussing non-technical topics
Discussion of non-technical topics (such as intellectual property and trademark)
should be directed to the [Technical Steering Committee (TSC) repository](https://github.com/nodejs/TSC/issues).Submitting a bug reportWhen opening a new issue in the `nodejs/node` issue tracker, users will be
presented with a choice of issue templates.If you believe that you have
uncovered a bug in Node.js, please fill out the `Bug Report` template to the
best of your ability.Do not worry if you cannot answer every detail; just fill
in what you can.The two most important pieces of information we need in order to properly
evaluate the report is a description of the behavior you are seeing and a simple
test case we can use to recreate the problem on our own.If we cannot recreate
the issue, it becomes impossible for us to fix.In order to rule out the possibility of bugs introduced by userland code, test
cases should be limited, as much as possible, to using only Node.js APIs.If the bug occurs only when you're using a specific userland module, there is
a very good chance that either (a) the module has a bug or (b) something in
Node.js changed that broke the module.See [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve).Triaging a bug report
Once an issue has been opened, it is common for there to be discussion
around it.Some contributors may have differing opinions about the issue,
including whether the behavior being seen is a bug or a feature.This discussion
is part of the process and should be kept focused, helpful, and professional.The objective of helping with triaging issues (in core and help repos) is to
help reduce the issue backlog and keep the issue tracker healthy, while enabling
newcomers another meaningful way to get engaged and contribute.Anyone with a reasonable understanding of Node.js programming and the
project's GitHub organization plus a few contributions to the project
(commenting on issues or PRs) can apply for and become a triager.Open a PR
on the README.md of this project with: i) a request to be added as a triager,
ii) the motivation for becoming a triager, and iii) agreement on reading,
understanding, and adhering to the project's [Code Of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).The triage role enables the ability to carry out the most common triage
activities, such as applying labels and closing/reopening/assigning issues.For more information on the roles and permissions, see ["Permission levels for
repositories owned by an organization"](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization).When triagging issues and PRs:- Show patience and empathy, especially to first-time contributors.- Show no patience towards spam or troll, close the issue without interacting with it andreport the user to the moderation repository.-If you're not able to reproduce an issue, leave a comment asking for more info andadd the `needs more info` label.- Ideally issues should be closed only when they have been fixed or answered (andmerged for pull requests).Closing an issue (or PR) earlier can be seen as
dismissive from the point of view of the reporter/author.Always try to communicate the reason for closing the issue/PR.

--------------------------------

Code of Conduct
The Node.js project has a [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md) that all contributors are
expected to follow.This code describes the minimum behavior expectations
for all contributors.As a contributor to Node.js, how you choose to act and interact towards your
fellow contributors, as well as to the community, will reflect back not only
on yourself but on the project as a whole.The Code of Conduct is designed and
intended, above all else, to help establish a culture within the project that
allows anyone and everyone who wants to contribute to feel safe doing so.Should any individual act in any way that is considered in violation of the
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md), corrective actions will be taken.It is possible, however,
for any individual to act in such a manner that is not in violation of the
strict letter of the Code of Conduct guidelines while still going completely
against the spirit of what that Code is intended to accomplish.Open, diverse, and inclusive communities live and die on the basis of trust.Contributors can disagree with one another so long as they trust that those
disagreements are in good faith and everyone is working towards a common goal.Bad actors
All contributors to Node.js tacitly agree to abide by both the letter and
spirit of the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Failure, or unwillingness, to do so will
result in contributions being respectfully declined.A bad actor is someone who repeatedly violates the spirit of the Code of
Conduct through failure to regulate how they
interact with others.In doing so, bad actors
alienate other contributors, discourage collaboration, and generally reflect
poorly on the project as a whole.Being a bad actor may be intentional or unintentional.Typically, unintentional
bad behavior can be easily corrected by being quick to apologize and correct
course even if you are not entirely convinced you need to.Giving other
contributors the benefit of the doubt and having a sincere willingness to admit
that you might be wrong is critical for any successful open collaboration.Don't be a bad actor.

--------------------------------

Contributing to Node.js
Contributions to Node.js include code, documentation, answering user questions,
running the project's infrastructure, and advocating for all types of Node.js
users.The Node.js project welcomes all contributions from anyone willing to work in
good faith with other contributors and the community.No contribution is too
small and all contributions are valued.The Node.js project has an open governance model.Individuals making significant and valuable contributions are made
Collaborators and given commit-access to the project.See the
[GOVERNANCE.md](./GOVERNANCE.md) document for more information about how this
works.Contents

----[Code of Conduct](./doc/contributing/code-of-conduct.md)The Node.js project has a
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md)
to which all contributors must adhere.See [details on our policy on Code of Conduct](./doc/contributing/code-of-conduct.md).[Issues](./doc/contributing/issues.md)- [Asking for General Help](./doc/contributing/issues.md#asking-for-general-help)- [Discussing non-technical topics](./doc/contributing/issues.md#discussing-non-technical-topics)- [Submitting a Bug Report](./doc/contributing/issues.md#submitting-a-bug-report)- [Triaging a Bug Report](./doc/contributing/issues.md#triaging-a-bug-report)[Pull Requests](./doc/contributing/pull-requests.md)Pull Requests are the way concrete changes are made to the code, documentation,
dependencies, and tools contained in the `nodejs/node` repository.- [Dependencies](./doc/contributing/pull-requests.md#dependencies)- [Setting up your local environment](./doc/contributing/pull-requests.md#setting-up-your-local-environment)- [The Process of Making Changes](./doc/contributing/pull-requests.md#the-process-of-making-changes)- [Reviewing Pull Requests](./doc/contributing/pull-requests.md#reviewing-pull-requests)- [Notes](./doc/contributing/pull-requests.md#notes)Developer's Certificate of Origin 1.1```By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I
     have the right to submit it under the open source license
     indicated in the file; or(b) The contribution is based upon previous work that, to the best
     of my knowledge, is covered under an appropriate open source
     license and I have the right under that license to submit that
     work with modifications, whether created in whole or in part
     by me, under the same open source license (unless I am
     permitted to submit under a different license), as indicated
     in the file; or(c) The contribution was provided directly to me by some other
     person who certified (a), (b) or (c) and I have not modified
     it.(d) I understand and agree that this project and the contribution
     are public and that a record of the contribution (including all
     personal information I submit with it, including my sign-off) is
     maintained indefinitely and may be redistributed consistent with
     this project or the open source license(s) involved.```

--------------------------------

Node.js Project Governance
 raw HTML omitted 

-- -- -- -----
 raw HTML omittedTriagers
Triagers assess newly-opened issues in the [nodejs/node](https://github.com/nodejs/node) and [nodejs/help](https://github.com/nodejs/help)
repositories.The GitHub team for Node.js triagers is @nodejs/issue-triage.Triagers are given the "Triage" GitHub role and have:- Ability to label issues and pull requests- Ability to comment, close, and reopen issues and pull requestsSee:- [List of triagers](./README.md#triagers)- [A guide for triagers](./doc/contributing/issues.md#triaging-a-bug-report)Collaborators
Node.js core collaborators maintain the [nodejs/node](https://github.com/nodejs/node)GitHub repository.The GitHub team for Node.js core collaborators is @nodejs/collaborators.Collaborators have:- Commit access to the [nodejs/node](https://github.com/nodejs/node) repository- Access to the Node.js continuous integration (CI) jobsBoth collaborators and non-collaborators may propose changes to the Node.js
source code.The mechanism to propose such a change is a GitHub pull request.Collaborators review and merge (land) pull requests.Two collaborators must approve a pull request before the pull request can land.(One collaborator approval is enough if the pull request has been open for more
than 7 days.)Approving a pull request indicates that the collaborator accepts
responsibility for the change.Approval must be from collaborators who are not
authors of the change.If a collaborator opposes a proposed change, then the change cannot land.The
exception is if the TSC votes to approve the change despite the opposition.Usually, involving the TSC is unnecessary.Often, discussions or further changes
result in collaborators removing their opposition.See:- [List of collaborators](./README.md#current-project-team-members)- [A guide for collaborators](./doc/contributing/collaborator-guide.md)Collaborator activities- Helping users and novice contributors- Contributing code and documentation changes that improve the project- Reviewing and commenting on issues and pull requests- Participation in working groups- Merging pull requestsThe TSC can remove inactive collaborators or provide them with emeritus
status.Emeriti may request that the TSC restore them to active status.A collaborator is automatically made emeritus (and removed from active
collaborator status) if it has been more than 12 months since the collaborator
has authored or approved a commit that has landed.Technical Steering Committee
A subset of the collaborators forms the Technical Steering Committee (TSC).The TSC has final authority over this project, including:- Technical direction- Project governance and process (including this policy)- Contribution policy- GitHub repository hosting- Conduct guidelines- Maintaining the list of collaboratorsThe current list of TSC members is in
[the project README](./README.md#current-project-team-members).The [TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md) governs the operations of the TSC.All changes to the
Charter need approval by the OpenJS Foundation Cross-Project Council (CPC).TSC meetings
The TSC meets in a video conference call.Each year, the TSC elects a chair to
run the meetings.The TSC streams its meetings for public viewing on YouTube.The TSC agenda includes issues that are at an impasse.The intention of the
agenda is not to review or approve all patches.Collaborators review and approve
patches on GitHub.Any community member can create a GitHub issue asking that the TSC review
something.If consensus-seeking fails for an issue, a collaborator may apply the`tsc-agenda` label.That will add it to the TSC meeting agenda.Before each TSC meeting, the meeting chair will share the agenda with members of
the TSC.TSC members can also add items to the agenda at the beginning of each
meeting.The meeting chair and the TSC cannot veto or remove items.The TSC may invite people to take part in a non-voting capacity.During the meeting, the TSC chair ensures that someone takes minutes.After the
meeting, the TSC chair ensures that someone opens a pull request with the
minutes.The TSC seeks to resolve as many issues as possible outside meetings using
[the TSC issue tracker](https://github.com/nodejs/TSC/issues).The process in
the issue tracker is:
- A TSC member opens an issue explaining the proposal/issue and @-mentions@nodejs/tsc.- The proposal passes if, after 72 hours, there are two or more TSC votingmember approvals and no TSC voting member opposition.- If there is an extended impasse, a TSC member may make a motion for a vote.Collaborator nominationsWho can nominate Collaborators?Existing Collaborators can nominate someone to become a Collaborator.Ideal Nominees
Nominees should have significant and valuable contributions across the Node.js
organization.Contributions can be:
- Opening pull requests.- Comments and reviews.- Opening new issues.- Participation in other projects, teams, and working groups of the Node.js
organization.Nominating a new CollaboratorTo nominate a new Collaborator, open an issue in the [nodejs/node](https://github.com/nodejs/node) repository.Provide a summary of the nominee's contributions.For example:
- Commits in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/commits?author=GITHUB_ID`- Pull requests and issues opened in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/issues?q=author:GITHUB_ID`- Comments on pull requests and issues in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/issues?q=commenter:GITHUB_ID`- Reviews on pull requests in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/pulls?q=reviewed-by:GITHUB_ID`- Help provided to end-users and novice contributors- Pull requests and issues opened throughout the Node.js organization
- Use the link  `https://github.com/search?q=author:GITHUB_ID+org:nodejs`- Comments on pull requests and issues throughout the Node.js organization
- Use the link `https://github.com/search?q=commenter:GITHUB_ID+org:nodejs`- Participation in other projects, teams, and working groups of the Node.js
organization- Other participation in the wider Node.js communityMention @nodejs/collaborators in the issue to notify other collaborators aboutthe nomination.The nomination passes if no collaborators oppose it after one week.In the case
of an objection, the TSC is responsible for working with the individuals
involved and finding a resolution.There are steps a nominator can take in advance to make a nomination as
frictionless as possible.To request feedback from other collaborators in
private, use the [collaborators discussion page](https://github.com/nodejs/collaborators/discussions/categories/collaborator-nominations)
(which only collaborators may view).A nominator may also work with the
nominee to improve their contribution profile.Collaborators might overlook someone with valuable contributions.In that case,
the contributor may open an issue or contact a collaborator to request a
nomination.OnboardingAfter the nomination passes, a TSC member onboards the new collaborator.See
[the onboarding guide](./onboarding.md) for details of the onboarding
process.Consensus seeking processThe TSC follows a [Consensus Seeking](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision-making model per the
[TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md).

--------------------------------

Code of Conduct
The Node.js project has a [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md) that all contributors are
expected to follow.This code describes the minimum behavior expectations
for all contributors.As a contributor to Node.js, how you choose to act and interact towards your
fellow contributors, as well as to the community, will reflect back not only
on yourself but on the project as a whole.The Code of Conduct is designed and
intended, above all else, to help establish a culture within the project that
allows anyone and everyone who wants to contribute to feel safe doing so.Should any individual act in any way that is considered in violation of the
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md), corrective actions will be taken.It is possible, however,
for any individual to act in such a manner that is not in violation of the
strict letter of the Code of Conduct guidelines while still going completely
against the spirit of what that Code is intended to accomplish.Open, diverse, and inclusive communities live and die on the basis of trust.Contributors can disagree with one another so long as they trust that those
disagreements are in good faith and everyone is working towards a common goal.Bad actors
All contributors to Node.js tacitly agree to abide by both the letter and
spirit of the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Failure, or unwillingness, to do so will
result in contributions being respectfully declined.A bad actor is someone who repeatedly violates the spirit of the Code of
Conduct through failure to regulate how they
interact with others.In doing so, bad actors
alienate other contributors, discourage collaboration, and generally reflect
poorly on the project as a whole.Being a bad actor may be intentional or unintentional.Typically, unintentional
bad behavior can be easily corrected by being quick to apologize and correct
course even if you are not entirely convinced you need to.Giving other
contributors the benefit of the doubt and having a sincere willingness to admit
that you might be wrong is critical for any successful open collaboration.Don't be a bad actor.

--------------------------------

Issues

----Asking for general help
Because the level of activity in the `nodejs/node` repository is so high,
questions or requests for general help using Node.js should be directed at
the [Node.js help repository](https://github.com/nodejs/help/issues).Discussing non-technical topics
Discussion of non-technical topics (such as intellectual property and trademark)
should be directed to the [Technical Steering Committee (TSC) repository](https://github.com/nodejs/TSC/issues).Submitting a bug reportWhen opening a new issue in the `nodejs/node` issue tracker, users will be
presented with a choice of issue templates.If you believe that you have
uncovered a bug in Node.js, please fill out the `Bug Report` template to the
best of your ability.Do not worry if you cannot answer every detail; just fill
in what you can.The two most important pieces of information we need in order to properly
evaluate the report is a description of the behavior you are seeing and a simple
test case we can use to recreate the problem on our own.If we cannot recreate
the issue, it becomes impossible for us to fix.In order to rule out the possibility of bugs introduced by userland code, test
cases should be limited, as much as possible, to using only Node.js APIs.If the bug occurs only when you're using a specific userland module, there is
a very good chance that either (a) the module has a bug or (b) something in
Node.js changed that broke the module.See [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve).Triaging a bug report
Once an issue has been opened, it is common for there to be discussion
around it.Some contributors may have differing opinions about the issue,
including whether the behavior being seen is a bug or a feature.This discussion
is part of the process and should be kept focused, helpful, and professional.The objective of helping with triaging issues (in core and help repos) is to
help reduce the issue backlog and keep the issue tracker healthy, while enabling
newcomers another meaningful way to get engaged and contribute.Anyone with a reasonable understanding of Node.js programming and the
project's GitHub organization plus a few contributions to the project
(commenting on issues or PRs) can apply for and become a triager.Open a PR
on the README.md of this project with: i) a request to be added as a triager,
ii) the motivation for becoming a triager, and iii) agreement on reading,
understanding, and adhering to the project's [Code Of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).The triage role enables the ability to carry out the most common triage
activities, such as applying labels and closing/reopening/assigning issues.For more information on the roles and permissions, see ["Permission levels for
repositories owned by an organization"](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization).When triagging issues and PRs:- Show patience and empathy, especially to first-time contributors.- Show no patience towards spam or troll, close the issue without interacting with it andreport the user to the moderation repository.-If you're not able to reproduce an issue, leave a comment asking for more info andadd the `needs more info` label.- Ideally issues should be closed only when they have been fixed or answered (andmerged for pull requests).Closing an issue (or PR) earlier can be seen as
dismissive from the point of view of the reporter/author.Always try to communicate the reason for closing the issue/PR.

--------------------------------

Pull requests

-- --- -- ------ --- --------- -----Dependencies
Node.js has several bundled dependencies in the deps/ and the tools/
directories that are not part of the project proper.These are detailed in the [maintaining dependencies](./maintaining/maintaining-dependencies.md) document.Changes to files in those directories should be sent
to their respective projects.Do not send a patch to Node.js.We cannot accept such patches.In case of doubt, open an issue in the
[issue tracker](https://github.com/nodejs/node/issues/) or contact one of the
[project collaborators](https://github.com/nodejs/node/#current-project-team-members).Node.js has many channels on the
[OpenJS Foundation Slack](https://slack-invite.openjsf.org/).Interesting
channels are:
[#nodejs](https://openjs-foundation.slack.com/archives/CK9Q4MB53) for general
help, questions, and discussions.[#nodejs-core](https://openjs-foundation.slack.com/archives/C019Y2T6STH) for
development of Node.js core specifically.Node.js also has an unofficial IRC channel:
[#Node.js](https://web.libera.chat/?channels=node.js).Setting up your local environmentTo get started, you will need to have `git` installed locally.Depending on
your operating system, there are also a number of other dependencies required.These are detailed in the [Building guide](../../BUILDING.md).Depending on your environment you might want to grab IDE specific settings from
[IDE configs](https://github.com/nodejs/node-code-ide-configs).Once you have `git` and are sure you have all of the necessary dependencies,
it's time to create a fork.Step 1: Fork
Fork the project [on GitHub](https://github.com/nodejs/node) and clone your fork
locally.```
git clone git@github.com:username/node.git
cd node
git remote add upstream https://github.com/nodejs/node.git
git fetch upstream```Configure `git` so that it knows who you are:```
git config user.name "J. Random User"
git config user.email "j.random.user@example.com"```You can use any name/email address you prefer here.We only use the
metadata generated by `git` using this configuration for properly attributing
your changes to you in the `AUTHORS` file and the changelog.If you would like for the GitHub UI to link the commit to your account
and award you the `Contributor` label after the changes have been merged,
make sure this local email is also added to your
[GitHub email list](https://github.com/settings/emails).Step 2: BranchAs a best practice to keep your development environment as organized as
possible, create local branches to work within.These should also be created
directly off of the upstream default branch.```
git checkout -b my-branch -t upstream/HEAD```The process of making changes
Step 3: Code
Pull requests in Node.js typically involve changes to
one or more of a few places in the repository.- C/C++ code contained in the `src` directory- JavaScript code contained in the `lib` directory- Documentation in `doc/api`- Tests within the `test` directoryIf you are modifying code, please be sure to run `make lint` (or`vcbuild.bat lint` on Windows) to ensure that the changes follow the Node.js
code style guide.Any documentation you write (including code comments and API documentation)
should follow the [Style Guide](../../doc/README.md).Code samples
included in the API docs will also be checked when running `make lint` (or
`vcbuild.bat lint` on Windows).If you are adding to or deprecating an API,
add or change the appropriate YAML documentation.Use `REPLACEME` for the
version number in the documentation YAML:```
### `request.method`
<!--YAML
added: REPLACEME
-->* {string}The request method.```For contributing C++ code, you may want to look at the
[C++ Style Guide](cpp-style-guide.md), as well as the
[README of src/](../../src/README.md) for an overview of Node.js
C++ internals.Step 4: CommitIt is a best practice to keep your changes as logically grouped
as possible within individual commits.There is no limit to the number of
commits any single pull request may have, and many contributors find it easier
to review changes that are split across multiple commits.```
git add my/changed/files
git commit```Multiple commits often get squashed when they are landed.See the
notes about .Commit message guidelines
A good commit message should describe what changed and why.-The first line should:- contain a short description of the change (preferably 50 characters or
less, and no more than 72 characters)- be entirely in lowercase with the exception of proper nouns, acronyms, andthe words that refer to code, like function/variable names- be prefixed with the name of the changedand start with an imperative verb.Check the output of `git log --oneline files/you/changed` to find out what subsystems your changes touch.Examples:
- `net: add localAddress and localPort to Socket`- `src: fix typos in async_wrap.h`- Keep the second line blank.- Wrap all other lines at 72 columns (except for long URLs).- If your patch fixes an open issue, you can add a reference to it at the end
of the log.Use the `Fixes:` prefix and the full issue URL.For otherreferences use `Refs:`.`Fixes:` and `Refs:` trailers get automatically added to your commit message
when the Pull Request lands as long as they are included in the
Pull Request's description.If the Pull Request lands in several commits,
by default the trailers found in the description are added to each commits.Examples:
- `Fixes: https://github.com/nodejs/node/issues/1337`- `Refs: https://eslint.org/docs/rules/space-in-parens.html`- `Refs: https://github.com/nodejs/node/pull/3615`- If your commit introduces a breaking change (`semver-major`), it should
contain an explanation about the reason of the breaking change, whichsituation would trigger the breaking change, and what is the exact change.Sample complete commit message:```
subsystem: explain the commit in one lineThe body of the commit message should be one or more paragraphs, explaining
things in more detail.Please word-wrap to keep columns to 72 characters or
less.Fixes: https://github.com/nodejs/node/issues/1337Refs: https://eslint.org/docs/rules/space-in-parens.html```If you are new to contributing to Node.js, please try to do your best at
conforming to these guidelines, but do not worry if you get something wrong.One of the existing contributors will help get things situated and the
contributor landing the pull request will ensure that everything follows
the project guidelines.Step 5: RebaseAs a best practice, once you have committed your changes, it is a good idea
to use `git rebase` (not `git merge`) to synchronize your work with the main
repository.```
git fetch upstream HEAD
git rebase FETCH_HEAD```This ensures that your working branch has the latest changes from `nodejs/node`.Step 6: Test
Bug fixes and features should always come with tests.A
[guide for writing tests in Node.js](writing-tests.md) has been
provided to make the process easier.Looking at other tests to see how they
should be structured can also help.The `test` directory within the `nodejs/node` repository is complex and it is
often not clear where a new test file should go.When in doubt, add new tests
to the `test/parallel/` directory and the right location will be sorted out
later.Before submitting your changes in a pull request, always run the full Node.js
test suite.To run the tests (including code linting) on Unix / macOS:```
./configure && make -j4 test```We can speed up the builds by using [Ninja](https://ninja-build.org/).For more
information, see
[Building Node.js with Ninja](building-node-with-ninja.md).And on Windows:```
vcbuild test```For some configurations, running all tests might take a long time (an hour or
more).To run a subset of the test suite, see the [running tests](../../BUILDING.md#running-tests) section of
the Building guide.Step 7: PushOnce you are sure your commits are ready to go, with passing tests and linting,
begin the process of opening a pull request by pushing your working branch to
your fork on GitHub.```
git push origin my-branch```Step 8: Opening the pull request
From within GitHub, opening a new pull request will present you with a
[pull request template](https://raw.githubusercontent.com/nodejs/node/HEAD/.github/PULL_REQUEST_TEMPLATE.md).Please try to do your best at filling out the
details, but feel free to skip parts if you're not sure what to put.Once opened, pull requests are usually reviewed within a few days.To get feedback on your proposed change even though it is not ready
to land, use the `Convert to draft` option in the GitHub UI.Do not use the `wip` label as it might not prevent the PR
from landing before you are ready.Step 9: Discuss and updateYou will probably get feedback or requests for changes to your pull request.This is a big part of the submission process so don't be discouraged!Some
contributors may sign off on the pull request right away, others may have
more detailed comments or feedback.This is a necessary part of the process
in order to evaluate whether the changes are correct and necessary.To make changes to an existing pull request, make the changes to your local
branch, add a new commit with those changes, and push those to your fork.GitHub will automatically update the pull request.```
git add my/changed/files
git commit
git push origin my-branch```If a git conflict arises, it is necessary to synchronize your branch with other
changes that have landed upstream by using `git rebase`:```
git fetch upstream HEAD
git rebase FETCH_HEAD
git push --force-with-lease origin my-branch```Important: The `git push --force-with-lease` command is one of the few ways
to delete history in `git`.It also complicates the review process, as it won't
allow reviewers to get a quick glance on what changed.Before you use it, make
sure you understand the risks.If in doubt, you can always ask for guidance in
the pull request.There are a number of more advanced mechanisms for managing commits using
`git rebase` that can be used, but are beyond the scope of this guide.Feel free to post a comment in the pull request to ping reviewers if you are
awaiting an answer on something.If you encounter words or acronyms that
seem unfamiliar, refer to this
[glossary](https://github.com/nodejs/node/blob/HEAD/glossary.md).Approval and request changes workflow
All pull requests require "sign off" in order to land.Whenever a contributor
reviews a pull request they may find specific details that they would like to
see changed or fixed.These may be as simple as fixing a typo, or may involve
substantive changes to the code you have written.While such requests are
intended to be helpful, they may come across as abrupt or unhelpful, especially
requests to change things that do not include concrete suggestions on how to
change them.Try not to be discouraged.If you feel that a particular review is unfair,
say so, or contact one of the other contributors in the project and seek their
input.Often such comments are the result of the reviewer having only taken a
short amount of time to review and are not ill-intended.Such issues can often
be resolved with a bit of patience.That said, reviewers should be expected to
be helpful in their feedback, and feedback that is simply vague, dismissive, and
unhelpful is likely safe to ignore.Step 10: LandingIn order to land, a pull request needs to be reviewed and  by
at least two Node.js Collaborators (one collaborator approval is enough if the
pull request has been open for more than 7 days) and pass a
.After that, as long as there are noobjections from other contributors, the pull request can be merged.If you findyour pull request waiting longer than you expect, see the
.When a collaborator lands your pull request, they will posta comment to the pull request page mentioning the commit(s) it
landed as.GitHub might show the pull request as `Closed` at this
point, but don't worry.If you look at the branch you raised your
pull request against, you should see a commit with your name on it.Congratulations and thanks for your contribution!Reviewing pull requests
All Node.js contributors who choose to review and provide feedback on Pull
Requests have a responsibility to both the project and the individual making the
contribution.Reviews and feedback must be helpful, insightful, and geared
towards improving the contribution as opposed to simply blocking it.Do not
expect to be able to block a pull request from advancing simply because you say
"No" without giving an explanation.Be open to having your mind changed.Be open
to working with the contributor to make the pull request better.Reviews that are dismissive or disrespectful of the contributor or any other
reviewers are strictly counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).When reviewing a pull request, the primary goals are for the codebase to improve
and for the person submitting the request to succeed.Even if a pull request
does not land, the submitters should come away from the experience feeling like
their effort was not wasted or unappreciated.Every pull request from a new
contributor is an opportunity to grow the community.Review a bit at a time
Do not overwhelm new contributors.It is tempting to micro-optimize and make everything about relative performance,
perfect grammar, or exact style matches.Do not succumb to that temptation.Focus first on the most significant aspects of the change:
- Does this change make sense for Node.js?- Does this change make Node.js better, even if only incrementally?- Are there clear bugs or larger scale issues that need attending to?- Is the commit message readable and correct?If it contains a breaking change
is it clear enough?When changes are necessary, request them, do not demand them, and do not
assume that the submitter already knows how to add a test or run a benchmark.Specific performance optimization techniques, coding styles, and conventions
change over time.The first impression you give to a new contributor never does.Nits (requests for small changes that are not essential) are fine, but try to
avoid stalling the pull request.Most nits can typically be fixed by the
Node.js collaborator landing the pull request but they can also be an
opportunity for the contributor to learn a bit more about the project.It is always good to clearly indicate nits when you comment: e.g.
`Nit: change foo() to bar().But this is not blocking.`If your comments were addressed but were not folded automatically after new
commits or if they proved to be mistaken, please, [hide them](https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment)
with the appropriate reason to keep the conversation flow concise and relevant.Be aware of the person behind the codeBe aware that how you communicate requests and reviews in your feedback can
have a significant impact on the success of the pull request.Yes, we may land
a particular change that makes Node.js better, but the individual might just
not want to have anything to do with Node.js ever again.The goal is not just
having good code.Respect the minimum wait time for commentsThere is a minimum waiting time which we try to respect for non-trivial
changes, so that people who may have important input in such a distributed
project are able to respond.For non-trivial changes, pull requests must be left open for at least 48 hours.Sometimes changes take far longer to review, or need more specialized review
from subject-matter experts.When in doubt, do not rush.Trivial changes, typically limited to small formatting changes or fixes to
documentation, may be landed within the minimum 48 hour window.Abandoned or stalled pull requestsIf a pull request appears to be abandoned or stalled, it is polite to first
check with the contributor to see if they intend to continue the work before
checking if they would mind if you took it over (especially if it just has
nits left).When doing so, it is courteous to give the original contributor
credit for the work they started (either by preserving their name and email
address) in the commit log, or by using an `Author:` meta-data tag in the
commit.Approving a change
Any Node.js core collaborator (any GitHub user with commit rights in the
`nodejs/node` repository) is authorized to approve any other contributor's
work.Collaborators are not permitted to approve their own pull requests.Collaborators indicate that they have reviewed and approve of the changes in
a pull request either by using GitHub's Approval Workflow, which is preferred,
or by leaving an `LGTM` ("Looks Good To Me") comment.When explicitly using the "Changes requested" component of the GitHub Approval
Workflow, show empathy.That is, do not be rude or abrupt with your feedback
and offer concrete suggestions for improvement, if possible.If you're not
sure how a particular change can be improved, say so.Most importantly, after leaving such requests, it is courteous to make yourself
available later to check whether your comments have been addressed.If you see that requested changes have been made, you can clear another
collaborator's `Changes requested` review.Change requests that are vague, dismissive, or unconstructive may also be
dismissed if requests for greater clarification go unanswered within a
reasonable period of time.Use `Changes requested` to block a pull request from landing.When doing so,
explain why you believe the pull request should not land along with an
explanation of what may be an acceptable alternative course, if any.Accept that there are different opinions about what belongs in Node.js
Opinions on this vary, even among the members of the Technical Steering
Committee.One general rule of thumb is that if Node.js itself needs it (due to historic
or functional reasons), then it belongs in Node.js.For instance, `url`
parsing is in Node.js because of HTTP protocol support.Also, functionality that either cannot be implemented outside of core in any
reasonable way, or only with significant pain.It is not uncommon for contributors to suggest new features they feel would
make Node.js better.These may or may not make sense to add, but as with all
changes, be courteous in how you communicate your stance on these.Comments
that make the contributor feel like they should have "known better" or
ridiculed for even trying run counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Performance is not everything
Node.js has always optimized for speed of execution.If a particular change
can be shown to make some part of Node.js faster, it's quite likely to be
accepted.Claims that a particular pull request will make things faster will
almost always be met by requests for performance [benchmark results](writing-and-running-benchmarks.md) that
demonstrate the improvement.That said, performance is not the only factor to consider.Node.js also
optimizes in favor of not breaking existing code in the ecosystem, and not
changing working functional code just for the sake of changing.If a particular pull request introduces a performance or functional
regression, rather than simply rejecting the pull request, take the time to
work with the contributor on improving the change.Offer feedback and
advice on what would make the pull request acceptable, and do not assume that
the contributor should already know how to do that.Be explicit in your
feedback.Continuous integration testing
All pull requests that contain changes to code must be run through
continuous integration (CI) testing at [https://ci.nodejs.org/](https://ci.nodejs.org/).Only Node.js core collaborators and triagers can start a CI testing run.The
specific details of how to do this are included in the new collaborator
[Onboarding guide](../../onboarding.md).Usually, a collaborator or triager will start a CI
test run for you as approvals for the pull request come in.If not, you can ask a collaborator or triager to start a CI run.Ideally, the code change will pass ("be green") on all platform configurations
supported by Node.js.This means that all tests pass and there are no linting
errors.In reality, however, it is not uncommon for the CI infrastructure itself
to fail on specific platforms or for so-called "flaky" tests to fail ("be red").It is vital to visually inspect the results of all failed ("red") tests to
determine whether the failure was caused by the changes in the pull request.Notes
Commit squashingIn most cases, do not squash commits that you add to your pull request during
the review process.When the commits in your pull request land, they may be
squashed into one commit per logical change.Metadata will be added to the
commit message (including links to the pull request, links to relevant issues,
and the names of the reviewers).The commit history of your pull request,
however, will stay intact on the pull request page.For the size of "one logical change",
[0b5191f](https://github.com/nodejs/node/commit/0b5191f15d0f311c804d542b67e2e922d98834f8)
can be a good example.It touches the implementation, the documentation,
and the tests, but is still one logical change.All tests should always pass
when each individual commit lands on one of the `nodejs/node` branches.Getting approvals for your pull request
A pull request is approved either by saying LGTM, which stands for
"Looks Good To Me", or by using GitHub's Approve button.GitHub's pull request review feature can be used during the process.For more information, check out
[the official documentation](https://help.github.com/articles/reviewing-changes-in-pull-requests/).After you push new changes to your branch, you need to get
approval for these new changes again, even if GitHub shows "Approved"
because the reviewers have hit the buttons before.Waiting until the pull request gets landed
A pull request needs to stay open for at least 48 hours from when it is
submitted, even after it gets approved and passes the CI.This is to make sure
that everyone has a chance to weigh in.If the changes are trivial,
collaborators may decide it doesn't need to wait.A pull request may well take
longer to be merged in.All these precautions are important because Node.js is
widely used, so don't be discouraged!Check out the collaborator guideIf you want to know more about the code review and the landing process, see the
[collaborator guide](collaborator-guide.md).Appendix: subsystems
- `lib/*.js` (`assert`, `buffer`, etc.)- `build`- `doc`- `lib / src`- `test`- `tools`
You can find the full list of supported subsystems in the[nodejs/core-validate-commit](https://github.com/nodejs/core-validate-commit/blob/main/lib/rules/subsystem.js) repository.More than one subsystem may be valid for any particular issue or pull request.

--------------------------------

Contributing to Node.js
Contributions to Node.js include code, documentation, answering user questions,
running the project's infrastructure, and advocating for all types of Node.js
users.The Node.js project welcomes all contributions from anyone willing to work in
good faith with other contributors and the community.No contribution is too
small and all contributions are valued.The Node.js project has an open governance model.Individuals making significant and valuable contributions are made
Collaborators and given commit-access to the project.See the
[GOVERNANCE.md](./GOVERNANCE.md) document for more information about how this
works.Contents

----[Code of Conduct](./doc/contributing/code-of-conduct.md)The Node.js project has a
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md)
to which all contributors must adhere.See [details on our policy on Code of Conduct](./doc/contributing/code-of-conduct.md).[Issues](./doc/contributing/issues.md)- [Asking for General Help](./doc/contributing/issues.md#asking-for-general-help)- [Discussing non-technical topics](./doc/contributing/issues.md#discussing-non-technical-topics)- [Submitting a Bug Report](./doc/contributing/issues.md#submitting-a-bug-report)- [Triaging a Bug Report](./doc/contributing/issues.md#triaging-a-bug-report)[Pull Requests](./doc/contributing/pull-requests.md)Pull Requests are the way concrete changes are made to the code, documentation,
dependencies, and tools contained in the `nodejs/node` repository.- [Dependencies](./doc/contributing/pull-requests.md#dependencies)- [Setting up your local environment](./doc/contributing/pull-requests.md#setting-up-your-local-environment)- [The Process of Making Changes](./doc/contributing/pull-requests.md#the-process-of-making-changes)- [Reviewing Pull Requests](./doc/contributing/pull-requests.md#reviewing-pull-requests)- [Notes](./doc/contributing/pull-requests.md#notes)Developer's Certificate of Origin 1.1```By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I
     have the right to submit it under the open source license
     indicated in the file; or(b) The contribution is based upon previous work that, to the best
     of my knowledge, is covered under an appropriate open source
     license and I have the right under that license to submit that
     work with modifications, whether created in whole or in part
     by me, under the same open source license (unless I am
     permitted to submit under a different license), as indicated
     in the file; or(c) The contribution was provided directly to me by some other
     person who certified (a), (b) or (c) and I have not modified
     it.(d) I understand and agree that this project and the contribution
     are public and that a record of the contribution (including all
     personal information I submit with it, including my sign-off) is
     maintained indefinitely and may be redistributed consistent with
     this project or the open source license(s) involved.```

--------------------------------

Node.js Project Governance
 raw HTML omitted 

-- -- -- -----
 raw HTML omittedTriagers
Triagers assess newly-opened issues in the [nodejs/node](https://github.com/nodejs/node) and [nodejs/help](https://github.com/nodejs/help)
repositories.The GitHub team for Node.js triagers is @nodejs/issue-triage.Triagers are given the "Triage" GitHub role and have:- Ability to label issues and pull requests- Ability to comment, close, and reopen issues and pull requestsSee:- [List of triagers](./README.md#triagers)- [A guide for triagers](./doc/contributing/issues.md#triaging-a-bug-report)Collaborators
Node.js core collaborators maintain the [nodejs/node](https://github.com/nodejs/node)GitHub repository.The GitHub team for Node.js core collaborators is @nodejs/collaborators.Collaborators have:- Commit access to the [nodejs/node](https://github.com/nodejs/node) repository- Access to the Node.js continuous integration (CI) jobsBoth collaborators and non-collaborators may propose changes to the Node.js
source code.The mechanism to propose such a change is a GitHub pull request.Collaborators review and merge (land) pull requests.Two collaborators must approve a pull request before the pull request can land.(One collaborator approval is enough if the pull request has been open for more
than 7 days.)Approving a pull request indicates that the collaborator accepts
responsibility for the change.Approval must be from collaborators who are not
authors of the change.If a collaborator opposes a proposed change, then the change cannot land.The
exception is if the TSC votes to approve the change despite the opposition.Usually, involving the TSC is unnecessary.Often, discussions or further changes
result in collaborators removing their opposition.See:- [List of collaborators](./README.md#current-project-team-members)- [A guide for collaborators](./doc/contributing/collaborator-guide.md)Collaborator activities- Helping users and novice contributors- Contributing code and documentation changes that improve the project- Reviewing and commenting on issues and pull requests- Participation in working groups- Merging pull requestsThe TSC can remove inactive collaborators or provide them with emeritus
status.Emeriti may request that the TSC restore them to active status.A collaborator is automatically made emeritus (and removed from active
collaborator status) if it has been more than 12 months since the collaborator
has authored or approved a commit that has landed.Technical Steering Committee
A subset of the collaborators forms the Technical Steering Committee (TSC).The TSC has final authority over this project, including:- Technical direction- Project governance and process (including this policy)- Contribution policy- GitHub repository hosting- Conduct guidelines- Maintaining the list of collaboratorsThe current list of TSC members is in
[the project README](./README.md#current-project-team-members).The [TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md) governs the operations of the TSC.All changes to the
Charter need approval by the OpenJS Foundation Cross-Project Council (CPC).TSC meetings
The TSC meets in a video conference call.Each year, the TSC elects a chair to
run the meetings.The TSC streams its meetings for public viewing on YouTube.The TSC agenda includes issues that are at an impasse.The intention of the
agenda is not to review or approve all patches.Collaborators review and approve
patches on GitHub.Any community member can create a GitHub issue asking that the TSC review
something.If consensus-seeking fails for an issue, a collaborator may apply the`tsc-agenda` label.That will add it to the TSC meeting agenda.Before each TSC meeting, the meeting chair will share the agenda with members of
the TSC.TSC members can also add items to the agenda at the beginning of each
meeting.The meeting chair and the TSC cannot veto or remove items.The TSC may invite people to take part in a non-voting capacity.During the meeting, the TSC chair ensures that someone takes minutes.After the
meeting, the TSC chair ensures that someone opens a pull request with the
minutes.The TSC seeks to resolve as many issues as possible outside meetings using
[the TSC issue tracker](https://github.com/nodejs/TSC/issues).The process in
the issue tracker is:
- A TSC member opens an issue explaining the proposal/issue and @-mentions@nodejs/tsc.- The proposal passes if, after 72 hours, there are two or more TSC votingmember approvals and no TSC voting member opposition.- If there is an extended impasse, a TSC member may make a motion for a vote.Collaborator nominationsWho can nominate Collaborators?Existing Collaborators can nominate someone to become a Collaborator.Ideal Nominees
Nominees should have significant and valuable contributions across the Node.js
organization.Contributions can be:
- Opening pull requests.- Comments and reviews.- Opening new issues.- Participation in other projects, teams, and working groups of the Node.js
organization.Nominating a new CollaboratorTo nominate a new Collaborator, open an issue in the [nodejs/node](https://github.com/nodejs/node) repository.Provide a summary of the nominee's contributions.For example:
- Commits in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/commits?author=GITHUB_ID`- Pull requests and issues opened in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/issues?q=author:GITHUB_ID`- Comments on pull requests and issues in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/issues?q=commenter:GITHUB_ID`- Reviews on pull requests in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/pulls?q=reviewed-by:GITHUB_ID`- Help provided to end-users and novice contributors- Pull requests and issues opened throughout the Node.js organization
- Use the link  `https://github.com/search?q=author:GITHUB_ID+org:nodejs`- Comments on pull requests and issues throughout the Node.js organization
- Use the link `https://github.com/search?q=commenter:GITHUB_ID+org:nodejs`- Participation in other projects, teams, and working groups of the Node.js
organization- Other participation in the wider Node.js communityMention @nodejs/collaborators in the issue to notify other collaborators aboutthe nomination.The nomination passes if no collaborators oppose it after one week.In the case
of an objection, the TSC is responsible for working with the individuals
involved and finding a resolution.There are steps a nominator can take in advance to make a nomination as
frictionless as possible.To request feedback from other collaborators in
private, use the [collaborators discussion page](https://github.com/nodejs/collaborators/discussions/categories/collaborator-nominations)
(which only collaborators may view).A nominator may also work with the
nominee to improve their contribution profile.Collaborators might overlook someone with valuable contributions.In that case,
the contributor may open an issue or contact a collaborator to request a
nomination.OnboardingAfter the nomination passes, a TSC member onboards the new collaborator.See
[the onboarding guide](./onboarding.md) for details of the onboarding
process.Consensus seeking processThe TSC follows a [Consensus Seeking](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision-making model per the
[TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md).

--------------------------------

Code of Conduct
The Node.js project has a [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md) that all contributors are
expected to follow.This code describes the minimum behavior expectations
for all contributors.As a contributor to Node.js, how you choose to act and interact towards your
fellow contributors, as well as to the community, will reflect back not only
on yourself but on the project as a whole.The Code of Conduct is designed and
intended, above all else, to help establish a culture within the project that
allows anyone and everyone who wants to contribute to feel safe doing so.Should any individual act in any way that is considered in violation of the
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md), corrective actions will be taken.It is possible, however,
for any individual to act in such a manner that is not in violation of the
strict letter of the Code of Conduct guidelines while still going completely
against the spirit of what that Code is intended to accomplish.Open, diverse, and inclusive communities live and die on the basis of trust.Contributors can disagree with one another so long as they trust that those
disagreements are in good faith and everyone is working towards a common goal.Bad actors
All contributors to Node.js tacitly agree to abide by both the letter and
spirit of the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Failure, or unwillingness, to do so will
result in contributions being respectfully declined.A bad actor is someone who repeatedly violates the spirit of the Code of
Conduct through failure to regulate how they
interact with others.In doing so, bad actors
alienate other contributors, discourage collaboration, and generally reflect
poorly on the project as a whole.Being a bad actor may be intentional or unintentional.Typically, unintentional
bad behavior can be easily corrected by being quick to apologize and correct
course even if you are not entirely convinced you need to.Giving other
contributors the benefit of the doubt and having a sincere willingness to admit
that you might be wrong is critical for any successful open collaboration.Don't be a bad actor.

--------------------------------

Issues

----Asking for general help
Because the level of activity in the `nodejs/node` repository is so high,
questions or requests for general help using Node.js should be directed at
the [Node.js help repository](https://github.com/nodejs/help/issues).Discussing non-technical topics
Discussion of non-technical topics (such as intellectual property and trademark)
should be directed to the [Technical Steering Committee (TSC) repository](https://github.com/nodejs/TSC/issues).Submitting a bug reportWhen opening a new issue in the `nodejs/node` issue tracker, users will be
presented with a choice of issue templates.If you believe that you have
uncovered a bug in Node.js, please fill out the `Bug Report` template to the
best of your ability.Do not worry if you cannot answer every detail; just fill
in what you can.The two most important pieces of information we need in order to properly
evaluate the report is a description of the behavior you are seeing and a simple
test case we can use to recreate the problem on our own.If we cannot recreate
the issue, it becomes impossible for us to fix.In order to rule out the possibility of bugs introduced by userland code, test
cases should be limited, as much as possible, to using only Node.js APIs.If the bug occurs only when you're using a specific userland module, there is
a very good chance that either (a) the module has a bug or (b) something in
Node.js changed that broke the module.See [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve).Triaging a bug report
Once an issue has been opened, it is common for there to be discussion
around it.Some contributors may have differing opinions about the issue,
including whether the behavior being seen is a bug or a feature.This discussion
is part of the process and should be kept focused, helpful, and professional.The objective of helping with triaging issues (in core and help repos) is to
help reduce the issue backlog and keep the issue tracker healthy, while enabling
newcomers another meaningful way to get engaged and contribute.Anyone with a reasonable understanding of Node.js programming and the
project's GitHub organization plus a few contributions to the project
(commenting on issues or PRs) can apply for and become a triager.Open a PR
on the README.md of this project with: i) a request to be added as a triager,
ii) the motivation for becoming a triager, and iii) agreement on reading,
understanding, and adhering to the project's [Code Of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).The triage role enables the ability to carry out the most common triage
activities, such as applying labels and closing/reopening/assigning issues.For more information on the roles and permissions, see ["Permission levels for
repositories owned by an organization"](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization).When triagging issues and PRs:- Show patience and empathy, especially to first-time contributors.- Show no patience towards spam or troll, close the issue without interacting with it andreport the user to the moderation repository.-If you're not able to reproduce an issue, leave a comment asking for more info andadd the `needs more info` label.- Ideally issues should be closed only when they have been fixed or answered (andmerged for pull requests).Closing an issue (or PR) earlier can be seen as
dismissive from the point of view of the reporter/author.Always try to communicate the reason for closing the issue/PR.

--------------------------------

Pull requests

-- --- -- ------ --- --------- -----Dependencies
Node.js has several bundled dependencies in the deps/ and the tools/
directories that are not part of the project proper.These are detailed in the [maintaining dependencies](./maintaining/maintaining-dependencies.md) document.Changes to files in those directories should be sent
to their respective projects.Do not send a patch to Node.js.We cannot accept such patches.In case of doubt, open an issue in the
[issue tracker](https://github.com/nodejs/node/issues/) or contact one of the
[project collaborators](https://github.com/nodejs/node/#current-project-team-members).Node.js has many channels on the
[OpenJS Foundation Slack](https://slack-invite.openjsf.org/).Interesting
channels are:
[#nodejs](https://openjs-foundation.slack.com/archives/CK9Q4MB53) for general
help, questions, and discussions.[#nodejs-core](https://openjs-foundation.slack.com/archives/C019Y2T6STH) for
development of Node.js core specifically.Node.js also has an unofficial IRC channel:
[#Node.js](https://web.libera.chat/?channels=node.js).Setting up your local environmentTo get started, you will need to have `git` installed locally.Depending on
your operating system, there are also a number of other dependencies required.These are detailed in the [Building guide](../../BUILDING.md).Depending on your environment you might want to grab IDE specific settings from
[IDE configs](https://github.com/nodejs/node-code-ide-configs).Once you have `git` and are sure you have all of the necessary dependencies,
it's time to create a fork.Step 1: Fork
Fork the project [on GitHub](https://github.com/nodejs/node) and clone your fork
locally.```
git clone git@github.com:username/node.git
cd node
git remote add upstream https://github.com/nodejs/node.git
git fetch upstream```Configure `git` so that it knows who you are:```
git config user.name "J. Random User"
git config user.email "j.random.user@example.com"```You can use any name/email address you prefer here.We only use the
metadata generated by `git` using this configuration for properly attributing
your changes to you in the `AUTHORS` file and the changelog.If you would like for the GitHub UI to link the commit to your account
and award you the `Contributor` label after the changes have been merged,
make sure this local email is also added to your
[GitHub email list](https://github.com/settings/emails).Step 2: BranchAs a best practice to keep your development environment as organized as
possible, create local branches to work within.These should also be created
directly off of the upstream default branch.```
git checkout -b my-branch -t upstream/HEAD```The process of making changes
Step 3: Code
Pull requests in Node.js typically involve changes to
one or more of a few places in the repository.- C/C++ code contained in the `src` directory- JavaScript code contained in the `lib` directory- Documentation in `doc/api`- Tests within the `test` directoryIf you are modifying code, please be sure to run `make lint` (or`vcbuild.bat lint` on Windows) to ensure that the changes follow the Node.js
code style guide.Any documentation you write (including code comments and API documentation)
should follow the [Style Guide](../../doc/README.md).Code samples
included in the API docs will also be checked when running `make lint` (or
`vcbuild.bat lint` on Windows).If you are adding to or deprecating an API,
add or change the appropriate YAML documentation.Use `REPLACEME` for the
version number in the documentation YAML:```
### `request.method`
<!--YAML
added: REPLACEME
-->* {string}The request method.```For contributing C++ code, you may want to look at the
[C++ Style Guide](cpp-style-guide.md), as well as the
[README of src/](../../src/README.md) for an overview of Node.js
C++ internals.Step 4: CommitIt is a best practice to keep your changes as logically grouped
as possible within individual commits.There is no limit to the number of
commits any single pull request may have, and many contributors find it easier
to review changes that are split across multiple commits.```
git add my/changed/files
git commit```Multiple commits often get squashed when they are landed.See the
notes about .Commit message guidelines
A good commit message should describe what changed and why.-The first line should:- contain a short description of the change (preferably 50 characters or
less, and no more than 72 characters)- be entirely in lowercase with the exception of proper nouns, acronyms, andthe words that refer to code, like function/variable names- be prefixed with the name of the changedand start with an imperative verb.Check the output of `git log --oneline files/you/changed` to find out what subsystems your changes touch.Examples:
- `net: add localAddress and localPort to Socket`- `src: fix typos in async_wrap.h`- Keep the second line blank.- Wrap all other lines at 72 columns (except for long URLs).- If your patch fixes an open issue, you can add a reference to it at the end
of the log.Use the `Fixes:` prefix and the full issue URL.For otherreferences use `Refs:`.`Fixes:` and `Refs:` trailers get automatically added to your commit message
when the Pull Request lands as long as they are included in the
Pull Request's description.If the Pull Request lands in several commits,
by default the trailers found in the description are added to each commits.Examples:
- `Fixes: https://github.com/nodejs/node/issues/1337`- `Refs: https://eslint.org/docs/rules/space-in-parens.html`- `Refs: https://github.com/nodejs/node/pull/3615`- If your commit introduces a breaking change (`semver-major`), it should
contain an explanation about the reason of the breaking change, whichsituation would trigger the breaking change, and what is the exact change.Sample complete commit message:```
subsystem: explain the commit in one lineThe body of the commit message should be one or more paragraphs, explaining
things in more detail.Please word-wrap to keep columns to 72 characters or
less.Fixes: https://github.com/nodejs/node/issues/1337Refs: https://eslint.org/docs/rules/space-in-parens.html```If you are new to contributing to Node.js, please try to do your best at
conforming to these guidelines, but do not worry if you get something wrong.One of the existing contributors will help get things situated and the
contributor landing the pull request will ensure that everything follows
the project guidelines.Step 5: RebaseAs a best practice, once you have committed your changes, it is a good idea
to use `git rebase` (not `git merge`) to synchronize your work with the main
repository.```
git fetch upstream HEAD
git rebase FETCH_HEAD```This ensures that your working branch has the latest changes from `nodejs/node`.Step 6: Test
Bug fixes and features should always come with tests.A
[guide for writing tests in Node.js](writing-tests.md) has been
provided to make the process easier.Looking at other tests to see how they
should be structured can also help.The `test` directory within the `nodejs/node` repository is complex and it is
often not clear where a new test file should go.When in doubt, add new tests
to the `test/parallel/` directory and the right location will be sorted out
later.Before submitting your changes in a pull request, always run the full Node.js
test suite.To run the tests (including code linting) on Unix / macOS:```
./configure && make -j4 test```We can speed up the builds by using [Ninja](https://ninja-build.org/).For more
information, see
[Building Node.js with Ninja](building-node-with-ninja.md).And on Windows:```
vcbuild test```For some configurations, running all tests might take a long time (an hour or
more).To run a subset of the test suite, see the [running tests](../../BUILDING.md#running-tests) section of
the Building guide.Step 7: PushOnce you are sure your commits are ready to go, with passing tests and linting,
begin the process of opening a pull request by pushing your working branch to
your fork on GitHub.```
git push origin my-branch```Step 8: Opening the pull request
From within GitHub, opening a new pull request will present you with a
[pull request template](https://raw.githubusercontent.com/nodejs/node/HEAD/.github/PULL_REQUEST_TEMPLATE.md).Please try to do your best at filling out the
details, but feel free to skip parts if you're not sure what to put.Once opened, pull requests are usually reviewed within a few days.To get feedback on your proposed change even though it is not ready
to land, use the `Convert to draft` option in the GitHub UI.Do not use the `wip` label as it might not prevent the PR
from landing before you are ready.Step 9: Discuss and updateYou will probably get feedback or requests for changes to your pull request.This is a big part of the submission process so don't be discouraged!Some
contributors may sign off on the pull request right away, others may have
more detailed comments or feedback.This is a necessary part of the process
in order to evaluate whether the changes are correct and necessary.To make changes to an existing pull request, make the changes to your local
branch, add a new commit with those changes, and push those to your fork.GitHub will automatically update the pull request.```
git add my/changed/files
git commit
git push origin my-branch```If a git conflict arises, it is necessary to synchronize your branch with other
changes that have landed upstream by using `git rebase`:```
git fetch upstream HEAD
git rebase FETCH_HEAD
git push --force-with-lease origin my-branch```Important: The `git push --force-with-lease` command is one of the few ways
to delete history in `git`.It also complicates the review process, as it won't
allow reviewers to get a quick glance on what changed.Before you use it, make
sure you understand the risks.If in doubt, you can always ask for guidance in
the pull request.There are a number of more advanced mechanisms for managing commits using
`git rebase` that can be used, but are beyond the scope of this guide.Feel free to post a comment in the pull request to ping reviewers if you are
awaiting an answer on something.If you encounter words or acronyms that
seem unfamiliar, refer to this
[glossary](https://github.com/nodejs/node/blob/HEAD/glossary.md).Approval and request changes workflow
All pull requests require "sign off" in order to land.Whenever a contributor
reviews a pull request they may find specific details that they would like to
see changed or fixed.These may be as simple as fixing a typo, or may involve
substantive changes to the code you have written.While such requests are
intended to be helpful, they may come across as abrupt or unhelpful, especially
requests to change things that do not include concrete suggestions on how to
change them.Try not to be discouraged.If you feel that a particular review is unfair,
say so, or contact one of the other contributors in the project and seek their
input.Often such comments are the result of the reviewer having only taken a
short amount of time to review and are not ill-intended.Such issues can often
be resolved with a bit of patience.That said, reviewers should be expected to
be helpful in their feedback, and feedback that is simply vague, dismissive, and
unhelpful is likely safe to ignore.Step 10: LandingIn order to land, a pull request needs to be reviewed and  by
at least two Node.js Collaborators (one collaborator approval is enough if the
pull request has been open for more than 7 days) and pass a
.After that, as long as there are noobjections from other contributors, the pull request can be merged.If you findyour pull request waiting longer than you expect, see the
.When a collaborator lands your pull request, they will posta comment to the pull request page mentioning the commit(s) it
landed as.GitHub might show the pull request as `Closed` at this
point, but don't worry.If you look at the branch you raised your
pull request against, you should see a commit with your name on it.Congratulations and thanks for your contribution!Reviewing pull requests
All Node.js contributors who choose to review and provide feedback on Pull
Requests have a responsibility to both the project and the individual making the
contribution.Reviews and feedback must be helpful, insightful, and geared
towards improving the contribution as opposed to simply blocking it.Do not
expect to be able to block a pull request from advancing simply because you say
"No" without giving an explanation.Be open to having your mind changed.Be open
to working with the contributor to make the pull request better.Reviews that are dismissive or disrespectful of the contributor or any other
reviewers are strictly counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).When reviewing a pull request, the primary goals are for the codebase to improve
and for the person submitting the request to succeed.Even if a pull request
does not land, the submitters should come away from the experience feeling like
their effort was not wasted or unappreciated.Every pull request from a new
contributor is an opportunity to grow the community.Review a bit at a time
Do not overwhelm new contributors.It is tempting to micro-optimize and make everything about relative performance,
perfect grammar, or exact style matches.Do not succumb to that temptation.Focus first on the most significant aspects of the change:
- Does this change make sense for Node.js?- Does this change make Node.js better, even if only incrementally?- Are there clear bugs or larger scale issues that need attending to?- Is the commit message readable and correct?If it contains a breaking change
is it clear enough?When changes are necessary, request them, do not demand them, and do not
assume that the submitter already knows how to add a test or run a benchmark.Specific performance optimization techniques, coding styles, and conventions
change over time.The first impression you give to a new contributor never does.Nits (requests for small changes that are not essential) are fine, but try to
avoid stalling the pull request.Most nits can typically be fixed by the
Node.js collaborator landing the pull request but they can also be an
opportunity for the contributor to learn a bit more about the project.It is always good to clearly indicate nits when you comment: e.g.
`Nit: change foo() to bar().But this is not blocking.`If your comments were addressed but were not folded automatically after new
commits or if they proved to be mistaken, please, [hide them](https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment)
with the appropriate reason to keep the conversation flow concise and relevant.Be aware of the person behind the codeBe aware that how you communicate requests and reviews in your feedback can
have a significant impact on the success of the pull request.Yes, we may land
a particular change that makes Node.js better, but the individual might just
not want to have anything to do with Node.js ever again.The goal is not just
having good code.Respect the minimum wait time for commentsThere is a minimum waiting time which we try to respect for non-trivial
changes, so that people who may have important input in such a distributed
project are able to respond.For non-trivial changes, pull requests must be left open for at least 48 hours.Sometimes changes take far longer to review, or need more specialized review
from subject-matter experts.When in doubt, do not rush.Trivial changes, typically limited to small formatting changes or fixes to
documentation, may be landed within the minimum 48 hour window.Abandoned or stalled pull requestsIf a pull request appears to be abandoned or stalled, it is polite to first
check with the contributor to see if they intend to continue the work before
checking if they would mind if you took it over (especially if it just has
nits left).When doing so, it is courteous to give the original contributor
credit for the work they started (either by preserving their name and email
address) in the commit log, or by using an `Author:` meta-data tag in the
commit.Approving a change
Any Node.js core collaborator (any GitHub user with commit rights in the
`nodejs/node` repository) is authorized to approve any other contributor's
work.Collaborators are not permitted to approve their own pull requests.Collaborators indicate that they have reviewed and approve of the changes in
a pull request either by using GitHub's Approval Workflow, which is preferred,
or by leaving an `LGTM` ("Looks Good To Me") comment.When explicitly using the "Changes requested" component of the GitHub Approval
Workflow, show empathy.That is, do not be rude or abrupt with your feedback
and offer concrete suggestions for improvement, if possible.If you're not
sure how a particular change can be improved, say so.Most importantly, after leaving such requests, it is courteous to make yourself
available later to check whether your comments have been addressed.If you see that requested changes have been made, you can clear another
collaborator's `Changes requested` review.Change requests that are vague, dismissive, or unconstructive may also be
dismissed if requests for greater clarification go unanswered within a
reasonable period of time.Use `Changes requested` to block a pull request from landing.When doing so,
explain why you believe the pull request should not land along with an
explanation of what may be an acceptable alternative course, if any.Accept that there are different opinions about what belongs in Node.js
Opinions on this vary, even among the members of the Technical Steering
Committee.One general rule of thumb is that if Node.js itself needs it (due to historic
or functional reasons), then it belongs in Node.js.For instance, `url`
parsing is in Node.js because of HTTP protocol support.Also, functionality that either cannot be implemented outside of core in any
reasonable way, or only with significant pain.It is not uncommon for contributors to suggest new features they feel would
make Node.js better.These may or may not make sense to add, but as with all
changes, be courteous in how you communicate your stance on these.Comments
that make the contributor feel like they should have "known better" or
ridiculed for even trying run counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Performance is not everything
Node.js has always optimized for speed of execution.If a particular change
can be shown to make some part of Node.js faster, it's quite likely to be
accepted.Claims that a particular pull request will make things faster will
almost always be met by requests for performance [benchmark results](writing-and-running-benchmarks.md) that
demonstrate the improvement.That said, performance is not the only factor to consider.Node.js also
optimizes in favor of not breaking existing code in the ecosystem, and not
changing working functional code just for the sake of changing.If a particular pull request introduces a performance or functional
regression, rather than simply rejecting the pull request, take the time to
work with the contributor on improving the change.Offer feedback and
advice on what would make the pull request acceptable, and do not assume that
the contributor should already know how to do that.Be explicit in your
feedback.Continuous integration testing
All pull requests that contain changes to code must be run through
continuous integration (CI) testing at [https://ci.nodejs.org/](https://ci.nodejs.org/).Only Node.js core collaborators and triagers can start a CI testing run.The
specific details of how to do this are included in the new collaborator
[Onboarding guide](../../onboarding.md).Usually, a collaborator or triager will start a CI
test run for you as approvals for the pull request come in.If not, you can ask a collaborator or triager to start a CI run.Ideally, the code change will pass ("be green") on all platform configurations
supported by Node.js.This means that all tests pass and there are no linting
errors.In reality, however, it is not uncommon for the CI infrastructure itself
to fail on specific platforms or for so-called "flaky" tests to fail ("be red").It is vital to visually inspect the results of all failed ("red") tests to
determine whether the failure was caused by the changes in the pull request.Notes
Commit squashingIn most cases, do not squash commits that you add to your pull request during
the review process.When the commits in your pull request land, they may be
squashed into one commit per logical change.Metadata will be added to the
commit message (including links to the pull request, links to relevant issues,
and the names of the reviewers).The commit history of your pull request,
however, will stay intact on the pull request page.For the size of "one logical change",
[0b5191f](https://github.com/nodejs/node/commit/0b5191f15d0f311c804d542b67e2e922d98834f8)
can be a good example.It touches the implementation, the documentation,
and the tests, but is still one logical change.All tests should always pass
when each individual commit lands on one of the `nodejs/node` branches.Getting approvals for your pull request
A pull request is approved either by saying LGTM, which stands for
"Looks Good To Me", or by using GitHub's Approve button.GitHub's pull request review feature can be used during the process.For more information, check out
[the official documentation](https://help.github.com/articles/reviewing-changes-in-pull-requests/).After you push new changes to your branch, you need to get
approval for these new changes again, even if GitHub shows "Approved"
because the reviewers have hit the buttons before.Waiting until the pull request gets landed
A pull request needs to stay open for at least 48 hours from when it is
submitted, even after it gets approved and passes the CI.This is to make sure
that everyone has a chance to weigh in.If the changes are trivial,
collaborators may decide it doesn't need to wait.A pull request may well take
longer to be merged in.All these precautions are important because Node.js is
widely used, so don't be discouraged!Check out the collaborator guideIf you want to know more about the code review and the landing process, see the
[collaborator guide](collaborator-guide.md).Appendix: subsystems
- `lib/*.js` (`assert`, `buffer`, etc.)- `build`- `doc`- `lib / src`- `test`- `tools`
You can find the full list of supported subsystems in the[nodejs/core-validate-commit](https://github.com/nodejs/core-validate-commit/blob/main/lib/rules/subsystem.js) repository.More than one subsystem may be valid for any particular issue or pull request.

--------------------------------

Contributing to AngularWe would love for you to contribute to Angular and help make it even better than it is today!As a contributor, here are the guidelines we would like you to follow:

--------raw HTML omitted  raw HTML omitted  Code of Conduct
Help us keep Angular open and inclusive.Please read and follow our [Code of Conduct](https://github.com/angular/code-of-conduct/blob/main/CODE_OF_CONDUCT.md).raw HTML omitted  raw HTML omitted  Got a Question or Problem?Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests.Instead, we recommend using [Stack Overflow](https://stackoverflow.com/questions/tagged/angular) to ask support-related questions.When creating a new question on Stack Overflow, make sure to add the `angular` tag.Stack Overflow is a much better place to ask questions since:- there are thousands of people willing to help on Stack Overflow- questions and answers stay available for public viewing so your question/answer might help someone else- Stack Overflow's voting system assures that the best answers are prominently visible.To save your and our time, we will systematically close all issues that are requests for general support and redirect people to Stack Overflow.If you would like to chat about the question in real-time, you can reach out via [the Angular community Discord server](https://discord.gg/angular).raw HTML omitted  raw HTML omitted  Found a Bug?If you find a bug in the source code, you can help us by  to our [GitHub Repository](https://github.com/angular/angular).Even better, you can  with a fix.raw HTML omitted  raw HTML omitted  Missing a Feature?You can request a new feature by  to our GitHub Repository.If you would like to implement a new feature, please consider the size of the change in order to determine the right steps to proceed:-For a Major Feature, first open an issue and outline your proposal so that it can be discussed.This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.Note: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.- Small Features can be crafted and directly .raw HTML omitted  raw HTML omitted  Submission Guidelines
raw HTML omitted  raw HTML omitted  Submitting an Issue
Before you submit an issue, please search the issue tracker.An issue for your problem might already exist and the discussion might inform you of workarounds readily available.We want to fix all the issues as soon as possible, but before fixing a bug, we need to reproduce and confirm it.In order to reproduce bugs, we require that you provide a minimal reproduction.Having a minimal reproducible scenario gives us a wealth of important information without going back and forth to you with additional questions.A minimal reproduction allows us to quickly confirm a bug (or point out a coding problem) as well as confirm that we are fixing the right problem.We require a minimal reproduction to save maintainers' time and ultimately be able to fix more bugs.Often, developers find coding problems themselves while preparing a minimal reproduction.We understand that sometimes it might be hard to extract essential bits of code from a larger codebase, but we really need to isolate the problem before we can fix it.Unfortunately, we are not able to investigate / fix bugs without a minimal reproduction, so if we don't hear back from you, we are going to close an issue that doesn't have enough info to be reproduced.You can file new issues by selecting from our [new issue templates](https://github.com/angular/angular/issues/new/choose) and filling out the issue template.raw HTML omitted  raw HTML omitted  Submitting a Pull Request (PR)
Before you submit your Pull Request (PR) consider the following guidelines:- Search [GitHub](https://github.com/angular/angular/pulls) for an open or closed PR that relates to your submission.You don't want to duplicate existing efforts.-Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.Discussing the design upfront helps to ensure that we're ready to accept your work.- Please sign our  before sending PRs.We cannot accept code without a signed CLA.Make sure you author all contributed Git commits with email address associated with your CLA signature.- [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the [angular/angular](https://github.com/angular/angular/fork) repo.- In your forked repository, make your changes in a new git branch:```
git checkout -b my-fix-branch main```- Create your patch, including appropriate test cases.- Follow our .- Run the full Angular test suite, as described in the [developer documentation](./contributing-docs/building-and-testing-angular.md), and ensure that all tests pass.- Commit your changes using a descriptive commit message that follows our .Adherence to these conventions is necessary because release notes are automatically generated from these messages.```
git commit --all```Note: the optional commit `--all` command line option will automatically "add" and "rm" edited files.- Push your branch to GitHub:```git push origin my-fix-branch```- In GitHub, send a pull request to `angular:main`.Reviewing a Pull RequestThe Angular team reserves the right not to accept pull requests from community members who haven't been good citizens of the community.Such behavior includes not following the [Angular code of conduct](https://github.com/angular/code-of-conduct) and applies within or outside of Angular managed channels.Addressing review feedbackIf we ask for changes via code reviews then:
- Make the required updates to the code.- Re-run the Angular test suites to ensure tests are still passing.- Create a fixup commit and push to your GitHub repository (this will update your Pull Request):```git commit --all --fixup HEAD
git push```For more info on working with fixup commits see [here](./contributing-docs/using-fixup-commits.md).That's it!Thank you for your contribution!Updating the commit message
A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our ).In order to update the commit message of the last commit on your branch:
- Check out your branch:```git checkout my-fix-branch```- Amend the last commit and modify the commit message:```git commit --amend```- Push to your GitHub repository:```git push --force-with-lease```
NOTE: raw HTML omittedIf you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.After your pull request is merged
After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:
- Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:```git push origin --delete my-fix-branch```- Check out the main branch:```git checkout main -f```- Delete the local branch:```git branch -D my-fix-branch```- Update your local `main` with the latest upstream version:```git pull --ff upstream main```
raw HTML omitted  raw HTML omitted  Coding RulesTo ensure consistency throughout the source code, keep these rules in mind as you are working:
- All features or bug fixes must be tested by one or more specs (unit-tests).- All public API methods must be documented.- We follow [Google's TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html), but wrap all code at 100 characters.An automated formatter is available, see [DEVELOPER.md](contributing-docs/building-and-testing-angular.md#formatting-your-source-code).raw HTML omitted  raw HTML omitted  Commit Message FormatThis specification is inspired by and supersedes the [AngularJS commit message format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#).We have very precise rules over how our Git commit messages must be formatted.This format leads to easier to read commit history.Each commit message consists of a header, a body, and a footer.```
<header>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>```The `header` is mandatory and must conform to the  format.The `body` is mandatory for all commits except for those of type "docs".When the body is present it must be at least 20 characters long and must conform to the  format.The `footer` is optional.The  format describes what the footer is used for and the structure it must have.raw HTML omitted  raw HTML omitted Commit Message Header```
<type>(<scope>): <short summary>
  │       │             │
  │       │             └─⫸ Summary in present tense.Not capitalized.No period at the end.│       │
  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|│                          elements|forms|http|language-service|localize|platform-browser|│                          platform-browser-dynamic|platform-server|router|service-worker|
  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|│                          devtools
  │
  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test```The `<type>` and `<summary>` fields are mandatory, the `(<scope>)` field is optional.TypeMust be one of the following:
- build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)- ci: Changes to our CI configuration files and scripts (examples: Github Actions, SauceLabs)- docs: Documentation only changes- feat: A new feature- fix: A bug fix- perf: A code change that improves performance- refactor: A code change that neither fixes a bug nor adds a feature- test: Adding missing tests or correcting existing tests
ScopeThe scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from commit messages).The following is the list of supported scopes:
- `animations`- `bazel`- `benchpress`- `common`- `compiler`- `compiler-cli`- `core`- `elements`- `forms`- `http`- `language-service`- `localize`- `platform-browser`- `platform-browser-dynamic`- `platform-server`- `router`- `service-worker`- `upgrade`- `zone.js`There are currently a few exceptions to the "use package name" rule:- `packaging`: used for changes that change the npm package layout in all of our packages, e.g. public path changes, package.json changes done to all packages, d.ts file/format changes, changes to bundles, etc.- `changelog`: used for updating the release notes in CHANGELOG.md- `dev-infra`: used for dev-infra related changes within the directories /scripts and /tools- `docs-infra`: used for docs-app (angular.dev) related changes within the /adev directory of the repo- `migrations`: used for changes to the `ng update` migrations.- `devtools`: used for changes in the [browser extension](./devtools/README.md).- none/empty string: useful for `test` and `refactor` changes that are done across all packages (e.g. `test: add missing unit tests`) and for docs changes that are not related to a specific package (e.g. `docs: fix typo in tutorial`).SummaryUse the summary field to provide a succinct description of the change:
- use the imperative, present tense: "change" not "changed" nor "changes"- don't capitalize the first letter- no dot (.) at the end
raw HTML omitted  raw HTML omitted Commit Message BodyJust as in the summary, use the imperative, present tense: "fix" not "fixed" nor "fixes".Explain the motivation for the change in the commit message body.This commit message should explain why you are making the change.You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change.raw HTML omitted  raw HTML omitted Commit Message FooterThe footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues, Jira tickets, and other PRs that this commit closes or is related to.For example:```
BREAKING CHANGE: <breaking change summary><BLANK LINE>
<breaking change description + migration instructions><BLANK LINE>
<BLANK LINE>Fixes #<issue number>```or```
DEPRECATED: <what is deprecated><BLANK LINE>
<deprecation description + recommended update path><BLANK LINE>
<BLANK LINE>Closes #<pr number>```Breaking Change section should start with the phrase `BREAKING CHANGE: ` followed by a summary of the breaking change, a blank line, and a detailed description of the breaking change that also includes migration instructions.Similarly, a Deprecation section should start with `DEPRECATED: ` followed by a short description of what is deprecated, a blank line, and a detailed description of the deprecation that also mentions the recommended update path.Revert commitsIf the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.The content of the commit message body should contain:
- information about the SHA of the commit being reverted in the following format: `This reverts commit <SHA>`,- a clear description of the reason for reverting the commit message.raw HTML omitted  raw HTML omitted  Signing the CLAPlease sign our Contributor License Agreement (CLA) before sending pull requests.For any code
changes to be accepted, the CLA must be signed.It's a quick process, we promise!-For individuals, we have a [simple click-through form](https://cla.developers.google.com/about/google-individual).- For corporations, we'll need you to
[print, sign and one of scan+email, fax or mail the form](https://cla.developers.google.com/about/google-corporate).If you have more than one GitHub accounts, or multiple email addresses associated with a single GitHub account, you must sign the CLA using the primary email address of the GitHub account used to author Git commits and send pull requests.The following documents can help you sort out issues with GitHub accounts and multiple email addresses:
- [https://help.github.com/articles/setting-your-commit-email-address-in-git/](https://help.github.com/articles/setting-your-commit-email-address-in-git/)- [https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean](https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean)- [https://help.github.com/articles/about-commit-email-addresses/](https://help.github.com/articles/about-commit-email-addresses/)- [https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/](https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/)

--------------------------------

Contributing to AngularWe would love for you to contribute to Angular and help make it even better than it is today!As a contributor, here are the guidelines we would like you to follow:

--------raw HTML omitted  raw HTML omitted  Code of Conduct
Help us keep Angular open and inclusive.Please read and follow our [Code of Conduct](https://github.com/angular/code-of-conduct/blob/main/CODE_OF_CONDUCT.md).raw HTML omitted  raw HTML omitted  Got a Question or Problem?Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests.Instead, we recommend using [Stack Overflow](https://stackoverflow.com/questions/tagged/angular) to ask support-related questions.When creating a new question on Stack Overflow, make sure to add the `angular` tag.Stack Overflow is a much better place to ask questions since:- there are thousands of people willing to help on Stack Overflow- questions and answers stay available for public viewing so your question/answer might help someone else- Stack Overflow's voting system assures that the best answers are prominently visible.To save your and our time, we will systematically close all issues that are requests for general support and redirect people to Stack Overflow.If you would like to chat about the question in real-time, you can reach out via [the Angular community Discord server](https://discord.gg/angular).raw HTML omitted  raw HTML omitted  Found a Bug?If you find a bug in the source code, you can help us by  to our [GitHub Repository](https://github.com/angular/angular).Even better, you can  with a fix.raw HTML omitted  raw HTML omitted  Missing a Feature?You can request a new feature by  to our GitHub Repository.If you would like to implement a new feature, please consider the size of the change in order to determine the right steps to proceed:-For a Major Feature, first open an issue and outline your proposal so that it can be discussed.This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.Note: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.- Small Features can be crafted and directly .raw HTML omitted  raw HTML omitted  Submission Guidelines
raw HTML omitted  raw HTML omitted  Submitting an Issue
Before you submit an issue, please search the issue tracker.An issue for your problem might already exist and the discussion might inform you of workarounds readily available.We want to fix all the issues as soon as possible, but before fixing a bug, we need to reproduce and confirm it.In order to reproduce bugs, we require that you provide a minimal reproduction.Having a minimal reproducible scenario gives us a wealth of important information without going back and forth to you with additional questions.A minimal reproduction allows us to quickly confirm a bug (or point out a coding problem) as well as confirm that we are fixing the right problem.We require a minimal reproduction to save maintainers' time and ultimately be able to fix more bugs.Often, developers find coding problems themselves while preparing a minimal reproduction.We understand that sometimes it might be hard to extract essential bits of code from a larger codebase, but we really need to isolate the problem before we can fix it.Unfortunately, we are not able to investigate / fix bugs without a minimal reproduction, so if we don't hear back from you, we are going to close an issue that doesn't have enough info to be reproduced.You can file new issues by selecting from our [new issue templates](https://github.com/angular/angular/issues/new/choose) and filling out the issue template.raw HTML omitted  raw HTML omitted  Submitting a Pull Request (PR)
Before you submit your Pull Request (PR) consider the following guidelines:- Search [GitHub](https://github.com/angular/angular/pulls) for an open or closed PR that relates to your submission.You don't want to duplicate existing efforts.-Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.Discussing the design upfront helps to ensure that we're ready to accept your work.- Please sign our  before sending PRs.We cannot accept code without a signed CLA.Make sure you author all contributed Git commits with email address associated with your CLA signature.- [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the [angular/angular](https://github.com/angular/angular/fork) repo.- In your forked repository, make your changes in a new git branch:```
git checkout -b my-fix-branch main```- Create your patch, including appropriate test cases.- Follow our .- Run the full Angular test suite, as described in the [developer documentation](./contributing-docs/building-and-testing-angular.md), and ensure that all tests pass.- Commit your changes using a descriptive commit message that follows our .Adherence to these conventions is necessary because release notes are automatically generated from these messages.```
git commit --all```Note: the optional commit `--all` command line option will automatically "add" and "rm" edited files.- Push your branch to GitHub:```git push origin my-fix-branch```- In GitHub, send a pull request to `angular:main`.Reviewing a Pull RequestThe Angular team reserves the right not to accept pull requests from community members who haven't been good citizens of the community.Such behavior includes not following the [Angular code of conduct](https://github.com/angular/code-of-conduct) and applies within or outside of Angular managed channels.Addressing review feedbackIf we ask for changes via code reviews then:
- Make the required updates to the code.- Re-run the Angular test suites to ensure tests are still passing.- Create a fixup commit and push to your GitHub repository (this will update your Pull Request):```git commit --all --fixup HEAD
git push```For more info on working with fixup commits see [here](./contributing-docs/using-fixup-commits.md).That's it!Thank you for your contribution!Updating the commit message
A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our ).In order to update the commit message of the last commit on your branch:
- Check out your branch:```git checkout my-fix-branch```- Amend the last commit and modify the commit message:```git commit --amend```- Push to your GitHub repository:```git push --force-with-lease```
NOTE: raw HTML omittedIf you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.After your pull request is merged
After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:
- Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:```git push origin --delete my-fix-branch```- Check out the main branch:```git checkout main -f```- Delete the local branch:```git branch -D my-fix-branch```- Update your local `main` with the latest upstream version:```git pull --ff upstream main```
raw HTML omitted  raw HTML omitted  Coding RulesTo ensure consistency throughout the source code, keep these rules in mind as you are working:
- All features or bug fixes must be tested by one or more specs (unit-tests).- All public API methods must be documented.- We follow [Google's TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html), but wrap all code at 100 characters.An automated formatter is available, see [DEVELOPER.md](contributing-docs/building-and-testing-angular.md#formatting-your-source-code).raw HTML omitted  raw HTML omitted  Commit Message FormatThis specification is inspired by and supersedes the [AngularJS commit message format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#).We have very precise rules over how our Git commit messages must be formatted.This format leads to easier to read commit history.Each commit message consists of a header, a body, and a footer.```
<header>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>```The `header` is mandatory and must conform to the  format.The `body` is mandatory for all commits except for those of type "docs".When the body is present it must be at least 20 characters long and must conform to the  format.The `footer` is optional.The  format describes what the footer is used for and the structure it must have.raw HTML omitted  raw HTML omitted Commit Message Header```
<type>(<scope>): <short summary>
  │       │             │
  │       │             └─⫸ Summary in present tense.Not capitalized.No period at the end.│       │
  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|│                          elements|forms|http|language-service|localize|platform-browser|│                          platform-browser-dynamic|platform-server|router|service-worker|
  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|│                          devtools
  │
  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test```The `<type>` and `<summary>` fields are mandatory, the `(<scope>)` field is optional.TypeMust be one of the following:
- build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)- ci: Changes to our CI configuration files and scripts (examples: Github Actions, SauceLabs)- docs: Documentation only changes- feat: A new feature- fix: A bug fix- perf: A code change that improves performance- refactor: A code change that neither fixes a bug nor adds a feature- test: Adding missing tests or correcting existing tests
ScopeThe scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from commit messages).The following is the list of supported scopes:
- `animations`- `bazel`- `benchpress`- `common`- `compiler`- `compiler-cli`- `core`- `elements`- `forms`- `http`- `language-service`- `localize`- `platform-browser`- `platform-browser-dynamic`- `platform-server`- `router`- `service-worker`- `upgrade`- `zone.js`There are currently a few exceptions to the "use package name" rule:- `packaging`: used for changes that change the npm package layout in all of our packages, e.g. public path changes, package.json changes done to all packages, d.ts file/format changes, changes to bundles, etc.- `changelog`: used for updating the release notes in CHANGELOG.md- `dev-infra`: used for dev-infra related changes within the directories /scripts and /tools- `docs-infra`: used for docs-app (angular.dev) related changes within the /adev directory of the repo- `migrations`: used for changes to the `ng update` migrations.- `devtools`: used for changes in the [browser extension](./devtools/README.md).- none/empty string: useful for `test` and `refactor` changes that are done across all packages (e.g. `test: add missing unit tests`) and for docs changes that are not related to a specific package (e.g. `docs: fix typo in tutorial`).SummaryUse the summary field to provide a succinct description of the change:
- use the imperative, present tense: "change" not "changed" nor "changes"- don't capitalize the first letter- no dot (.) at the end
raw HTML omitted  raw HTML omitted Commit Message BodyJust as in the summary, use the imperative, present tense: "fix" not "fixed" nor "fixes".Explain the motivation for the change in the commit message body.This commit message should explain why you are making the change.You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change.raw HTML omitted  raw HTML omitted Commit Message FooterThe footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues, Jira tickets, and other PRs that this commit closes or is related to.For example:```
BREAKING CHANGE: <breaking change summary><BLANK LINE>
<breaking change description + migration instructions><BLANK LINE>
<BLANK LINE>Fixes #<issue number>```or```
DEPRECATED: <what is deprecated><BLANK LINE>
<deprecation description + recommended update path><BLANK LINE>
<BLANK LINE>Closes #<pr number>```Breaking Change section should start with the phrase `BREAKING CHANGE: ` followed by a summary of the breaking change, a blank line, and a detailed description of the breaking change that also includes migration instructions.Similarly, a Deprecation section should start with `DEPRECATED: ` followed by a short description of what is deprecated, a blank line, and a detailed description of the deprecation that also mentions the recommended update path.Revert commitsIf the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.The content of the commit message body should contain:
- information about the SHA of the commit being reverted in the following format: `This reverts commit <SHA>`,- a clear description of the reason for reverting the commit message.raw HTML omitted  raw HTML omitted  Signing the CLAPlease sign our Contributor License Agreement (CLA) before sending pull requests.For any code
changes to be accepted, the CLA must be signed.It's a quick process, we promise!-For individuals, we have a [simple click-through form](https://cla.developers.google.com/about/google-individual).- For corporations, we'll need you to
[print, sign and one of scan+email, fax or mail the form](https://cla.developers.google.com/about/google-corporate).If you have more than one GitHub accounts, or multiple email addresses associated with a single GitHub account, you must sign the CLA using the primary email address of the GitHub account used to author Git commits and send pull requests.The following documents can help you sort out issues with GitHub accounts and multiple email addresses:
- [https://help.github.com/articles/setting-your-commit-email-address-in-git/](https://help.github.com/articles/setting-your-commit-email-address-in-git/)- [https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean](https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean)- [https://help.github.com/articles/about-commit-email-addresses/](https://help.github.com/articles/about-commit-email-addresses/)- [https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/](https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/)

--------------------------------

Contributing to AngularWe would love for you to contribute to Angular and help make it even better than it is today!As a contributor, here are the guidelines we would like you to follow:

--------raw HTML omitted  raw HTML omitted  Code of Conduct
Help us keep Angular open and inclusive.Please read and follow our [Code of Conduct](https://github.com/angular/code-of-conduct/blob/main/CODE_OF_CONDUCT.md).raw HTML omitted  raw HTML omitted  Got a Question or Problem?Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests.Instead, we recommend using [Stack Overflow](https://stackoverflow.com/questions/tagged/angular) to ask support-related questions.When creating a new question on Stack Overflow, make sure to add the `angular` tag.Stack Overflow is a much better place to ask questions since:- there are thousands of people willing to help on Stack Overflow- questions and answers stay available for public viewing so your question/answer might help someone else- Stack Overflow's voting system assures that the best answers are prominently visible.To save your and our time, we will systematically close all issues that are requests for general support and redirect people to Stack Overflow.If you would like to chat about the question in real-time, you can reach out via [the Angular community Discord server](https://discord.gg/angular).raw HTML omitted  raw HTML omitted  Found a Bug?If you find a bug in the source code, you can help us by  to our [GitHub Repository](https://github.com/angular/angular).Even better, you can  with a fix.raw HTML omitted  raw HTML omitted  Missing a Feature?You can request a new feature by  to our GitHub Repository.If you would like to implement a new feature, please consider the size of the change in order to determine the right steps to proceed:-For a Major Feature, first open an issue and outline your proposal so that it can be discussed.This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.Note: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.- Small Features can be crafted and directly .raw HTML omitted  raw HTML omitted  Submission Guidelines
raw HTML omitted  raw HTML omitted  Submitting an Issue
Before you submit an issue, please search the issue tracker.An issue for your problem might already exist and the discussion might inform you of workarounds readily available.We want to fix all the issues as soon as possible, but before fixing a bug, we need to reproduce and confirm it.In order to reproduce bugs, we require that you provide a minimal reproduction.Having a minimal reproducible scenario gives us a wealth of important information without going back and forth to you with additional questions.A minimal reproduction allows us to quickly confirm a bug (or point out a coding problem) as well as confirm that we are fixing the right problem.We require a minimal reproduction to save maintainers' time and ultimately be able to fix more bugs.Often, developers find coding problems themselves while preparing a minimal reproduction.We understand that sometimes it might be hard to extract essential bits of code from a larger codebase, but we really need to isolate the problem before we can fix it.Unfortunately, we are not able to investigate / fix bugs without a minimal reproduction, so if we don't hear back from you, we are going to close an issue that doesn't have enough info to be reproduced.You can file new issues by selecting from our [new issue templates](https://github.com/angular/angular/issues/new/choose) and filling out the issue template.raw HTML omitted  raw HTML omitted  Submitting a Pull Request (PR)
Before you submit your Pull Request (PR) consider the following guidelines:- Search [GitHub](https://github.com/angular/angular/pulls) for an open or closed PR that relates to your submission.You don't want to duplicate existing efforts.-Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.Discussing the design upfront helps to ensure that we're ready to accept your work.- Please sign our  before sending PRs.We cannot accept code without a signed CLA.Make sure you author all contributed Git commits with email address associated with your CLA signature.- [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the [angular/angular](https://github.com/angular/angular/fork) repo.- In your forked repository, make your changes in a new git branch:```
git checkout -b my-fix-branch main```- Create your patch, including appropriate test cases.- Follow our .- Run the full Angular test suite, as described in the [developer documentation](./contributing-docs/building-and-testing-angular.md), and ensure that all tests pass.- Commit your changes using a descriptive commit message that follows our .Adherence to these conventions is necessary because release notes are automatically generated from these messages.```
git commit --all```Note: the optional commit `--all` command line option will automatically "add" and "rm" edited files.- Push your branch to GitHub:```git push origin my-fix-branch```- In GitHub, send a pull request to `angular:main`.Reviewing a Pull RequestThe Angular team reserves the right not to accept pull requests from community members who haven't been good citizens of the community.Such behavior includes not following the [Angular code of conduct](https://github.com/angular/code-of-conduct) and applies within or outside of Angular managed channels.Addressing review feedbackIf we ask for changes via code reviews then:
- Make the required updates to the code.- Re-run the Angular test suites to ensure tests are still passing.- Create a fixup commit and push to your GitHub repository (this will update your Pull Request):```git commit --all --fixup HEAD
git push```For more info on working with fixup commits see [here](./contributing-docs/using-fixup-commits.md).That's it!Thank you for your contribution!Updating the commit message
A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our ).In order to update the commit message of the last commit on your branch:
- Check out your branch:```git checkout my-fix-branch```- Amend the last commit and modify the commit message:```git commit --amend```- Push to your GitHub repository:```git push --force-with-lease```
NOTE: raw HTML omittedIf you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.After your pull request is merged
After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:
- Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:```git push origin --delete my-fix-branch```- Check out the main branch:```git checkout main -f```- Delete the local branch:```git branch -D my-fix-branch```- Update your local `main` with the latest upstream version:```git pull --ff upstream main```
raw HTML omitted  raw HTML omitted  Coding RulesTo ensure consistency throughout the source code, keep these rules in mind as you are working:
- All features or bug fixes must be tested by one or more specs (unit-tests).- All public API methods must be documented.- We follow [Google's TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html), but wrap all code at 100 characters.An automated formatter is available, see [DEVELOPER.md](contributing-docs/building-and-testing-angular.md#formatting-your-source-code).raw HTML omitted  raw HTML omitted  Commit Message FormatThis specification is inspired by and supersedes the [AngularJS commit message format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#).We have very precise rules over how our Git commit messages must be formatted.This format leads to easier to read commit history.Each commit message consists of a header, a body, and a footer.```
<header>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>```The `header` is mandatory and must conform to the  format.The `body` is mandatory for all commits except for those of type "docs".When the body is present it must be at least 20 characters long and must conform to the  format.The `footer` is optional.The  format describes what the footer is used for and the structure it must have.raw HTML omitted  raw HTML omitted Commit Message Header```
<type>(<scope>): <short summary>
  │       │             │
  │       │             └─⫸ Summary in present tense.Not capitalized.No period at the end.│       │
  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|│                          elements|forms|http|language-service|localize|platform-browser|│                          platform-browser-dynamic|platform-server|router|service-worker|
  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|│                          devtools
  │
  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test```The `<type>` and `<summary>` fields are mandatory, the `(<scope>)` field is optional.TypeMust be one of the following:
- build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)- ci: Changes to our CI configuration files and scripts (examples: Github Actions, SauceLabs)- docs: Documentation only changes- feat: A new feature- fix: A bug fix- perf: A code change that improves performance- refactor: A code change that neither fixes a bug nor adds a feature- test: Adding missing tests or correcting existing tests
ScopeThe scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from commit messages).The following is the list of supported scopes:
- `animations`- `bazel`- `benchpress`- `common`- `compiler`- `compiler-cli`- `core`- `elements`- `forms`- `http`- `language-service`- `localize`- `platform-browser`- `platform-browser-dynamic`- `platform-server`- `router`- `service-worker`- `upgrade`- `zone.js`There are currently a few exceptions to the "use package name" rule:- `packaging`: used for changes that change the npm package layout in all of our packages, e.g. public path changes, package.json changes done to all packages, d.ts file/format changes, changes to bundles, etc.- `changelog`: used for updating the release notes in CHANGELOG.md- `dev-infra`: used for dev-infra related changes within the directories /scripts and /tools- `docs-infra`: used for docs-app (angular.dev) related changes within the /adev directory of the repo- `migrations`: used for changes to the `ng update` migrations.- `devtools`: used for changes in the [browser extension](./devtools/README.md).- none/empty string: useful for `test` and `refactor` changes that are done across all packages (e.g. `test: add missing unit tests`) and for docs changes that are not related to a specific package (e.g. `docs: fix typo in tutorial`).SummaryUse the summary field to provide a succinct description of the change:
- use the imperative, present tense: "change" not "changed" nor "changes"- don't capitalize the first letter- no dot (.) at the end
raw HTML omitted  raw HTML omitted Commit Message BodyJust as in the summary, use the imperative, present tense: "fix" not "fixed" nor "fixes".Explain the motivation for the change in the commit message body.This commit message should explain why you are making the change.You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change.raw HTML omitted  raw HTML omitted Commit Message FooterThe footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues, Jira tickets, and other PRs that this commit closes or is related to.For example:```
BREAKING CHANGE: <breaking change summary><BLANK LINE>
<breaking change description + migration instructions><BLANK LINE>
<BLANK LINE>Fixes #<issue number>```or```
DEPRECATED: <what is deprecated><BLANK LINE>
<deprecation description + recommended update path><BLANK LINE>
<BLANK LINE>Closes #<pr number>```Breaking Change section should start with the phrase `BREAKING CHANGE: ` followed by a summary of the breaking change, a blank line, and a detailed description of the breaking change that also includes migration instructions.Similarly, a Deprecation section should start with `DEPRECATED: ` followed by a short description of what is deprecated, a blank line, and a detailed description of the deprecation that also mentions the recommended update path.Revert commitsIf the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.The content of the commit message body should contain:
- information about the SHA of the commit being reverted in the following format: `This reverts commit <SHA>`,- a clear description of the reason for reverting the commit message.raw HTML omitted  raw HTML omitted  Signing the CLAPlease sign our Contributor License Agreement (CLA) before sending pull requests.For any code
changes to be accepted, the CLA must be signed.It's a quick process, we promise!-For individuals, we have a [simple click-through form](https://cla.developers.google.com/about/google-individual).- For corporations, we'll need you to
[print, sign and one of scan+email, fax or mail the form](https://cla.developers.google.com/about/google-corporate).If you have more than one GitHub accounts, or multiple email addresses associated with a single GitHub account, you must sign the CLA using the primary email address of the GitHub account used to author Git commits and send pull requests.The following documents can help you sort out issues with GitHub accounts and multiple email addresses:
- [https://help.github.com/articles/setting-your-commit-email-address-in-git/](https://help.github.com/articles/setting-your-commit-email-address-in-git/)- [https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean](https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean)- [https://help.github.com/articles/about-commit-email-addresses/](https://help.github.com/articles/about-commit-email-addresses/)- [https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/](https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/)

--------------------------------

Working with fixup commitsThis document provides information and guidelines for working with fixup commits:

----[This blog post](https://thoughtbot.com/blog/autosquashing-git-commits) is also a good resource on
the subject.raw HTML omitted  raw HTML omittedWhat are fixup commitsAt their core, fixup commits are just regular commits with a special commit message:The first line of their commit message starts with "fixup! " (notice the space after "!") followed
by the first line of the commit message of an earlier commit (it doesn't have to be the immediately
preceding one).The purpose of a fixup commit is to modify an earlier commit.I.e. it allows adding more changes in a new commit, but "marking" them as belonging to an earlier
commit.`Git` provides tools to make it easy to squash fixup commits into the original commit at a later
time (see  for details).For example, let's assume you have added the following commits to your branch:```
feat: first commit
fix: second commit```If you want to add more changes to the first commit, you can create a new commit with the commit
message:
`fixup! feat: first commit`:```
feat: first commit
fix: second commit
fixup!feat: first commit```raw HTML omitted  raw HTML omittedWhy use fixup commits
So, when are fixup commits useful?During the life of a Pull Request, a reviewer might request changes.The Pull Request author can make the requested changes and submit them for another review.Normally, these changes should be part of one of the original commits of the Pull Request.However, amending an existing commit with the changes makes it difficult for the reviewer to know
exactly what has changed since the last time they reviewed the Pull Request.Here is where fixup commits come in handy.By addressing review feedback in fixup commits, you make it very straight forward for the reviewer
to see what are the new changes that need to be reviewed and verify that their earlier feedback has
been addressed.This can save a lot of effort, especially on larger Pull Requests (where having to re-review all
the changes is pretty wasteful).When the time comes to merge the Pull Request into the repository, the merge script knows how to
automatically squash fixup commits with the corresponding regular commits.raw HTML omitted  raw HTML omitted  Creating fixup commitsAs mentioned , the only thing that differentiates a fixup commit from a
regular commit is the commit message.You can create a fixup commit by specifying an appropriate commit message (
i.e. `fixup! <original-commit-message-subject>`).In addition, the `git` command-line tool provides an easy way to create a fixup commit
via [git commit --fixup](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---fixupltcommitgt):```
# Create a fixup commit to fix up the last commit on the branch:
git commit --fixup HEAD ...# Create a fixup commit to fix up commit with SHA <COMMIT_SHA>:
git commit --fixup <COMMIT_SHA> ...```raw HTML omitted  raw HTML omitted  Squashing fixup commitsAs mentioned above, the merge script will automatically squash fixup commits.However, sometimes you might want to manually squash a fixup commit.Rebasing to squash fixup commitsThe easiest way to re-order and squash any commit is
via [rebasing interactively](https://git-scm.com/docs/git-rebase#_interactive_mode).You move a
commit right after the one you want to squash it into in the rebase TODO list and change the
corresponding action from `pick` to `fixup`.`Git` can do all these automatically for you if you pass the `--autosquash` option to `git rebase`.See the [git docs](https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---autosquash)
for more details.Additional optionsYou may like to consider some optional configurations:
Configuring `git` to auto-squash by defaultBy default, `git` will not automatically squash fixup commits when interactively rebasing.If you prefer to not have to pass the `--autosquash` option every time, you can change the default
behavior by setting the `rebase.autoSquash` `git` config option to true.See
the [git docs](https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt-rebaseautoSquash)
for more details.If you have `rebase.autoSquash` set to true, you can pass the `--no-autosquash` option
to `git rebase` to override and disable this setting.

--------------------------------

Building and Testing AngularThis document describes how to set up your development environment to build and test Angular.It also explains the basic mechanics of using `git`, `node`, and `yarn`.---------See the [contribution guidelines](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)
if you'd like to contribute to Angular.Prerequisite SoftwareBefore you can build and test Angular, you must install and configure the
following on your development machine:- [Git](https://git-scm.com/) and/or the [GitHub app](https://desktop.github.com/) (for Mac and

Windows);
[GitHub's Guide to Installing Git](https://help.github.com/articles/set-up-git) is a good source
of information.Windows Users: Git Bash or an equivalent shell is required
Windows Powershell and cmd shells are not
supported [#46780](https://github.com/angular/angular/issues/46780) so some commands might fail- [Node.js](https://nodejs.org), (version specified in [.nvmrc](../.nvmrc)) which is used to run a
THIS IS END BLOCK MARKER.development web server,
run tests, and generate distributable files.`.nvmrc` is read by [nvm](https://github.com/nvm-sh/nvm) commands like `nvm install`
and `nvm use`.- [Yarn](https://yarnpkg.com) (version specified in the engines field

of [package.json](../package.json)) which is used to install dependencies.- On Windows: [MSYS2](https://www.msys2.org/) which is used by Bazel.Followthe [instructions](https://bazel.build/install/windows#installing-compilers-and-language-runtimes)Getting the Sources
Fork and clone the Angular repository:
- Login to your GitHub account or create one by following the instructions given[here](https://github.com/signup/free).- [Fork](https://help.github.com/forking) the [main Angularrepository](https://github.com/angular/angular).- Clone your fork of the Angular repository and define an `upstream` remote pointing back tothe Angular repository that you forked in the first place.```
# Clone your GitHub repository:
git clone git@github.com:<github username>/angular.git# Go to the Angular directory:
cd angular# Add the main Angular repository as an upstream remote to your repository:
git remote add upstream https://github.com/angular/angular.git```Installing NPM Modules
Next, install the JavaScript modules needed to build and test Angular:```
# Install Angular project dependencies (package.json)
yarn install```Building
To build Angular run:```
yarn build```- Results are put in the `dist/packages-dist` folder.Running Tests LocallyBazel is used as the primary tool for building and testing Angular.To see how to run and debug Angular tests locally please refer to the
Bazel [Testing Angular](./building-with-bazel.md#testing-angular) section.Note that you should execute all test suites before submitting a PR to
GitHub (`yarn test //packages/...`).However, affected tests will be executed on our CI infrastructure.So if you forgot to run some
affected tests which would fail, GitHub will indicate the error state and present you the failures.PRs can only be merged if the code is formatted properly and all tests are passing.raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted
Testing changes against a local library/project
Often for developers the best way to ensure the changes they have made work as expected is to run
use changes in another library or project.To do this developers can build Angular locally, and
using `yarn link` build a local project with the created artifacts.This can be done by running:```
yarn ng-dev misc build-and-link <path-to-local-project-root>```Building and serving a project
CacheWhen making changes to Angular packages and testing in a local library/project you need to
run `ng cache disable` to disable the Angular CLI disk cache.If you are making changes that are not
reflected in your locally served library/project, verify if you
have [CLI Cache](https://angular.io/guide/workspace-config#cache-options) disabled.Invoking the Angular CLI
The Angular CLI needs to be invoked using
Node.js [--preserve-symlinks](https://nodejs.org/api/cli.html#--preserve-symlinks) flag.Otherwise
the symbolic links will be resolved using their real path which causes node module resolution to
fail.```
node --preserve-symlinks --preserve-symlinks-main node_modules/@angular/cli/lib/init.js serve```Formatting your source code
Angular uses [prettier](https://prettier.io) to format the source code.If the source code is not properly formatted, the CI will fail and the PR cannot be merged.You can automatically format your code by running:
- `yarn ng-dev format changed [shaOrRef]`: format only files changed since the providedsha/ref.`shaOrRef` defaults to `main`.- `yarn ng-dev format all`: format all source code- `yarn ng-dev format files <files..>`: format only provided files
Linting/verifying your Source CodeYou can check that your code is properly formatted and adheres to coding style by running:```
$ yarn lint```Publishing Snapshot BuildsWhen a build of any branch on the upstream fork angular/angular is green on CI, it
automatically publishes build artifacts to repositories in the Angular org.For example,
the `@angular/core` package is published to [https://github.com/angular/core-builds](https://github.com/angular/core-builds).You may find that your un-merged change needs some validation from external participants.Rather than requiring them to pull your Pull Request and build Angular locally, they can depend on
snapshots of the Angular packages created based on the code in the Pull Request.Publishing to GitHub ReposYou can also manually publish `*-builds` snapshots just like our CI build does for upstream
builds.Before being able to publish the packages, you need to build them locally by running the
`yarn build` command.First time, you need to create the GitHub repositories:```
$ export TOKEN=[get one from https://github.com/settings/tokens]$ CREATE_REPOS=1 ./scripts/ci/publish-build-artifacts.sh [GitHub username]```For subsequent snapshots, just run:```
$ ./scripts/ci/publish-build-artifacts.sh [GitHub username]```The script will publish the build snapshot to a branch with the same name as your current branch,
and create it if it doesn't exist.Bazel Support
IDEs
VS Code
- Install [Bazel](https://marketplace.visualstudio.com/items?itemName=BazelBuild.vscode-bazel)extension for VS Code.WebStorm / IntelliJ
- Install the [Bazel](https://plugins.jetbrains.com/plugin/8609-bazel) plugin- You can find the settings under `Preferences->Other Settings->Bazel Settings`It will automatically recognize `*.bazel` and `*.bzl` files.Remote Build Execution and Remote Caching
Bazel builds in the Angular repository use a shared cache.When a build occurs, a hash of the inputs
is computed
and checked against available outputs in the shared cache.If an output is found, it is used as the
output for the
build action rather than performing the build locally.Remote Build Execution requires authentication as a google.com account.--config=remote flagThe `--config=remote` flag can be added to enable remote execution of builds.

--------------------------------

Building and Testing AngularThis document describes how to set up your development environment to build and test Angular.It also explains the basic mechanics of using `git`, `node`, and `yarn`.---------See the [contribution guidelines](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)
if you'd like to contribute to Angular.Prerequisite SoftwareBefore you can build and test Angular, you must install and configure the
following on your development machine:- [Git](https://git-scm.com/) and/or the [GitHub app](https://desktop.github.com/) (for Mac and

Windows);
[GitHub's Guide to Installing Git](https://help.github.com/articles/set-up-git) is a good source
of information.Windows Users: Git Bash or an equivalent shell is required
Windows Powershell and cmd shells are not
supported [#46780](https://github.com/angular/angular/issues/46780) so some commands might fail- [Node.js](https://nodejs.org), (version specified in [.nvmrc](../.nvmrc)) which is used to run a
THIS IS END BLOCK MARKER.development web server,
run tests, and generate distributable files.`.nvmrc` is read by [nvm](https://github.com/nvm-sh/nvm) commands like `nvm install`
and `nvm use`.- [Yarn](https://yarnpkg.com) (version specified in the engines field

of [package.json](../package.json)) which is used to install dependencies.- On Windows: [MSYS2](https://www.msys2.org/) which is used by Bazel.Followthe [instructions](https://bazel.build/install/windows#installing-compilers-and-language-runtimes)Getting the Sources
Fork and clone the Angular repository:
- Login to your GitHub account or create one by following the instructions given[here](https://github.com/signup/free).- [Fork](https://help.github.com/forking) the [main Angularrepository](https://github.com/angular/angular).- Clone your fork of the Angular repository and define an `upstream` remote pointing back tothe Angular repository that you forked in the first place.```
# Clone your GitHub repository:
git clone git@github.com:<github username>/angular.git# Go to the Angular directory:
cd angular# Add the main Angular repository as an upstream remote to your repository:
git remote add upstream https://github.com/angular/angular.git```Installing NPM Modules
Next, install the JavaScript modules needed to build and test Angular:```
# Install Angular project dependencies (package.json)
yarn install```Building
To build Angular run:```
yarn build```- Results are put in the `dist/packages-dist` folder.Running Tests LocallyBazel is used as the primary tool for building and testing Angular.To see how to run and debug Angular tests locally please refer to the
Bazel [Testing Angular](./building-with-bazel.md#testing-angular) section.Note that you should execute all test suites before submitting a PR to
GitHub (`yarn test //packages/...`).However, affected tests will be executed on our CI infrastructure.So if you forgot to run some
affected tests which would fail, GitHub will indicate the error state and present you the failures.PRs can only be merged if the code is formatted properly and all tests are passing.raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted
Testing changes against a local library/project
Often for developers the best way to ensure the changes they have made work as expected is to run
use changes in another library or project.To do this developers can build Angular locally, and
using `yarn link` build a local project with the created artifacts.This can be done by running:```
yarn ng-dev misc build-and-link <path-to-local-project-root>```Building and serving a project
CacheWhen making changes to Angular packages and testing in a local library/project you need to
run `ng cache disable` to disable the Angular CLI disk cache.If you are making changes that are not
reflected in your locally served library/project, verify if you
have [CLI Cache](https://angular.io/guide/workspace-config#cache-options) disabled.Invoking the Angular CLI
The Angular CLI needs to be invoked using
Node.js [--preserve-symlinks](https://nodejs.org/api/cli.html#--preserve-symlinks) flag.Otherwise
the symbolic links will be resolved using their real path which causes node module resolution to
fail.```
node --preserve-symlinks --preserve-symlinks-main node_modules/@angular/cli/lib/init.js serve```Formatting your source code
Angular uses [prettier](https://prettier.io) to format the source code.If the source code is not properly formatted, the CI will fail and the PR cannot be merged.You can automatically format your code by running:
- `yarn ng-dev format changed [shaOrRef]`: format only files changed since the providedsha/ref.`shaOrRef` defaults to `main`.- `yarn ng-dev format all`: format all source code- `yarn ng-dev format files <files..>`: format only provided files
Linting/verifying your Source CodeYou can check that your code is properly formatted and adheres to coding style by running:```
$ yarn lint```Publishing Snapshot BuildsWhen a build of any branch on the upstream fork angular/angular is green on CI, it
automatically publishes build artifacts to repositories in the Angular org.For example,
the `@angular/core` package is published to [https://github.com/angular/core-builds](https://github.com/angular/core-builds).You may find that your un-merged change needs some validation from external participants.Rather than requiring them to pull your Pull Request and build Angular locally, they can depend on
snapshots of the Angular packages created based on the code in the Pull Request.Publishing to GitHub ReposYou can also manually publish `*-builds` snapshots just like our CI build does for upstream
builds.Before being able to publish the packages, you need to build them locally by running the
`yarn build` command.First time, you need to create the GitHub repositories:```
$ export TOKEN=[get one from https://github.com/settings/tokens]$ CREATE_REPOS=1 ./scripts/ci/publish-build-artifacts.sh [GitHub username]```For subsequent snapshots, just run:```
$ ./scripts/ci/publish-build-artifacts.sh [GitHub username]```The script will publish the build snapshot to a branch with the same name as your current branch,
and create it if it doesn't exist.Bazel Support
IDEs
VS Code
- Install [Bazel](https://marketplace.visualstudio.com/items?itemName=BazelBuild.vscode-bazel)extension for VS Code.WebStorm / IntelliJ
- Install the [Bazel](https://plugins.jetbrains.com/plugin/8609-bazel) plugin- You can find the settings under `Preferences->Other Settings->Bazel Settings`It will automatically recognize `*.bazel` and `*.bzl` files.Remote Build Execution and Remote Caching
Bazel builds in the Angular repository use a shared cache.When a build occurs, a hash of the inputs
is computed
and checked against available outputs in the shared cache.If an output is found, it is used as the
output for the
build action rather than performing the build locally.Remote Build Execution requires authentication as a google.com account.--config=remote flagThe `--config=remote` flag can be added to enable remote execution of builds.

--------------------------------

Angular DevTools
Angular DevTools is a browser DevTools extension for debugging and profiling Angular applications.Developing Locally
 raw HTML omitted 
Set up
Follow the instructions below to set up your Angular DevTools development
environment.Note that all commands should be executed in the repository root, not`devtools/`.All file paths are also relative to the repository root.Debian Linux, MacOS, and Windows via WSL should build successfully.Building
natively on Windows without WSL is not supported at the moment.To set up your development environment, first install the [correct version of Node](/.nvmrc).If you have
[nvm](https://github.com/nvm-sh/nvm) set up, this can be done with:```
nvm install```Second, install [Yarn](https://classic.yarnpkg.com/en/):```
npm install -g yarn@1```Third, install NPM dependencies:```
yarn --frozen-lockfile```Now you should be ready to build the DevTools extension.Dev buildsTo run the extension in development mode run:```
yarn devtools:devserver```You can also run a standalone version of the demo app with:```
yarn devtools:devserver:demo-standalone```This would start a development server that you can access on [http://localhost:4200](http://localhost:4200).In development, Angular DevTools
uses a "development shell."This is different from "chrome shell" in a way, that it runs the user's app in an iframe.DevTools then communicate with the user's app via message passing.Release buildsYou can build the release version of Angular DevTools for either Chrome or Firefox with:```
yarn devtools:build:chrome
yarn devtools:build:firefox```Either way, the built extension will be at `dist/bin/devtools/projects/shell-browser/src/prodapp`.Installation
For Chrome, you can install the extension from `dist/bin/devtools/projects/shell-browser/src/prodapp` by following the
guide from [here](https://developer.chrome.com/docs/extensions/get-started/tutorial/hello-world#load-unpacked).For Firefox, to load the extension, you can go to the about:debugging page, click the "This Firefox" option and then
click the Load Temporary Add-on button.You'll have to select the manifest file in
`dist/bin/devtools/projects/shell-browser/src/prodapp` directly.

--------------------------------

Contributing to AngularWe would love for you to contribute to Angular and help make it even better than it is today!As a contributor, here are the guidelines we would like you to follow:

--------raw HTML omitted  raw HTML omitted  Code of Conduct
Help us keep Angular open and inclusive.Please read and follow our [Code of Conduct](https://github.com/angular/code-of-conduct/blob/main/CODE_OF_CONDUCT.md).raw HTML omitted  raw HTML omitted  Got a Question or Problem?Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests.Instead, we recommend using [Stack Overflow](https://stackoverflow.com/questions/tagged/angular) to ask support-related questions.When creating a new question on Stack Overflow, make sure to add the `angular` tag.Stack Overflow is a much better place to ask questions since:- there are thousands of people willing to help on Stack Overflow- questions and answers stay available for public viewing so your question/answer might help someone else- Stack Overflow's voting system assures that the best answers are prominently visible.To save your and our time, we will systematically close all issues that are requests for general support and redirect people to Stack Overflow.If you would like to chat about the question in real-time, you can reach out via [the Angular community Discord server](https://discord.gg/angular).raw HTML omitted  raw HTML omitted  Found a Bug?If you find a bug in the source code, you can help us by  to our [GitHub Repository](https://github.com/angular/angular).Even better, you can  with a fix.raw HTML omitted  raw HTML omitted  Missing a Feature?You can request a new feature by  to our GitHub Repository.If you would like to implement a new feature, please consider the size of the change in order to determine the right steps to proceed:-For a Major Feature, first open an issue and outline your proposal so that it can be discussed.This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.Note: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.- Small Features can be crafted and directly .raw HTML omitted  raw HTML omitted  Submission Guidelines
raw HTML omitted  raw HTML omitted  Submitting an Issue
Before you submit an issue, please search the issue tracker.An issue for your problem might already exist and the discussion might inform you of workarounds readily available.We want to fix all the issues as soon as possible, but before fixing a bug, we need to reproduce and confirm it.In order to reproduce bugs, we require that you provide a minimal reproduction.Having a minimal reproducible scenario gives us a wealth of important information without going back and forth to you with additional questions.A minimal reproduction allows us to quickly confirm a bug (or point out a coding problem) as well as confirm that we are fixing the right problem.We require a minimal reproduction to save maintainers' time and ultimately be able to fix more bugs.Often, developers find coding problems themselves while preparing a minimal reproduction.We understand that sometimes it might be hard to extract essential bits of code from a larger codebase, but we really need to isolate the problem before we can fix it.Unfortunately, we are not able to investigate / fix bugs without a minimal reproduction, so if we don't hear back from you, we are going to close an issue that doesn't have enough info to be reproduced.You can file new issues by selecting from our [new issue templates](https://github.com/angular/angular/issues/new/choose) and filling out the issue template.raw HTML omitted  raw HTML omitted  Submitting a Pull Request (PR)
Before you submit your Pull Request (PR) consider the following guidelines:- Search [GitHub](https://github.com/angular/angular/pulls) for an open or closed PR that relates to your submission.You don't want to duplicate existing efforts.-Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.Discussing the design upfront helps to ensure that we're ready to accept your work.- Please sign our  before sending PRs.We cannot accept code without a signed CLA.Make sure you author all contributed Git commits with email address associated with your CLA signature.- [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the [angular/angular](https://github.com/angular/angular/fork) repo.- In your forked repository, make your changes in a new git branch:```
git checkout -b my-fix-branch main```- Create your patch, including appropriate test cases.- Follow our .- Run the full Angular test suite, as described in the [developer documentation](./contributing-docs/building-and-testing-angular.md), and ensure that all tests pass.- Commit your changes using a descriptive commit message that follows our .Adherence to these conventions is necessary because release notes are automatically generated from these messages.```
git commit --all```Note: the optional commit `--all` command line option will automatically "add" and "rm" edited files.- Push your branch to GitHub:```git push origin my-fix-branch```- In GitHub, send a pull request to `angular:main`.Reviewing a Pull RequestThe Angular team reserves the right not to accept pull requests from community members who haven't been good citizens of the community.Such behavior includes not following the [Angular code of conduct](https://github.com/angular/code-of-conduct) and applies within or outside of Angular managed channels.Addressing review feedbackIf we ask for changes via code reviews then:
- Make the required updates to the code.- Re-run the Angular test suites to ensure tests are still passing.- Create a fixup commit and push to your GitHub repository (this will update your Pull Request):```git commit --all --fixup HEAD
git push```For more info on working with fixup commits see [here](./contributing-docs/using-fixup-commits.md).That's it!Thank you for your contribution!Updating the commit message
A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our ).In order to update the commit message of the last commit on your branch:
- Check out your branch:```git checkout my-fix-branch```- Amend the last commit and modify the commit message:```git commit --amend```- Push to your GitHub repository:```git push --force-with-lease```
NOTE: raw HTML omittedIf you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.After your pull request is merged
After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:
- Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:```git push origin --delete my-fix-branch```- Check out the main branch:```git checkout main -f```- Delete the local branch:```git branch -D my-fix-branch```- Update your local `main` with the latest upstream version:```git pull --ff upstream main```
raw HTML omitted  raw HTML omitted  Coding RulesTo ensure consistency throughout the source code, keep these rules in mind as you are working:
- All features or bug fixes must be tested by one or more specs (unit-tests).- All public API methods must be documented.- We follow [Google's TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html), but wrap all code at 100 characters.An automated formatter is available, see [DEVELOPER.md](contributing-docs/building-and-testing-angular.md#formatting-your-source-code).raw HTML omitted  raw HTML omitted  Commit Message FormatThis specification is inspired by and supersedes the [AngularJS commit message format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#).We have very precise rules over how our Git commit messages must be formatted.This format leads to easier to read commit history.Each commit message consists of a header, a body, and a footer.```
<header>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>```The `header` is mandatory and must conform to the  format.The `body` is mandatory for all commits except for those of type "docs".When the body is present it must be at least 20 characters long and must conform to the  format.The `footer` is optional.The  format describes what the footer is used for and the structure it must have.raw HTML omitted  raw HTML omitted Commit Message Header```
<type>(<scope>): <short summary>
  │       │             │
  │       │             └─⫸ Summary in present tense.Not capitalized.No period at the end.│       │
  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|│                          elements|forms|http|language-service|localize|platform-browser|│                          platform-browser-dynamic|platform-server|router|service-worker|
  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|│                          devtools
  │
  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test```The `<type>` and `<summary>` fields are mandatory, the `(<scope>)` field is optional.TypeMust be one of the following:
- build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)- ci: Changes to our CI configuration files and scripts (examples: Github Actions, SauceLabs)- docs: Documentation only changes- feat: A new feature- fix: A bug fix- perf: A code change that improves performance- refactor: A code change that neither fixes a bug nor adds a feature- test: Adding missing tests or correcting existing tests
ScopeThe scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from commit messages).The following is the list of supported scopes:
- `animations`- `bazel`- `benchpress`- `common`- `compiler`- `compiler-cli`- `core`- `elements`- `forms`- `http`- `language-service`- `localize`- `platform-browser`- `platform-browser-dynamic`- `platform-server`- `router`- `service-worker`- `upgrade`- `zone.js`There are currently a few exceptions to the "use package name" rule:- `packaging`: used for changes that change the npm package layout in all of our packages, e.g. public path changes, package.json changes done to all packages, d.ts file/format changes, changes to bundles, etc.- `changelog`: used for updating the release notes in CHANGELOG.md- `dev-infra`: used for dev-infra related changes within the directories /scripts and /tools- `docs-infra`: used for docs-app (angular.dev) related changes within the /adev directory of the repo- `migrations`: used for changes to the `ng update` migrations.- `devtools`: used for changes in the [browser extension](./devtools/README.md).- none/empty string: useful for `test` and `refactor` changes that are done across all packages (e.g. `test: add missing unit tests`) and for docs changes that are not related to a specific package (e.g. `docs: fix typo in tutorial`).SummaryUse the summary field to provide a succinct description of the change:
- use the imperative, present tense: "change" not "changed" nor "changes"- don't capitalize the first letter- no dot (.) at the end
raw HTML omitted  raw HTML omitted Commit Message BodyJust as in the summary, use the imperative, present tense: "fix" not "fixed" nor "fixes".Explain the motivation for the change in the commit message body.This commit message should explain why you are making the change.You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change.raw HTML omitted  raw HTML omitted Commit Message FooterThe footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues, Jira tickets, and other PRs that this commit closes or is related to.For example:```
BREAKING CHANGE: <breaking change summary><BLANK LINE>
<breaking change description + migration instructions><BLANK LINE>
<BLANK LINE>Fixes #<issue number>```or```
DEPRECATED: <what is deprecated><BLANK LINE>
<deprecation description + recommended update path><BLANK LINE>
<BLANK LINE>Closes #<pr number>```Breaking Change section should start with the phrase `BREAKING CHANGE: ` followed by a summary of the breaking change, a blank line, and a detailed description of the breaking change that also includes migration instructions.Similarly, a Deprecation section should start with `DEPRECATED: ` followed by a short description of what is deprecated, a blank line, and a detailed description of the deprecation that also mentions the recommended update path.Revert commitsIf the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.The content of the commit message body should contain:
- information about the SHA of the commit being reverted in the following format: `This reverts commit <SHA>`,- a clear description of the reason for reverting the commit message.raw HTML omitted  raw HTML omitted  Signing the CLAPlease sign our Contributor License Agreement (CLA) before sending pull requests.For any code
changes to be accepted, the CLA must be signed.It's a quick process, we promise!-For individuals, we have a [simple click-through form](https://cla.developers.google.com/about/google-individual).- For corporations, we'll need you to
[print, sign and one of scan+email, fax or mail the form](https://cla.developers.google.com/about/google-corporate).If you have more than one GitHub accounts, or multiple email addresses associated with a single GitHub account, you must sign the CLA using the primary email address of the GitHub account used to author Git commits and send pull requests.The following documents can help you sort out issues with GitHub accounts and multiple email addresses:
- [https://help.github.com/articles/setting-your-commit-email-address-in-git/](https://help.github.com/articles/setting-your-commit-email-address-in-git/)- [https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean](https://stackoverflow.com/questions/37245303/what-does-usera-committed-with-userb-13-days-ago-on-github-mean)- [https://help.github.com/articles/about-commit-email-addresses/](https://help.github.com/articles/about-commit-email-addresses/)- [https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/](https://help.github.com/articles/blocking-command-line-pushes-that-expose-your-personal-email-address/)

--------------------------------

Building and Testing AngularThis document describes how to set up your development environment to build and test Angular.It also explains the basic mechanics of using `git`, `node`, and `yarn`.---------See the [contribution guidelines](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)
if you'd like to contribute to Angular.Prerequisite SoftwareBefore you can build and test Angular, you must install and configure the
following on your development machine:- [Git](https://git-scm.com/) and/or the [GitHub app](https://desktop.github.com/) (for Mac and

Windows);
[GitHub's Guide to Installing Git](https://help.github.com/articles/set-up-git) is a good source
of information.Windows Users: Git Bash or an equivalent shell is required
Windows Powershell and cmd shells are not
supported [#46780](https://github.com/angular/angular/issues/46780) so some commands might fail- [Node.js](https://nodejs.org), (version specified in [.nvmrc](../.nvmrc)) which is used to run a
THIS IS END BLOCK MARKER.development web server,
run tests, and generate distributable files.`.nvmrc` is read by [nvm](https://github.com/nvm-sh/nvm) commands like `nvm install`
and `nvm use`.- [Yarn](https://yarnpkg.com) (version specified in the engines field

of [package.json](../package.json)) which is used to install dependencies.- On Windows: [MSYS2](https://www.msys2.org/) which is used by Bazel.Followthe [instructions](https://bazel.build/install/windows#installing-compilers-and-language-runtimes)Getting the Sources
Fork and clone the Angular repository:
- Login to your GitHub account or create one by following the instructions given[here](https://github.com/signup/free).- [Fork](https://help.github.com/forking) the [main Angularrepository](https://github.com/angular/angular).- Clone your fork of the Angular repository and define an `upstream` remote pointing back tothe Angular repository that you forked in the first place.```
# Clone your GitHub repository:
git clone git@github.com:<github username>/angular.git# Go to the Angular directory:
cd angular# Add the main Angular repository as an upstream remote to your repository:
git remote add upstream https://github.com/angular/angular.git```Installing NPM Modules
Next, install the JavaScript modules needed to build and test Angular:```
# Install Angular project dependencies (package.json)
yarn install```Building
To build Angular run:```
yarn build```- Results are put in the `dist/packages-dist` folder.Running Tests LocallyBazel is used as the primary tool for building and testing Angular.To see how to run and debug Angular tests locally please refer to the
Bazel [Testing Angular](./building-with-bazel.md#testing-angular) section.Note that you should execute all test suites before submitting a PR to
GitHub (`yarn test //packages/...`).However, affected tests will be executed on our CI infrastructure.So if you forgot to run some
affected tests which would fail, GitHub will indicate the error state and present you the failures.PRs can only be merged if the code is formatted properly and all tests are passing.raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted
Testing changes against a local library/project
Often for developers the best way to ensure the changes they have made work as expected is to run
use changes in another library or project.To do this developers can build Angular locally, and
using `yarn link` build a local project with the created artifacts.This can be done by running:```
yarn ng-dev misc build-and-link <path-to-local-project-root>```Building and serving a project
CacheWhen making changes to Angular packages and testing in a local library/project you need to
run `ng cache disable` to disable the Angular CLI disk cache.If you are making changes that are not
reflected in your locally served library/project, verify if you
have [CLI Cache](https://angular.io/guide/workspace-config#cache-options) disabled.Invoking the Angular CLI
The Angular CLI needs to be invoked using
Node.js [--preserve-symlinks](https://nodejs.org/api/cli.html#--preserve-symlinks) flag.Otherwise
the symbolic links will be resolved using their real path which causes node module resolution to
fail.```
node --preserve-symlinks --preserve-symlinks-main node_modules/@angular/cli/lib/init.js serve```Formatting your source code
Angular uses [prettier](https://prettier.io) to format the source code.If the source code is not properly formatted, the CI will fail and the PR cannot be merged.You can automatically format your code by running:
- `yarn ng-dev format changed [shaOrRef]`: format only files changed since the providedsha/ref.`shaOrRef` defaults to `main`.- `yarn ng-dev format all`: format all source code- `yarn ng-dev format files <files..>`: format only provided files
Linting/verifying your Source CodeYou can check that your code is properly formatted and adheres to coding style by running:```
$ yarn lint```Publishing Snapshot BuildsWhen a build of any branch on the upstream fork angular/angular is green on CI, it
automatically publishes build artifacts to repositories in the Angular org.For example,
the `@angular/core` package is published to [https://github.com/angular/core-builds](https://github.com/angular/core-builds).You may find that your un-merged change needs some validation from external participants.Rather than requiring them to pull your Pull Request and build Angular locally, they can depend on
snapshots of the Angular packages created based on the code in the Pull Request.Publishing to GitHub ReposYou can also manually publish `*-builds` snapshots just like our CI build does for upstream
builds.Before being able to publish the packages, you need to build them locally by running the
`yarn build` command.First time, you need to create the GitHub repositories:```
$ export TOKEN=[get one from https://github.com/settings/tokens]$ CREATE_REPOS=1 ./scripts/ci/publish-build-artifacts.sh [GitHub username]```For subsequent snapshots, just run:```
$ ./scripts/ci/publish-build-artifacts.sh [GitHub username]```The script will publish the build snapshot to a branch with the same name as your current branch,
and create it if it doesn't exist.Bazel Support
IDEs
VS Code
- Install [Bazel](https://marketplace.visualstudio.com/items?itemName=BazelBuild.vscode-bazel)extension for VS Code.WebStorm / IntelliJ
- Install the [Bazel](https://plugins.jetbrains.com/plugin/8609-bazel) plugin- You can find the settings under `Preferences->Other Settings->Bazel Settings`It will automatically recognize `*.bazel` and `*.bzl` files.Remote Build Execution and Remote Caching
Bazel builds in the Angular repository use a shared cache.When a build occurs, a hash of the inputs
is computed
and checked against available outputs in the shared cache.If an output is found, it is used as the
output for the
build action rather than performing the build locally.Remote Build Execution requires authentication as a google.com account.--config=remote flagThe `--config=remote` flag can be added to enable remote execution of builds.

--------------------------------

Working with fixup commitsThis document provides information and guidelines for working with fixup commits:

----[This blog post](https://thoughtbot.com/blog/autosquashing-git-commits) is also a good resource on
the subject.raw HTML omitted  raw HTML omittedWhat are fixup commitsAt their core, fixup commits are just regular commits with a special commit message:The first line of their commit message starts with "fixup! " (notice the space after "!") followed
by the first line of the commit message of an earlier commit (it doesn't have to be the immediately
preceding one).The purpose of a fixup commit is to modify an earlier commit.I.e. it allows adding more changes in a new commit, but "marking" them as belonging to an earlier
commit.`Git` provides tools to make it easy to squash fixup commits into the original commit at a later
time (see  for details).For example, let's assume you have added the following commits to your branch:```
feat: first commit
fix: second commit```If you want to add more changes to the first commit, you can create a new commit with the commit
message:
`fixup! feat: first commit`:```
feat: first commit
fix: second commit
fixup!feat: first commit```raw HTML omitted  raw HTML omittedWhy use fixup commits
So, when are fixup commits useful?During the life of a Pull Request, a reviewer might request changes.The Pull Request author can make the requested changes and submit them for another review.Normally, these changes should be part of one of the original commits of the Pull Request.However, amending an existing commit with the changes makes it difficult for the reviewer to know
exactly what has changed since the last time they reviewed the Pull Request.Here is where fixup commits come in handy.By addressing review feedback in fixup commits, you make it very straight forward for the reviewer
to see what are the new changes that need to be reviewed and verify that their earlier feedback has
been addressed.This can save a lot of effort, especially on larger Pull Requests (where having to re-review all
the changes is pretty wasteful).When the time comes to merge the Pull Request into the repository, the merge script knows how to
automatically squash fixup commits with the corresponding regular commits.raw HTML omitted  raw HTML omitted  Creating fixup commitsAs mentioned , the only thing that differentiates a fixup commit from a
regular commit is the commit message.You can create a fixup commit by specifying an appropriate commit message (
i.e. `fixup! <original-commit-message-subject>`).In addition, the `git` command-line tool provides an easy way to create a fixup commit
via [git commit --fixup](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---fixupltcommitgt):```
# Create a fixup commit to fix up the last commit on the branch:
git commit --fixup HEAD ...# Create a fixup commit to fix up commit with SHA <COMMIT_SHA>:
git commit --fixup <COMMIT_SHA> ...```raw HTML omitted  raw HTML omitted  Squashing fixup commitsAs mentioned above, the merge script will automatically squash fixup commits.However, sometimes you might want to manually squash a fixup commit.Rebasing to squash fixup commitsThe easiest way to re-order and squash any commit is
via [rebasing interactively](https://git-scm.com/docs/git-rebase#_interactive_mode).You move a
commit right after the one you want to squash it into in the rebase TODO list and change the
corresponding action from `pick` to `fixup`.`Git` can do all these automatically for you if you pass the `--autosquash` option to `git rebase`.See the [git docs](https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---autosquash)
for more details.Additional optionsYou may like to consider some optional configurations:
Configuring `git` to auto-squash by defaultBy default, `git` will not automatically squash fixup commits when interactively rebasing.If you prefer to not have to pass the `--autosquash` option every time, you can change the default
behavior by setting the `rebase.autoSquash` `git` config option to true.See
the [git docs](https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt-rebaseautoSquash)
for more details.If you have `rebase.autoSquash` set to true, you can pass the `--no-autosquash` option
to `git rebase` to override and disable this setting.

--------------------------------

Building and Testing AngularThis document describes how to set up your development environment to build and test Angular.It also explains the basic mechanics of using `git`, `node`, and `yarn`.---------See the [contribution guidelines](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)
if you'd like to contribute to Angular.Prerequisite SoftwareBefore you can build and test Angular, you must install and configure the
following on your development machine:- [Git](https://git-scm.com/) and/or the [GitHub app](https://desktop.github.com/) (for Mac and

Windows);
[GitHub's Guide to Installing Git](https://help.github.com/articles/set-up-git) is a good source
of information.Windows Users: Git Bash or an equivalent shell is required
Windows Powershell and cmd shells are not
supported [#46780](https://github.com/angular/angular/issues/46780) so some commands might fail- [Node.js](https://nodejs.org), (version specified in [.nvmrc](../.nvmrc)) which is used to run a
THIS IS END BLOCK MARKER.development web server,
run tests, and generate distributable files.`.nvmrc` is read by [nvm](https://github.com/nvm-sh/nvm) commands like `nvm install`
and `nvm use`.- [Yarn](https://yarnpkg.com) (version specified in the engines field

of [package.json](../package.json)) which is used to install dependencies.- On Windows: [MSYS2](https://www.msys2.org/) which is used by Bazel.Followthe [instructions](https://bazel.build/install/windows#installing-compilers-and-language-runtimes)Getting the Sources
Fork and clone the Angular repository:
- Login to your GitHub account or create one by following the instructions given[here](https://github.com/signup/free).- [Fork](https://help.github.com/forking) the [main Angularrepository](https://github.com/angular/angular).- Clone your fork of the Angular repository and define an `upstream` remote pointing back tothe Angular repository that you forked in the first place.```
# Clone your GitHub repository:
git clone git@github.com:<github username>/angular.git# Go to the Angular directory:
cd angular# Add the main Angular repository as an upstream remote to your repository:
git remote add upstream https://github.com/angular/angular.git```Installing NPM Modules
Next, install the JavaScript modules needed to build and test Angular:```
# Install Angular project dependencies (package.json)
yarn install```Building
To build Angular run:```
yarn build```- Results are put in the `dist/packages-dist` folder.Running Tests LocallyBazel is used as the primary tool for building and testing Angular.To see how to run and debug Angular tests locally please refer to the
Bazel [Testing Angular](./building-with-bazel.md#testing-angular) section.Note that you should execute all test suites before submitting a PR to
GitHub (`yarn test //packages/...`).However, affected tests will be executed on our CI infrastructure.So if you forgot to run some
affected tests which would fail, GitHub will indicate the error state and present you the failures.PRs can only be merged if the code is formatted properly and all tests are passing.raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted 
 raw HTML omitted  raw HTML omitted
Testing changes against a local library/project
Often for developers the best way to ensure the changes they have made work as expected is to run
use changes in another library or project.To do this developers can build Angular locally, and
using `yarn link` build a local project with the created artifacts.This can be done by running:```
yarn ng-dev misc build-and-link <path-to-local-project-root>```Building and serving a project
CacheWhen making changes to Angular packages and testing in a local library/project you need to
run `ng cache disable` to disable the Angular CLI disk cache.If you are making changes that are not
reflected in your locally served library/project, verify if you
have [CLI Cache](https://angular.io/guide/workspace-config#cache-options) disabled.Invoking the Angular CLI
The Angular CLI needs to be invoked using
Node.js [--preserve-symlinks](https://nodejs.org/api/cli.html#--preserve-symlinks) flag.Otherwise
the symbolic links will be resolved using their real path which causes node module resolution to
fail.```
node --preserve-symlinks --preserve-symlinks-main node_modules/@angular/cli/lib/init.js serve```Formatting your source code
Angular uses [prettier](https://prettier.io) to format the source code.If the source code is not properly formatted, the CI will fail and the PR cannot be merged.You can automatically format your code by running:
- `yarn ng-dev format changed [shaOrRef]`: format only files changed since the providedsha/ref.`shaOrRef` defaults to `main`.- `yarn ng-dev format all`: format all source code- `yarn ng-dev format files <files..>`: format only provided files
Linting/verifying your Source CodeYou can check that your code is properly formatted and adheres to coding style by running:```
$ yarn lint```Publishing Snapshot BuildsWhen a build of any branch on the upstream fork angular/angular is green on CI, it
automatically publishes build artifacts to repositories in the Angular org.For example,
the `@angular/core` package is published to [https://github.com/angular/core-builds](https://github.com/angular/core-builds).You may find that your un-merged change needs some validation from external participants.Rather than requiring them to pull your Pull Request and build Angular locally, they can depend on
snapshots of the Angular packages created based on the code in the Pull Request.Publishing to GitHub ReposYou can also manually publish `*-builds` snapshots just like our CI build does for upstream
builds.Before being able to publish the packages, you need to build them locally by running the
`yarn build` command.First time, you need to create the GitHub repositories:```
$ export TOKEN=[get one from https://github.com/settings/tokens]$ CREATE_REPOS=1 ./scripts/ci/publish-build-artifacts.sh [GitHub username]```For subsequent snapshots, just run:```
$ ./scripts/ci/publish-build-artifacts.sh [GitHub username]```The script will publish the build snapshot to a branch with the same name as your current branch,
and create it if it doesn't exist.Bazel Support
IDEs
VS Code
- Install [Bazel](https://marketplace.visualstudio.com/items?itemName=BazelBuild.vscode-bazel)extension for VS Code.WebStorm / IntelliJ
- Install the [Bazel](https://plugins.jetbrains.com/plugin/8609-bazel) plugin- You can find the settings under `Preferences->Other Settings->Bazel Settings`It will automatically recognize `*.bazel` and `*.bzl` files.Remote Build Execution and Remote Caching
Bazel builds in the Angular repository use a shared cache.When a build occurs, a hash of the inputs
is computed
and checked against available outputs in the shared cache.If an output is found, it is used as the
output for the
build action rather than performing the build locally.Remote Build Execution requires authentication as a google.com account.--config=remote flagThe `--config=remote` flag can be added to enable remote execution of builds.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

This is my documentation readme file.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Pull Request Checklist-The title is descriptive and provides context about the changes.- Tests have been added for new features or fixes, and they pass successfully.- Documentation has been updated where necessary to reflect the changes.Description
Please describe your changes and their purpose here.Include any context or background that will help reviewers understand your contribution.Related Issues
Link any relevant issues or feature requests here.For example:- Resolves #123- Related to #456

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the [Pull Request Template](./PULL_REQUEST_TEMPLATE.md) for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.Community Guidelines
Please adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a welcoming community.This ensures a respectful and collaborative environment for everyone.You can also go through [Readme](./README.md) to get the project overview and how to communicate.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview.- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.- Doc changes:You can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview or you can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview or you can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview or you can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.Also, don't forget to look at the [template](https://github.com/Prashant528/ideal_documented_repo/blob/main/templates/template_1/readme.md) for a feature request.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview or you can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.Also, don't forget to look at the [template](https://github.com/Prashant528/ideal_documented_repo/blob/main/templates/template_1/readme.md) for a feature request.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview or you can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.Also, don't forget to look at the [templates](https://github.com/huggingface/transformers/tree/main/templates) for a feature request.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.

--------------------------------

Usage
Using the `cookiecutter` utility requires to have all the `dev` dependencies installed.Let's first [fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the `transformers` repo on github.Once it's done you can clone your fork and install `transformers` in our environment:```
git clone https://github.com/YOUR-USERNAME/transformers
cd transformers
pip install -e ".[dev]"```Once the installation is done, you can generate the template by running the following command.Be careful, the template will be generated inside a new folder in your current working directory.```
cookiecutter path-to-the folder/adding_a_missing_tokenization_test/```You will then have to answer some questions about the tokenizer for which you want to add tests.The `modelname` should be cased according to the plain text casing, i.e., BERT, RoBERTa, DeBERTa.Once the command has finished, you should have a one new file inside the newly created folder named `test_tokenization_Xxx.py`.At this point the template is finished and you can move it to the sub-folder of the corresponding model in the test folder.

--------------------------------

Adding a new modelThis page has been updated in light of the removal of the `add_new_model` script in favor of the more complete`add_new_model_like` script.We recommend you checkout the documentation of [How to add a model](https://huggingface.co/docs/transformers/main/en/add_new_model)
in the Hugging Face Transformers documentation for complete and up-to-date instructions.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

raw HTML omitted 
Contribute to 🤗 Transformers
Everyone is welcome to contribute, and we value everybody's contribution.Code
contributions are not the only way to help the community.Answering questions, helping
others, and improving the documentation are also immensely valuable.It also helps us if you spread the word!Reference the library in blog posts
about the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply ⭐️ the repository to say thank you.However you choose to contribute, please be mindful and respect our
[code of conduct](https://github.com/huggingface/transformers/blob/main/CODE_OF_CONDUCT.md).This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/main/CONTRIBUTING.md).Ways to contributeThere are several ways you can contribute to 🤗 Transformers:- Fix outstanding issues with the existing code.- Submit issues related to bugs or desired new features.- Implement new models.- Contribute to the examples or to the documentation.If you don't know where to start, there is a special [Good First
Issue](https://github.com/huggingface/transformers/contribute) listing.It will give you a list of
open issues that are beginner-friendly and help you start contributing to open-source.The best way to do that is to open a Pull Request and link it to the issue that you'd like to work on.We try to give priority to opened PRs as we can easily track the progress of the fix, and if the contributor does not have time anymore, someone else can take the PR over.For something slightly more challenging, you can also take a look at the [Good Second Issue](https://github.com/huggingface/transformers/labels/Good%20Second%20Issue) list.In general though, if you feel like you know what you're doing, go for it and we'll help you get there!🚀All contributions are equally valuable to the community.🥰
Fixing outstanding issuesIf you notice an issue with the existing code and have a fix in mind, feel free to  and open a Pull Request!Submitting a bug-related issue or feature requestDo your best to follow these guidelines when submitting a bug-related issue or a feature
request.It will make it easier for us to come back to you quickly and with good
feedback.Did you find a bug?The 🤗 Transformers library is robust and reliable thanks to users who report the problems they encounter.Before you report an issue, we would really appreciate it if you could make sure the bug was not
already reported (use the search bar on GitHub under Issues).Your issue should also be related to bugs in the library itself, and not your code.If you're unsure whether the bug is in your code or the library, please ask in the [forum](https://discuss.huggingface.co/) or on our [discord](https://discord.com/invite/hugging-face-879548962464493619) first.This helps us respond quicker to fixing issues related to the library versus general questions.[!TIP]We have a [docs bot](https://huggingface.co/spaces/huggingchat/hf-docs-chat), and we highly encourage you to ask all your questions there.There is always a chance your bug can be fixed with a simple flag 👾🔫Once you've confirmed the bug hasn't already been reported, please include the following information in your issue so we can quickly resolve it:- Your OS type and version and Python, PyTorch andTensorFlow versions when applicable.-A short, self-contained, code snippet that allows us to reproduce the bug inless than 30s.-The full traceback if an exception is raised.- Attach any other additional information, like screenshots, you think may help.To get the OS and software versions automatically, run the following command:```
transformers-cli env```You can also run the same command from the root of the repository:```
python src/transformers/commands/transformers_cli.py env```Do you want a new feature?If there is a new feature you'd like to see in 🤗 Transformers, please open an issue and describe:
- What is the motivation behind this feature?Is it related to a problem or frustration with the library?Is it a feature related to something you need for a project?Is it something you worked on and think it could benefit the community?Whatever it is, we'd love to hear about it!- Describe your requested feature in as much detail as possible.The more you can tell us about it, the better we'll be able to help you.- Provide a code snippet that demonstrates the features usage.- If the feature is related to a paper, please include a link.If your issue is well written we're already 80% of the way there by the time you create it.We have added [templates](https://github.com/huggingface/transformers/tree/main/templates) to help you get started with your issue.Do you want to implement a new model?New models are constantly released and if you want to implement a new model, please provide the following information:
- A short description of the model and a link to the paper.- Link to the implementation if it is open-sourced.- Link to the model weights if they are available.If you are willing to contribute the model yourself, let us know so we can help you add it to 🤗 Transformers!We have a technical guide for [how to add a model to 🤗 Transformers](https://huggingface.co/docs/transformers/add_new_model).Do you want to add documentation?We're always looking for improvements to the documentation that make it more clear and accurate.Please let us know how the documentation can be improved such as typos and any content that is missing, unclear or inaccurate.We'll be happy to make the changes or help you make a contribution if you're interested!For more details about how to generate, build, and write the documentation, take a look at the documentation [README](https://github.com/huggingface/transformers/tree/main/docs).Create a Pull Request
Before writing any code, we strongly advise you to search through the existing PRs or
issues to make sure nobody is already working on the same thing.If you are
unsure, it is always a good idea to open an issue to get some feedback.You will need basic `git` proficiency to contribute to
🤗 Transformers.While `git` is not the easiest tool to use, it has the greatest
manual.Type `git --help` in a shell and enjoy!If you prefer books, [Pro
Git](https://git-scm.com/book/en/v2) is a very good reference.You'll need [Python 3.9](https://github.com/huggingface/transformers/blob/main/setup.py#L449) or above to contribute to 🤗 Transformers.Follow the steps below to start contributing:
- Fork the [repository](https://github.com/huggingface/transformers) byclicking on the [Fork](https://github.com/huggingface/transformers/fork) button on the repository's page.This creates a copy of the codeunder your GitHub user account.- Clone your fork to your local disk, and add the base repository as a remote:```git clone git@github.com:<your Github handle>/transformers.git
cd transformers
git remote add upstream https://github.com/huggingface/transformers.git```- Create a new branch to hold your development changes:```git checkout -b a-descriptive-name-for-my-changes```🚨 Do not work on the `main` branch!- Set up a development environment by running the following command in a virtual environment:```pip install -e ".[dev]"```If 🤗 Transformers was already installed in the virtual environment, remove
it with `pip uninstall transformers` before reinstalling it in editable
mode with the `-e` flag.Depending on your OS, and since the number of optional dependencies of Transformers is growing, you might get a
failure with this command.If that's the case make sure to install the Deep Learning framework you are working with
(PyTorch, TensorFlow and/or Flax) then do:```
pip install -e ".[quality]"```which should be enough for most use cases.- Develop the features in your branch.As you work on your code, you should make sure the test suitepasses.Run the tests impacted by your changes like this:```
pytest tests/<TEST_TO_RUN>.py```For more information about tests, check out the
[Testing](https://huggingface.co/docs/transformers/testing) guide.🤗 Transformers relies on `black` and `ruff` to format its source code
consistently.After you make changes, apply automatic style corrections and code verifications
that can't be automated in one go with:```
make fixup```This target is also optimized to only work with files modified by the PR you're working on.If you prefer to run the checks one after the other, the following command applies the
style corrections:```
make style```🤗 Transformers also uses `ruff` and a few custom scripts to check for coding mistakes.Quality
controls are run by the CI, but you can run the same checks with:```
make quality```Finally, we have a lot of scripts to make sure we don't forget to update
some files when adding a new model.You can run these scripts with:```
make repo-consistency```To learn more about those checks and how to fix any issues with them, check out the
[Checks on a Pull Request](https://huggingface.co/docs/transformers/pr_checks) guide.If you're modifying documents under the `docs/source` directory, make sure the documentation can still be built.This check will also run in the CI when you open a pull request.To run a local check
make sure you install the documentation builder:```
pip install ".[docs]"```Run the following command from the root of the repository:```
doc-builder build transformers docs/source/en --build_dir ~/tmp/test-build```This will build the documentation in the `~/tmp/test-build` folder where you can inspect the generated
Markdown files with your favorite editor.You can also preview the docs on GitHub when you open a pull request.Once you're happy with your changes, add the changed files with `git add` and
record your changes locally with `git commit`:```
git add modified_file.py
git commit```Please remember to write [good commit
messages](https://chris.beams.io/posts/git-commit/) to clearly communicate the changes you made!To keep your copy of the code up to date with the original
repository, rebase your branch on `upstream/branch` before you open a pull request or if requested by a maintainer:```
git fetch upstream
git rebase upstream/main```Push your changes to your branch:```
git push -u origin a-descriptive-name-for-my-changes```If you've already opened a pull request, you'll need to force push with the `--force` flag.Otherwise, if the pull request hasn't been opened yet, you can just push your changes normally.- Now you can go to your fork of the repository on GitHub and click on Pull Request to open a pull request.Make sure you tick off all the boxes on our  below.When you're ready, you can send your changes to the project maintainers for review.- It's ok if maintainers request changes, it happens to our core contributors
too!So everyone can see the changes in the pull request, work in your localbranch and push the changes to your fork.They will automatically appear in
the pull request.Pull request checklist
☐The pull request title should summarize your contribution.raw HTML omitted 

☐If your pull request addresses an issue, please mention the issue number in the pull
request description to make sure they are linked (and people viewing the issue know youare working on it).raw HTML omitted 
☐To indicate a work in progress please prefix the title with `[WIP]`.These areuseful to avoid duplicated work, and to differentiate it from PRs ready to be merged.raw HTML omitted☐Make sure existing tests pass.raw HTML omitted 

☐If adding a new feature, also add tests for it.raw HTML omitted
-If you are adding a new model, make sure you use
`ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)` to trigger the common tests.- If you are adding new `@slow` tests, make sure they pass using`RUN_SLOW=1 python -m pytest tests/models/my_new_model/test_my_new_model.py`.- If you are adding a new tokenizer, write tests and make sure`RUN_SLOW=1 python -m pytest tests/models/{your_model_name}/test_tokenization_{your_model_name}.py` passes.- CircleCI does not run the slow tests, but GitHub Actions does every night!raw HTML omitted☐All public methods must have informative docstrings (see
[modeling_bert.py](https://github.com/huggingface/transformers/blob/main/src/transformers/models/bert/modeling_bert.py)for an example).raw HTML omitted 
☐Due to the rapidly growing repository, don't add any images, videos and othernon-text files that'll significantly weigh down the repository.Instead, use a Hubrepository such as [hf-internal-testing](https://huggingface.co/hf-internal-testing)
to host these files and reference them by URL.We recommend placing documentation
related images in the following repository:
[huggingface/documentation-images](https://huggingface.co/datasets/huggingface/documentation-images).You can open a PR on this dataset repository and ask a Hugging Face member to merge it.For more information about the checks run on a pull request, take a look at our [Checks on a Pull Request](https://huggingface.co/docs/transformers/pr_checks) guide.TestsAn extensive test suite is included to test the library behavior and several examples.Library tests can be found in
the [tests](https://github.com/huggingface/transformers/tree/main/tests) folder and examples tests in the
[examples](https://github.com/huggingface/transformers/tree/main/examples) folder.We like `pytest` and `pytest-xdist` because it's faster.From the root of the
repository, specify a path to a subfolder or a test file to run the test:```
python -m pytest -n auto --dist=loadfile -s -v ./tests/models/my_new_model```Similarly, for the `examples` directory, specify a path to a subfolder or test file to run the test.For example, the following command tests the text classification subfolder in the PyTorch `examples` directory:```
pip install -r examples/xxx/requirements.txt# only needed the first time
python -m pytest -n auto --dist=loadfile -s -v ./examples/pytorch/text-classification```In fact, this is actually how our `make test` and `make test-examples` commands are implemented (not including the `pip install`)!You can also specify a smaller set of tests in order to test only the feature
you're working on.By default, slow tests are skipped but you can set the `RUN_SLOW` environment variable to
`yes` to run them.This will download many gigabytes of models so make sure you
have enough disk space, a good internet connection or a lot of patience!raw HTML omitted 
Remember to specify a path to a subfolder or a test file to run the test.Otherwise, you'll run all the tests in the `tests` or `examples` folder, which will take a very long time!raw HTML omitted```
RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./tests/models/my_new_model
RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./examples/pytorch/text-classification```Like the slow tests, there are other environment variables available which are not enabled by default during testing:
- `RUN_CUSTOM_TOKENIZERS`: Enables tests for custom tokenizers.More environment variables and additional information can be found in the [testing_utils.py](https://github.com/huggingface/transformers/blob/main/src/transformers/testing_utils.py).🤗 Transformers uses `pytest` as a test runner only.It doesn't use any
`pytest`-specific features in the test suite itself.This means `unittest` is fully supported.Here's how to run tests with
`unittest`:```
python -m unittest discover -s tests -t . -v
python -m unittest discover -s examples -t examples -v```Style guide
For documentation strings, 🤗 Transformers follows the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html).Check our [documentation writing guide](https://github.com/huggingface/transformers/tree/main/docs#writing-documentation---specification)
for more information.Develop on Windows
On Windows (unless you're working in [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/) or WSL), you need to configure git to transform Windows `CRLF` line endings to Linux `LF` line endings:```
git config core.autocrlf input```One way to run the `make` command on Windows is with MSYS2:
- [Download MSYS2](https://www.msys2.org/), and we assume it's installed in `C:\msys64`.- Open the command line `C:\msys64\msys2.exe` (it should be available from the Start menu).- Run in the shell: `pacman -Syu` and install `make` with `pacman -S make`.- Add `C:\msys64\usr\bin` to your PATH environment variable.You can now use `make` from any terminal (PowerShell, cmd.exe, etc.)!🎉Sync a forked repository with upstream main (the Hugging Face repository)When updating the main branch of a forked repository, please follow these steps to avoid pinging the upstream repository which adds reference notes to each upstream PR, and sends unnecessary notifications to the developers involved in these PRs.-When possible, avoid syncing with the upstream using a branch and PR on the forked repository.Instead, merge directly into the forked main.- If a PR is absolutely necessary, use the following steps after checking out your branch:```git checkout -b your-branch-for-syncing
git pull --squash --no-commit upstream main
git commit -m '<your message without GitHub references>'
git push --set-upstream origin your-branch-for-syncing```

--------------------------------

raw HTML omittedThis folder contains a template to add a tokenization test.Usage
Using the `cookiecutter` utility requires to have all the `dev` dependencies installed.Let's first [fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the `transformers` repo on github.Once it's done you can clone your fork and install `transformers` in our environment:```
git clone https://github.com/YOUR-USERNAME/transformers
cd transformers
pip install -e ".[dev]"```Once the installation is done, you can generate the template by running the following command.Be careful, the template will be generated inside a new folder in your current working directory.```
cookiecutter path-to-the folder/adding_a_missing_tokenization_test/```You will then have to answer some questions about the tokenizer for which you want to add tests.The `modelname` should be cased according to the plain text casing, i.e., BERT, RoBERTa, DeBERTa.Once the command has finished, you should have a one new file inside the newly created folder named `test_tokenization_Xxx.py`.At this point the template is finished and you can move it to the sub-folder of the corresponding model in the test folder.

--------------------------------

raw HTML omitted 
How to add a new example script in 🤗 TransformersThis folder provide a template for adding a new example script implementing a training or inference task with the
models in the 🤗 Transformers library.To use it, you will need to install cookiecutter:```
pip install cookiecutter```or refer to the installation page of the [cookiecutter documentation](https://cookiecutter.readthedocs.io/).You can then run the following command inside the `examples` folder of the transformers repo:```
cookiecutter ../templates/adding_a_new_example_script/```and answer the questions asked, which will generate a new folder where you will find a pre-filled template for your
example following the best practices we recommend for them.Adjust the way the data is preprocessed, the model is loaded or the Trainer is instantiated then when you're happy, add
a `README.md` in the folder (or complete the existing one if you added a script to an existing folder) telling a user
how to run your script.Make a PR to the 🤗 Transformers repo.Don't forget to tweet about your new example with a carbon screenshot of how to
run it and tag @huggingface!

--------------------------------

TEMPLATE
search & replace the following keywords, e.g.:`:%s/\[name of model\]/brand_new_bert/g`
-[lowercase name of model]  # e.g. brand_new_bert
-[camelcase name of model]  # e.g. BrandNewBert
-[name of mentor]  # e.g. [Peter](https://github.com/peter)
-[link to original repo]
-[start date]
-[end date]How to add [camelcase name of model] to 🤗 Transformers?Mentor: [name of mentor]
Begin: [start date]
Estimated End: [end date]Adding a new model is often difficult and requires an in-depth knowledge
of the 🤗 Transformers library and ideally also of the model's original
repository.At Hugging Face, we are trying to empower the community more
and more to add models independently.The following sections explain in detail how to add [camelcase name of model]
to Transformers.You will work closely with [name of mentor] to
integrate [camelcase name of model] into Transformers.By doing so, you will both gain a
theoretical and deep practical understanding of [camelcase name of model].But more importantly, you will have made a major
open-source contribution to Transformers.Along the way, you will:
- get insights into open-source best practices- understand the design principles of one of the most popular NLP
libraries- learn how to do efficiently test large NLP models- learn how to integrate Python utilities like `black`, `ruff`,
`make fix-copies` into a library to always ensure clean and readablecodeTo start, let's try to get a general overview of the Transformers
library.General overview of 🤗 Transformers
First, you should get a general overview of 🤗 Transformers.Transformers
is a very opinionated library, so there is a chance that
you don't agree with some of the library's philosophies or design
choices.From our experience, however, we found that the fundamental
design choices and philosophies of the library are crucial to
efficiently scale Transformers while keeping maintenance costs at a
reasonable level.A good first starting point to better understand the library is to read
the [documentation of our philosophy](https://huggingface.co/transformers/philosophy.html).As a result of our way of working, there are some choices that we try to apply to all models:
- Composition is generally favored over abstraction- Duplicating code is not always bad if it strongly improves the
readability or accessibility of a model- Model files are as self-contained as possible so that when you readthe code of a specific model, you ideally only have to look into therespective `modeling_....py` file.In our opinion, the library's code is not just a means to provide a
product, e.g., the ability to use BERT for inference, but also as the
very product that we want to improve.Hence, when adding a model, the
user is not only the person that will use your model, but also everybody
that will read, try to understand, and possibly tweak your code.With this in mind, let's go a bit deeper into the general library
design.Overview of modelsTo successfully add a model, it is important to understand the
interaction between your model and its config,
`PreTrainedModel`, and `PretrainedConfig`.For
exemplary purposes, we will call the PyTorch model to be added to 🤗 Transformers
`BrandNewBert`.Let's take a look:As you can see, we do make use of inheritance in 🤗 Transformers, but we
keep the level of abstraction to an absolute minimum.There are never
more than two levels of abstraction for any model in the library.`BrandNewBertModel` inherits from
`BrandNewBertPreTrainedModel` which in
turn inherits from `PreTrainedModel` and that's it.As a general rule, we want to make sure
that a new model only depends on `PreTrainedModel`.The
important functionalities that are automatically provided to every new
model are
`PreTrainedModel.from_pretrained` and `PreTrainedModel.save_pretrained`, which are
used for serialization and deserialization.All
of the other important functionalities, such as
`BrandNewBertModel.forward` should be
completely defined in the new `modeling_brand_new_bert.py` module.Next,
we want to make sure that a model with a specific head layer, such as
`BrandNewBertForMaskedLM` does not inherit
from `BrandNewBertModel`, but rather uses
`BrandNewBertModel` as a component that
can be called in its forward pass to keep the level of abstraction low.Every new model requires a configuration class, called
`BrandNewBertConfig`.This configuration
is always stored as an attribute in
`PreTrainedModel`, and
thus can be accessed via the `config` attribute for all classes
inheriting from `BrandNewBertPreTrainedModel````
# assuming that `brand_new_bert` belongs to the organization `brandy`
model = BrandNewBertModel.from_pretrained("brandy/brand_new_bert")
model.config  # model has access to its config```Similar to the model, the configuration inherits basic serialization and
deserialization functionalities from
`PretrainedConfig`.Note
that the configuration and the model are always serialized into two
different formats - the model to a `pytorch_model.bin` file
and the configuration to a `config.json` file.Calling
`PreTrainedModel.save_pretrained` will automatically call
`PretrainedConfig.save_pretrained`, so that both model and configuration are saved.Overview of tokenizersNot quite ready yet :-(This section will be added soon!Step-by-step recipe to add a model to 🤗 Transformers
Everyone has different preferences of how to port a model so it can be
very helpful for you to take a look at summaries of how other
contributors ported models to Hugging Face.Here is a list of community
blog posts on how to port a model:
- [Porting GPT2Model](https://medium.com/huggingface/from-tensorflow-to-pytorch-265f40ef2a28)by [Thomas](https://huggingface.co/thomwolf)- [Porting WMT19 MT Model](https://huggingface.co/blog/porting-fsmt)by [Stas](https://huggingface.co/stas)From experience, we can tell you that the most important things to keep
in mind when adding a model are:
- Don't reinvent the wheel!Most parts of the code you will add forthe new 🤗 Transformers model already exist somewhere in 🤗Transformers.Take some time to find similar, already existing
models and tokenizers you can copy from.[grep](https://www.gnu.org/software/grep/) and
[rg](https://github.com/BurntSushi/ripgrep) are your friends.Note
that it might very well happen that your model's tokenizer is based
on one model implementation, and your model's modeling code on
another one.E.g., FSMT's modeling code is based on BART, while
FSMT's tokenizer code is based on XLM.- It's more of an engineering challenge than a scientific challenge.You should spend more time on creating an efficient debuggingenvironment than trying to understand all theoretical aspects of the
model in the paper.- Ask for help when you're stuck!Models are the core component of 🤗Transformers so we, at Hugging Face, are more than happy to helpyou at every step to add your model.Don't hesitate to ask if you
notice you are not making progress.In the following, we try to give you a general recipe that we found most
useful when porting a model to 🤗 Transformers.The following list is a summary of everything that has to be done to add
a model and can be used by you as a To-Do List:
- (Optional) Understood theoretical aspects- Prepared transformers dev environment- Set up debugging environment of the original repository- Created script that successfully runs forward pass using
original repository and checkpoint- Successfully opened a PR and added the model skeleton to Transformers- Successfully converted original checkpoint to Transformers
checkpoint- Successfully ran forward pass in Transformers that givesidentical output to original checkpoint- Finished model tests in Transformers- Successfully added Tokenizer in Transformers- Run end-to-end integration tests- Finished docs- Uploaded model weights to the hub- Submitted the pull request for review- (Optional) Added a demo notebook
To begin with, we usually recommend to start by getting a goodtheoretical understanding of `[camelcase name of model]`.However, if you prefer to
understand the theoretical aspects of the model on-the-job, then it is
totally fine to directly dive into the `[camelcase name of model]`'s code-base.This
option might suit you better, if your engineering skills are better than
your theoretical skill, if you have trouble understanding
`[camelcase name of model]`'s paper, or if you just enjoy programming much more than
reading scientific papers.1. (Optional) Theoretical aspects of [camelcase name of model]You should take some time to read [camelcase name of model]'s paper, if suchdescriptive work exists.There might be large sections of the paper that
are difficult to understand.If this is the case, this is fine - don't
worry!The goal is not to get a deep theoretical understanding of the
paper, but to extract the necessary information required to effectively
re-implement the model in 🤗 Transformers.That being said, you don't
have to spend too much time on the theoretical aspects, but rather focus
on the practical ones, namely:
- What type of model is [camelcase name of model]?BERT-like encoder-onlymodel?GPT2-like decoder-only model?BART-like encoder-decodermodel?Look at the `model_summary` if
you're not familiar with the differences between those.- What are the applications of [camelcase name of model]?Textclassification?Text generation?Seq2Seq tasks, e.g.,summarization?- What is the novel feature of the model making it different fromBERT/GPT-2/BART?- Which of the already existing [🤗 Transformersmodels](https://huggingface.co/transformers/#contents) is mostsimilar to [camelcase name of model]?- What type of tokenizer is used?A sentencepiece tokenizer?Wordpiece tokenizer?Is it the same tokenizer as used for BERT or BART?After you feel like you have gotten a good overview of the architecture
of the model, you might want to write to [name of mentor] with any
questions you might have.This might include questions regarding the
model's architecture, its attention layer, etc.We will be more than
happy to help you.Additional resources
Before diving into the code, here are some additional resources that might be worth taking a look at:
- [link 1]- [link 2]- [link 3]- ...Make sure you've understood the fundamental aspects of [camelcase name of model]Alright, now you should be ready to take a closer look into the actual code of [camelcase name of model].You should have understood the following aspects of [camelcase name of model] by now:
- [characteristic 1 of [camelcase name of model]]- [characteristic 2 of [camelcase name of model]]- ...If any of the mentioned aspects above are not clear to you, now is a great time to talk to [name of mentor].2. Next prepare your environment- Fork the [repository](https://github.com/huggingface/transformers)
by clicking on the 'Fork' button on the repository's page.Thiscreates a copy of the code under your GitHub user account.- Clone your `transformers` fork to your local disk, and add the baserepository as a remote:```
git clone https://github.com/[your Github handle]/transformers.git
cd transformers
git remote add upstream https://github.com/huggingface/transformers.git```- Set up a development environment, for instance by running thefollowing command:```
python -m venv .env
source .env/bin/activate
pip install -e ".[dev]"```
and return to the parent directory```
cd ..```- We recommend adding the PyTorch version of [camelcase name of model] toTransformers.To install PyTorch, please follow the instructions [here](https://pytorch.org/get-started/locally/).Note: You don't need to have CUDA installed.Making the new model
work on CPU is sufficient.-To port [camelcase name of model], you will also need access to itsoriginal repository:```
git clone [link to original repo].git 
cd [lowercase name of model]
pip install -e .```Now you have set up a development environment to port [camelcase name of model]
to 🤗 Transformers.Run a pretrained checkpoint using the original repository
3.Set up debugging environmentAt first, you will work on the original [camelcase name of model] repository.Often, the original implementation is very "researchy".Meaning that
documentation might be lacking and the code can be difficult to
understand.But this should be exactly your motivation to reimplement
[camelcase name of model].At Hugging Face, one of our main goals is to make
people stand on the shoulders of giants which translates here very well
into taking a working model and rewriting it to make it as accessible,
user-friendly, and beautiful as possible.This is the number-one
motivation to re-implement models into 🤗 Transformers - trying to make
complex new NLP technology accessible to everybody.You should start thereby by diving into the [original repository]([link to original repo]).Successfully running the official pretrained model in the original
repository is often the most difficult step.From our experience, it
is very important to spend some time getting familiar with the original
code-base.You need to figure out the following:
- Where to find the pretrained weights?- How to load the pretrained weights into the corresponding model?- How to run the tokenizer independently from the model?- Trace one forward pass so that you know which classes and functions
are required for a simple forward pass.Usually, you only have toreimplement those functions.- Be able to locate the important components of the model:Where isthe model's class?Are there model sub-classes, e.g.,EncoderModel, DecoderModel?Where is the self-attention layer?Are
there multiple different attention layers, e.g., self-attention,
cross-attention...?- How can you debug the model in the original environment of the repo?Do you have to add `print` statements, can you work withan interactive debugger like [ipdb](https://pypi.org/project/ipdb/), or should you use
an efficient IDE to debug the model, like PyCharm?It is very important that before you start the porting process, that you
can efficiently debug code in the original repository!Also,
remember that you are working with an open-source library, so do not
hesitate to open an issue, or even a pull request in the original
repository.The maintainers of this repository are most likely very
happy about someone looking into their code!At this point, it is really up to you which debugging environment and
strategy you prefer to use to debug the original model.We strongly
advise against setting up a costly GPU environment, but simply work on a
CPU both when starting to dive into the original repository and also
when starting to write the 🤗 Transformers implementation of the model.Only at the very end, when the model has already been successfully
ported to 🤗 Transformers, one should verify that the model also works as
expected on GPU.In general, there are two possible debugging environments for running
the original model
- [Jupyter notebooks](https://jupyter.org/) / [google colab](https://colab.research.google.com/notebooks/intro.ipynb)- Local python scripts.Jupyter notebooks have the advantage that they allow for cell-by-cellexecution which can be helpful to better split logical components from
one another and to have faster debugging cycles as intermediate results
can be stored.Also, notebooks are often easier to share with other
contributors, which might be very helpful if you want to ask the Hugging
Face team for help.If you are familiar with Jupyter notebooks, we
strongly recommend you to work with them.The obvious disadvantage of Jupyter notebooks is that if you are not
used to working with them you will have to spend some time adjusting to
the new programming environment and that you might not be able to use
your known debugging tools anymore, like `ipdb`.4. Successfully run forward passFor each code-base, a good first step is always to load a smallpretrained checkpoint and to be able to reproduce a single forward pass
using a dummy integer vector of input IDs as an input.Such a script
could look like this (in pseudocode):```
model = [camelcase name of model]Model.load_pretrained_checkpoint("/path/to/checkpoint/")
input_ids = [0, 4, 5, 2, 3, 7, 9]  # vector of input ids
original_output = model.predict(input_ids)```Next, regarding the debugging strategy, there are generally a few from
which to choose from:
- Decompose the original model into many small testable components andrun a forward pass on each of those for verification- Decompose the original model only into the original tokenizer andthe original model, run a forward pass on those, and useintermediate print statements or breakpoints for verification
Again, it is up to you which strategy to choose.Often, one or the other
is advantageous depending on the original code base.If the original code-base allows you to decompose the model into smaller
sub-components, e.g., if the original code-base can easily be run in
eager mode, it is usually worth the effort to do so.There are some
important advantages to taking the more difficult road in the beginning:
- at a later stage when comparing the original model to the HuggingFace implementation, you can verify automatically for each componentindividually that the corresponding component of the 🤗 Transformers
implementation matches instead of relying on visual comparison via
print statements- it can give you some rope to decompose the big problem of porting amodel into smaller problems of just porting individual componentsand thus structure your work better- separating the model into logical meaningful components will helpyou to get a better overview of the model's design and thus tobetter understand the model- at a later stage those component-by-component tests help you toensure that no regression occurs as you continue changing your code[Lysandre's](https://gist.github.com/LysandreJik/db4c948f6b4483960de5cbac598ad4ed)
integration checks for ELECTRA gives a nice example of how this can be
done.However, if the original code-base is very complex or only allows
intermediate components to be run in a compiled mode, it might be too
time-consuming or even impossible to separate the model into smaller
testable sub-components.A good example is [T5's
MeshTensorFlow](https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow)
library which is very complex and does not offer a simple way to
decompose the model into its sub-components.For such libraries, one
often relies on verifying print statements.No matter which strategy you choose, the recommended procedure is often
the same in that you should start to debug the starting layers first and
the ending layers last.It is recommended that you retrieve the output, either by print
statements or sub-component functions, of the following layers in the
following order:
- Retrieve the input IDs passed to the model- Retrieve the word embeddings- Retrieve the input of the first Transformer layer- Retrieve the output of the first Transformer layer- Retrieve the output of the following n - 1 Transformer layers- Retrieve the output of the whole [camelcase name of model] Model
Input IDs should thereby consists of an array of integers, e.g.,`input_ids = [0, 4, 4, 3, 2, 4, 1, 7, 19]`The outputs of the following layers often consist of multi-dimensional
float arrays and can look like this:```
[[
 [-0.1465, -0.6501,  0.1993,  ...,  0.1451,  0.3430,  0.6024],
 [-0.4417, -0.5920,  0.3450,  ..., -0.3062,  0.6182,  0.7132],
 [-0.5009, -0.7122,  0.4548,  ..., -0.3662,  0.6091,  0.7648],
 ...,[-0.5613, -0.6332,  0.4324,  ..., -0.3792,  0.7372,  0.9288],
 [-0.5416, -0.6345,  0.4180,  ..., -0.3564,  0.6992,  0.9191],
 [-0.5334, -0.6403,  0.4271,  ..., -0.3339,  0.6533,  0.8694]]],```We expect that every model added to 🤗 Transformers passes a couple of
integration tests, meaning that the original model and the reimplemented
version in 🤗 Transformers have to give the exact same output up to a
precision of 0.001!Since it is normal that the exact same model written
in different libraries can give a slightly different output depending on
the library framework, we accept an error tolerance of 1e-3 (0.001).It
is not enough if the model gives nearly the same output, they have to be
the almost identical.Therefore, you will certainly compare the
intermediate outputs of the 🤗 Transformers version multiple times
against the intermediate outputs of the original implementation of
[camelcase name of model] in which case an efficient debugging environment
of the original repository is absolutely important.Here is some advice
to make your debugging environment as efficient as possible.- Find the best way of debugging intermediate results.Is the originalrepository written in PyTorch?Then you should probably take thetime to write a longer script that decomposes the original model
into smaller sub-components to retrieve intermediate values.Is the
original repository written in Tensorflow 1?Then you might have to
rely on TensorFlow print operations like
[tf.print](https://www.tensorflow.org/api_docs/python/tf/print) to
output intermediate values.Is the original repository written in
Jax?Then make sure that the model is not jitted when running
the forward pass, e.g., check-out [this
link](https://github.com/google/jax/issues/196).- Use the smallest pretrained checkpoint you can find.The smaller thecheckpoint, the faster your debug cycle becomes.It is not efficientif your pretrained model is so big that your forward pass takes more
than 10 seconds.In case only very large checkpoints are available,
it might make more sense to create a dummy model in the new
environment with randomly initialized weights and save those weights
for comparison with the 🤗 Transformers version of your model- Make sure you are using the easiest way of calling a forward pass inthe original repository.Ideally, you want to find the function inthe original repository that only calls a single forward pass,
i.e. that is often called `predict`, `evaluate`, `forward` or
`__call__`.You don't want to debug a function that calls `forward`
multiple times, e.g., to generate text, like
`autoregressive_sample`, `generate`.- Try to separate the tokenization from the model'sforward pass.If the original repository showsexamples where you have to input a string, then try to find out
where in the forward call the string input is changed to input ids
and start from this point.This might mean that you have to possibly
write a small script yourself or change the original code so that
you can directly input the ids instead of an input string.- Make sure that the model in your debugging setup is not intraining mode, which often causes the model to yield random outputsdue to multiple dropout layers in the model.Make sure that the
forward pass in your debugging environment is deterministic so
that the dropout layers are not used.Or use
`transformers.utils.set_seed` if the old and new
implementations are in the same framework.More details on how to create a debugging environment for [camelcase name of model]
[TODO FILL:Here the mentor should add very specific information on what the student should do]
[to set up an efficient environment for the special requirements of this model]Port [camelcase name of model] to 🤗 TransformersNext, you can finally start adding new code to 🤗 Transformers.Go into
the clone of your 🤗 Transformers' fork:```
cd transformers```In the special case that you are adding a model whose architecture
exactly matches the model architecture of an existing model you only
have to add a conversion script as described in .In this case, you can just re-use
the whole model architecture of the already existing model.Otherwise, let's start generating a new model with the amazing
Cookiecutter!Use the Cookiecutter to automatically generate the model's code
To begin with head over to the [🤗 Transformers
templates](https://github.com/huggingface/transformers/tree/main/templates/adding_a_new_model)
to make use of our `cookiecutter` implementation to automatically
generate all the relevant files for your model.Again, we recommend only
adding the PyTorch version of the model at first.Make sure you follow
the instructions of the `README.md` on the [🤗 Transformers
templates](https://github.com/huggingface/transformers/tree/main/templates/adding_a_new_model)
carefully.Open a Pull Request on the main huggingface/transformers repo
Before starting to adapt the automatically generated code, now is the
time to open a "Work in progress (WIP)" pull request, e.g., "[WIP]Add [camelcase name of model]", in 🤗 Transformers so that you and the Hugging
Face team can work side-by-side on integrating the model into 🤗
Transformers.You should do the following:
- Create a branch with a descriptive name from your main branch```git checkout -b add_[lowercase name of model]```- Commit the automatically generated code:```git add .
    git commit```- Fetch and rebase to current main```git fetch upstream
    git rebase upstream/main```- Push the changes to your account using:```git push -u origin a-descriptive-name-for-my-changes```- Once you are satisfied, go to the webpage of your fork on GitHub.Click on "Pull request".Make sure to add the GitHub handle of[name of mentor] as a reviewer, so that the Hugging
Face team gets notified for future changes.- Change the PR into a draft by clicking on "Convert to draft" on theright of the GitHub pull request web page.In the following, whenever you have done some progress, don't forget to
commit your work and push it to your account so that it shows in the
pull request.Additionally, you should make sure to update your work
with the current main from time to time by doing:```
git fetch upstream
git merge upstream/main```In general, all questions you might have regarding the model or your
implementation should be asked in your PR and discussed/solved in the
PR.This way, [name of mentor] will always be notified when you are
committing new code or if you have a question.It is often very helpful
to point [name of mentor] to your added code so that the Hugging
Face team can efficiently understand your problem or question.To do so, you can go to the "Files changed" tab where you see all of
your changes, go to a line regarding which you want to ask a question,
and click on the "+" symbol to add a comment.Whenever a question or
problem has been solved, you can click on the "Resolve" button of the
created comment.In the same way, [name of mentor] will open comments when reviewing
your code.We recommend asking most questions on GitHub on your PR.For
some very general questions that are not very useful for the public,
feel free to ping [name of mentor] by Slack or email.5. Adapt the generated models code for [camelcase name of model]At first, we will focus only on the model itself and not care about thetokenizer.All the relevant code should be found in the generated files
`src/transformers/models/[lowercase name of model]/modeling_[lowercase name of model].py` and
`src/transformers/models/[lowercase name of model]/configuration_[lowercase name of model].py`.Now you can finally start coding :).The generated code in
`src/transformers/models/[lowercase name of model]/modeling_[lowercase name of model].py` will
either have the same architecture as BERT if it's an encoder-only model
or BART if it's an encoder-decoder model.At this point, you should
remind yourself what you've learned in the beginning about the
theoretical aspects of the model: How is the model different from BERT
or BART?".Implement those changes which often means to change the
self-attention layer, the order of the normalization layer, etc...Again, it is often useful to look at the similar architecture of already
existing models in Transformers to get a better feeling of how your
model should be implemented.Note that at this point, you don't have to be very sure that your
code is fully correct or clean.Rather, it is advised to add a first
unclean, copy-pasted version of the original code to
`src/transformers/models/[lowercase name of model]/modeling_[lowercase name of model].py`
until you feel like all the necessary code is added.From our
experience, it is much more efficient to quickly add a first version of
the required code and improve/correct the code iteratively with the
conversion script as described in the next section.The only thing that
has to work at this point is that you can instantiate the 🤗 Transformers
implementation of [camelcase name of model], i.e. the following command
should work:```
from transformers import [camelcase name of model]Model, [camelcase name of model]Config
model = [camelcase name of model]Model([camelcase name of model]Config())```The above command will create a model according to the default
parameters as defined in `[camelcase name of model]Config()` with random weights,
thus making sure that the `init()` methods of all components works.[TODO FILL: Here the mentor should add very specific information on what exactly has to be changed for this model]
[...]
[...]6. Write a conversion scriptNext, you should write a conversion script that lets you convert thecheckpoint you used to debug [camelcase name of model] in the original
repository to a checkpoint compatible with your just created 🤗
Transformers implementation of [camelcase name of model].It is not advised to
write the conversion script from scratch, but rather to look through
already existing conversion scripts in 🤗 Transformers for one that has
been used to convert a similar model that was written in the same
framework as [camelcase name of model].Usually, it is enough to copy an
already existing conversion script and slightly adapt it for your use
case.Don't hesitate to ask [name of mentor] to point you to a
similar already existing conversion script for your model.-If you are porting a model from TensorFlow to PyTorch, a goodstarting point might be BERT's conversion script[here](https://github.com/huggingface/transformers/blob/7acfa95afb8194f8f9c1f4d2c6028224dbed35a2/src/transformers/models/bert/modeling_bert.py#L91)- If you are porting a model from PyTorch to PyTorch, a good startingpoint might be BART's conversion script[here](https://github.com/huggingface/transformers/blob/main/src/transformers/models/bart/convert_bart_original_pytorch_checkpoint_to_pytorch.py)In the following, we'll quickly explain how PyTorch models store layer
weights and define layer names.In PyTorch, the name of a layer is
defined by the name of the class attribute you give the layer.Let's
define a dummy model in PyTorch, called `SimpleModel` as follows:```
from torch import nnclass SimpleModel(nn.Module):
    def __init__(self):
            super().__init__()
            self.dense = nn.Linear(10, 10)
            self.intermediate = nn.Linear(10, 10)
            self.layer_norm = nn.LayerNorm(10)```Now we can create an instance of this model definition which will fill
all weights: `dense`, `intermediate`, `layer_norm` with random weights.We can print the model to see its architecture```
model = SimpleModel()print(model)```This will print out the following:```
SimpleModel(
  (dense): Linear(in_features=10, out_features=10, bias=True)
  (intermediate): Linear(in_features=10, out_features=10, bias=True)
  (layer_norm): LayerNorm((10,), eps=1e-05, elementwise_affine=True)
)```We can see that the layer names are defined by the name of the class
attribute in PyTorch.You can print out the weight values of a specific
layer:```
print(model.dense.weight.data)```to see that the weights were randomly initialized```
tensor([[-0.0818,  0.2207, -0.0749, -0.0030,  0.0045, -0.1569, -0.1598,  0.0212,
         -0.2077,  0.2157],

        [ 0.1044,  0.0201,  0.0990,  0.2482,  0.3116,  0.2509,  0.2866, -0.2190,
          0.2166, -0.0212],
        [-0.2000,  0.1107, -0.1999, -0.3119,  0.1559,  0.0993,  0.1776, -0.1950,
         -0.1023, -0.0447],
        [-0.0888, -0.1092,  0.2281,  0.0336,  0.1817, -0.0115,  0.2096,  0.1415,
         -0.1876, -0.2467],
        [ 0.2208, -0.2352, -0.1426, -0.2636, -0.2889, -0.2061, -0.2849, -0.0465,
          0.2577,  0.0402],
        [ 0.1502,  0.2465,  0.2566,  0.0693,  0.2352, -0.0530,  0.1859, -0.0604,
          0.2132,  0.1680],
        [ 0.1733, -0.2407, -0.1721,  0.1484,  0.0358, -0.0633, -0.0721, -0.0090,
          0.2707, -0.2509],
        [-0.1173,  0.1561,  0.2945,  0.0595, -0.1996,  0.2988, -0.0802,  0.0407,
          0.1829, -0.1568],
        [-0.1164, -0.2228, -0.0403,  0.0428,  0.1339,  0.0047,  0.1967,  0.2923,
          0.0333, -0.0536],
        [-0.1492, -0.1616,  0.1057,  0.1950, -0.2807, -0.2710, -0.1586,  0.0739,
          0.2220,  0.2358]]).```In the conversion script, you should fill those randomly initialized
weights with the exact weights of the corresponding layer in the
checkpoint.E.g.,```
# retrieve matching layer weights, e.g. by 
# recursive algorithm
layer_name = "dense"
pretrained_weight = array_of_dense_layermodel_pointer = getattr(model, "dense")model_pointer.weight.data = torch.from_numpy(pretrained_weight)```While doing so, you must verify that each randomly initialized weight of
your PyTorch model and its corresponding pretrained checkpoint weight
exactly match in both shape and name.To do so, it is necessary
to add assert statements for the shape and print out the names of the
checkpoints weights.E.g., you should add statements like:```
assert (
     model_pointer.weight.shape == pretrained_weight.shape
), f"Pointer shape of random weight {model_pointer.shape} and array shape of checkpoint weight {pretrained_weight.shape} mismatched"```Besides, you should also print out the names of both weights to make
sure they match, e.g.,```
logger.info(f"Initialize PyTorch weight {layer_name} from {pretrained_weight.name}")```If either the shape or the name doesn't match, you probably assigned
the wrong checkpoint weight to a randomly initialized layer of the 🤗
Transformers implementation.An incorrect shape is most likely due to an incorrect setting of the
config parameters in `[camelcase name of model]Config()` that do not exactly match
those that were used for the checkpoint you want to convert.However, it
could also be that PyTorch's implementation of a layer requires the
weight to be transposed beforehand.Finally, you should also check that all required weights are
initialized and print out all checkpoint weights that were not used for
initialization to make sure the model is correctly converted.It is
completely normal, that the conversion trials fail with either a wrong
shape statement or wrong name assignment.This is most likely because
either you used incorrect parameters in `[camelcase name of model]Config()`, have a
wrong architecture in the 🤗 Transformers implementation, you have a bug
in the `init()` functions of one of the components of the 🤗 Transformers
implementation or you need to transpose one of the checkpoint weights.This step should be iterated with the previous step until all weights of
the checkpoint are correctly loaded in the Transformers model.Having
correctly loaded the checkpoint into the 🤗 Transformers implementation,
you can then save the model under a folder of your choice
`/path/to/converted/checkpoint/folder` that should then contain both a
`pytorch_model.bin` file and a `config.json` file:```
model.save_pretrained("/path/to/converted/checkpoint/folder")```[TODO FILL: Here the mentor should add very specific information on what exactly has to be done for the conversion of this model]
[...]
[...]7. Implement the forward passHaving managed to correctly load the pretrained weights into the 🤗Transformers implementation, you should now make sure that the forward
pass is correctly implemented.In ,
you have already created a script that runs a forward pass of the model
using the original repository.Now you should write an analogous script
using the 🤗 Transformers implementation instead of the original one.It
should look as follows:
[TODO FILL: Here the model name might have to be adapted, e.g., maybe [camelcase name of model]ForConditionalGeneration instead of [camelcase name of model]Model]```
model = [camelcase name of model]Model.from_pretrained("/path/to/converted/checkpoint/folder")
input_ids = [0, 4, 4, 3, 2, 4, 1, 7, 19]
output = model(input_ids).last_hidden_states```It is very likely that the 🤗 Transformers implementation and the
original model implementation don't give the exact same output the very
first time or that the forward pass throws an error.Don't be
disappointed - it's expected!First, you should make sure that the
forward pass doesn't throw any errors.It often happens that the wrong
dimensions are used leading to a `"Dimensionality mismatch"`
error or that the wrong data type object is used, e.g., `torch.long`
instead of `torch.float32`.Don't hesitate to ask [name of mentor]
for help, if you don't manage to solve certain errors.The final part to make sure the 🤗 Transformers implementation works
correctly is to ensure that the outputs are equivalent to a precision of
`1e-3`.First, you should ensure that the output shapes are identical,
i.e. `outputs.shape` should yield the same value for the script of the
🤗 Transformers implementation and the original implementation.Next, you
should make sure that the output values are identical as well.This one
of the most difficult parts of adding a new model.Common mistakes why
the outputs are not identical are:
- Some layers were not added, i.e. an activation layerwas not added, or the residual connection was forgotten- The word embedding matrix was not tied- The wrong positional embeddings are used because the original
implementation uses on offset- Dropout is applied during the forward pass.To fix this make sure`model.training is False` and that no dropout layer isfalsely activated during the forward pass, i.e. pass
`self.training` to [PyTorch's functional
dropout](https://pytorch.org/docs/stable/nn.functional.html?highlight=dropout#torch.nn.functional.dropout)The best way to fix the problem is usually to look at the forward pass
of the original implementation and the 🤗 Transformers implementation
side-by-side and check if there are any differences.Ideally, you should
debug/print out intermediate outputs of both implementations of the
forward pass to find the exact position in the network where the 🤗
Transformers implementation shows a different output than the original
implementation.First, make sure that the hard-coded `input_ids` in both
scripts are identical.Next, verify that the outputs of the first
transformation of the `input_ids` (usually the word embeddings) are
identical.And then work your way up to the very last layer of the
network.At some point, you will notice a difference between the two
implementations, which should point you to the bug in the 🤗 Transformers
implementation.From our experience, a simple and efficient way is to
add many print statements in both the original implementation and 🤗
Transformers implementation, at the same positions in the network
respectively, and to successively remove print statements showing the
same values for intermediate presentions.When you're confident that both implementations yield the same output,
verifying the outputs with
`torch.allclose(original_output, output, atol=1e-3)`, you're done with
the most difficult part!Congratulations - the work left to be done
should be a cakewalk 😊.8. Adding all necessary model testsAt this point, you have successfully added a new model.However, it isvery much possible that the model does not yet fully comply with the
required design.To make sure, the implementation is fully compatible
with 🤗 Transformers, all common tests should pass.The Cookiecutter
should have automatically added a test file for your model, probably
under the same `tests/test_modeling_[lowercase name of model].py`.Run this test
file to verify that all common tests pass:```
pytest tests/test_modeling_[lowercase name of model].py```[TODO FILL: Here the mentor should add very specific information on what tests are likely to fail after having implemented the model
, e.g. given the model, it might be very likely that `test_attention_output` fails]
[...]
[...]Having fixed all common tests, it is now crucial to ensure that all the
nice work you have done is well tested, so that
- a)The community can easily understand your work by looking atspecific tests of [camelcase name of model]- b)  Future changes to your model will not break any importantfeature of the model.At first, integration tests should be added.Those integration tests
essentially do the same as the debugging scripts you used earlier to
implement the model to 🤗 Transformers.A template of those model tests
is already added by the Cookiecutter, called
`[camelcase name of model]ModelIntegrationTests` and only has to be filled out by
you.To ensure that those tests are passing, run```
RUN_SLOW=1 pytest -sv tests/test_modeling_[lowercase name of model].py::[camelcase name of model]ModelIntegrationTests```Note: In case you are using Windows, you should replace `RUN_SLOW=1` with `SET RUN_SLOW=1`
Second, all features that are special to [camelcase name of model] should be
tested additionally in a separate test under
`[camelcase name of model]ModelTester`/`[camelcase name of model]ModelTest`.This part is often
forgotten but is extremely useful in two ways:
-It helps to transfer the knowledge you have acquired during themodel addition to the community by showing how the special featuresof [camelcase name of model] should work.- Future contributors can quickly test changes to the model by runningthose special tests.[TODO FILL: Here the mentor should add very specific information on what special features of the model should be tested additionally]
[...]
[...]9. Implement the tokenizerNext, we should add the tokenizer of [camelcase name of model].Usually, thetokenizer is equivalent or very similar to an already existing tokenizer
of 🤗 Transformers.[TODO FILL: Here the mentor should add a comment whether a new tokenizer is required or if this is not the case which existing tokenizer closest resembles
[camelcase name of model]'s tokenizer and how the tokenizer should be implemented]
[...]
[...]It is very important to find/extract the original tokenizer file and to
manage to load this file into the 🤗 Transformers' implementation of the
tokenizer.For [camelcase name of model], the tokenizer files can be found here:
- [To be filled out by mentor]and having implemented the 🤗 Transformers' version of the tokenizer can be loaded as follows:[To be filled out by mentor]To ensure that the tokenizer works correctly, it is recommended to first
create a script in the original repository that inputs a string and
returns the `input_ids`.It could look similar to this (in pseudo-code):```
input_str = "This is a long example input string containing special characters .$?-, numbers 2872 234 12 and words."
model = [camelcase name of model]Model.load_pretrained_checkpoint("/path/to/checkpoint/")
input_ids = model.tokenize(input_str)```You might have to take a deeper look again into the original repository
to find the correct tokenizer function or you might even have to do
changes to your clone of the original repository to only output the
`input_ids`.Having written a functional tokenization script that uses
the original repository, an analogous script for 🤗 Transformers should
be created.It should look similar to this:```
from transformers import [camelcase name of model]Tokenizer
input_str = "This is a long example input string containing special characters .$?-, numbers 2872 234 12 and words."tokenizer = [camelcase name of model]Tokenizer.from_pretrained("/path/to/tokenizer/folder/")input_ids = tokenizer(input_str).input_ids```When both `input_ids` yield the same values, as a final step a tokenizer
test file should also be added.[TODO FILL: Here mentor should point the student to test files of similar tokenizers]Analogous to the modeling test files of [camelcase name of model], the
tokenization test files of [camelcase name of model] should contain a couple of
hard-coded integration tests.[TODO FILL: Here mentor should again point to an existing similar test of another model that the student can copy & adapt]10.Run End-to-end integration testsHaving added the tokenizer, you should also add a couple of end-to-endintegration tests using both the model and the tokenizer to
`tests/test_modeling_[lowercase name of model].py` in 🤗 Transformers.Such a test
should show on a meaningful text-to-text sample that the 🤗 Transformers
implementation works as expected.A meaningful text-to-text sample can
include e.g. a source-to-target-translation pair, an
article-to-summary pair, a question-to-answer pair, etc...If none of
the ported checkpoints has been fine-tuned on a downstream task it is
enough to simply rely on the model tests.In a final step to ensure that
the model is fully functional, it is advised that you also run all tests
on GPU.It can happen that you forgot to add some `.to(self.device)`
statements to internal tensors of the model, which in such a test would
show in an error.In case you have no access to a GPU, the Hugging Face
team can take care of running those tests for you.11. Add DocstringNow, all the necessary functionality for [camelcase name of model] is added -you're almost done!The only thing left to add is a nice docstring and
a doc page.The Cookiecutter should have added a template file called
`docs/source/model_doc/[lowercase name of model].rst` that you should fill out.Users of your model will usually first look at this page before using
your model.Hence, the documentation must be understandable and concise.It is very useful for the community to add some Tips to show how the
model should be used.Don't hesitate to ping [name of mentor]
regarding the docstrings.Next, make sure that the docstring added to
`src/transformers/models/[lowercase name of model]/modeling_[lowercase name of model].py` is
correct and included all necessary inputs and outputs.It is always to
good to remind oneself that documentation should be treated at least as
carefully as the code in 🤗 Transformers since the documentation is
usually the first contact point of the community with the model.Code refactor
Great, now you have added all the necessary code for [camelcase name of model].At this point, you should correct some potential incorrect code style by
running:```
make style```and verify that your coding style passes the quality check:```
make quality```There are a couple of other very strict design tests in 🤗 Transformers
that might still be failing, which shows up in the tests of your pull
request.This is often because of some missing information in the
docstring or some incorrect naming.[name of mentor] will surely
help you if you're stuck here.Lastly, it is always a good idea to refactor one's code after having
ensured that the code works correctly.With all tests passing, now it's
a good time to go over the added code again and do some refactoring.You have now finished the coding part, congratulation!🎉You are
Awesome!😎
12.Upload the models to the model hubIn this final part, you should convert and upload all checkpoints to themodel hub and add a model card for each uploaded model checkpoint.You
should work alongside [name of mentor] here to decide on a fitting
name for each checkpoint and to get the required access rights to be
able to upload the model under the author's organization of
[camelcase name of model].It is worth spending some time to create fitting model cards for each
checkpoint.The model cards should highlight the specific
characteristics of this particular checkpoint, e.g.,On which dataset
was the checkpoint pretrained/fine-tuned on?On what down-stream task
should the model be used?And also include some code on how to correctly
use the model.13. (Optional)Add notebookIt is very helpful to add a notebook that showcases in-detail how[camelcase name of model] can be used for inference and/or fine-tuned on a
downstream task.This is not mandatory to merge your PR, but very useful
for the community.14. Submit your finished PRYou're done programming now and can move to the last step, which isgetting your PR merged into main.Usually, [name of mentor]
should have helped you already at this point, but it is worth taking
some time to give your finished PR a nice description and eventually add
comments to your code, if you want to point out certain design choices
to your reviewer.Share your work!!Now, it's time to get some credit from the community for your work!Having completed a model addition is a major contribution to
Transformers and the whole NLP community.Your code and the ported
pre-trained models will certainly be used by hundreds and possibly even
thousands of developers and researchers.You should be proud of your
work and share your achievement with the community.You have made another model that is super easy to access for everyone
in the community!🤯

--------------------------------

raw HTML omitted 
Adding a new modelThis page has been updated in light of the removal of the `add_new_model` script in favor of the more complete`add_new_model_like` script.We recommend you checkout the documentation of [How to add a model](https://huggingface.co/docs/transformers/main/en/add_new_model)
in the Hugging Face Transformers documentation for complete and up-to-date instructions.

--------------------------------

raw HTML omitted 
Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```NOTEYou only need to generate the documentation to inspect it locally (if you're planning changes and want to
check how they look before committing for instance).You don't have to commit the built documentation.Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.Previewing the documentationTo preview the docs, first install the `watchdog` module with:```
pip install watchdog```Then run the following command:```
doc-builder preview {package_name}{path_to_docs}```For example:```
doc-builder preview transformers docs/source/en/```The docs will be viewable at [http://localhost:3000](http://localhost:3000).You can also preview the docs once you have opened a PR.You will see a bot add a comment to a link where the documentation with your changes lives.NOTEThe `preview` command only works with existing doc files.When you add a completely new file, you need to update `_toctree.yml` & restart `preview` command (`ctrl-c` to stop it & call `doc-builder preview ...` again).Adding a new element to the navigation bar
Accepted files are Markdown (.md).Create a file with its extension and put it in the source directory.You can then link it to the toc-tree by putting
the filename without the extension in the [_toctree.yml](https://github.com/huggingface/transformers/blob/main/docs/source/en/_toctree.yml) file.Renaming section headers and moving sectionsIt helps to keep the old links working when renaming the section header and/or moving sections from one document to another.This is because the old links are likely to be used in Issues, Forums, and Social media and it'd make for a much more superior user experience if users reading those months later could still easily navigate to the originally intended information.Therefore, we simply keep a little map of moved sections at the end of the document where the original section was.The key is to preserve the original anchor.So if you renamed a section from: "Section A" to "Section B", then you can add at the end of the file:```
Sections that were moved:[ <a href="#section-b">Section A</a><a id="section-a"></a> ]```and of course, if you moved it to another file, then:```
Sections that were moved:[ <a href="../new-file#section-b">Section A</a><a id="section-a"></a> ]```Use the relative style to link to the new file so that the versioned docs continue to work.For an example of a rich moved section set please see the very end of [the Trainer doc](https://github.com/huggingface/transformers/blob/main/docs/source/en/main_classes/trainer.md).Writing Documentation - SpecificationThe `huggingface/transformers` documentation follows the
[Google documentation](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) style for docstrings,
although we can write them directly in Markdown.Adding a new tutorial
Adding a new tutorial or section is done in two steps:
- Add a new file under `./source`.This file can either be ReStructuredText (.rst) or Markdown (.md).- Link that file in `./source/_toctree.yml` on the correct toc-tree.Make sure to put your new file under the proper section.It's unlikely to go in the first section (Get Started), so
depending on the intended targets (beginners, more advanced users, or researchers) it should go in sections two, three, or
four.TranslatingWhen translating, refer to the guide at [./TRANSLATING.md](https://github.com/huggingface/transformers/blob/main/docs/TRANSLATING.md).Adding a new modelWhen adding a new model:
- Create a file `xxx.md` or under `./source/model_doc` (don't hesitate to copy an existing file as template).- Link that file in `./source/_toctree.yml`.- Write a short overview of the model:
- Overview with paper & authors- Paper abstract- Tips and tricks and how to use it best- Add the classes that should be linked in the model.This generally includes the configuration, the tokenizer, and
every model of that class (the base model, alongside models with additional heads), both in PyTorch and TensorFlow.The order is generally:
- Configuration- Tokenizer- PyTorch base model- PyTorch head models- TensorFlow base model- TensorFlow head models- Flax base model- Flax head modelsThese classes should be added using our Markdown syntax.Usually as follows:```
## XXXConfig[[autodoc]]XXXConfig```This will include every public method of the configuration that is documented.If for some reason you wish for a method
not to be displayed in the documentation, you can do so by specifying which methods should be in the docs:```
## XXXTokenizer[[autodoc]]XXXTokenizer
    - build_inputs_with_special_tokens- get_special_tokens_mask
    - create_token_type_ids_from_sequences
    - save_vocabulary```If you just want to add a method that is not documented (for instance magic methods like `__call__` are not documented
by default) you can put the list of methods to add in a list that contains `all`:```
## XXXTokenizer[[autodoc]]XXXTokenizer
    - all- __call__```Writing source documentation
Values that should be put in `code` should either be surrounded by backticks: `like so`.Note that argument names
and objects like True, None, or any strings should usually be put in `code`.When mentioning a class, function, or method, it is recommended to use our syntax for internal links so that our tool
adds a link to its documentation with this syntax: [`XXXClass`] or [`function`].This requires the class or
function to be in the main package.If you want to create a link to some internal class or function, you need to
provide its path.For instance: [`utils.ModelOutput`].This will be converted into a link with
`utils.ModelOutput` in the description.To get rid of the path and only keep the name of the object you are
linking to in the description, add a ~: [`~utils.ModelOutput`] will generate a link with `ModelOutput` in the description.The same works for methods so you can either use [`XXXClass.method`] or [`~XXXClass.method`].Defining arguments in a method
Arguments should be defined with the `Args:` (or `Arguments:` or `Parameters:`) prefix, followed by a line return and
an indentation.The argument should be followed by its type, with its shape if it is a tensor, a colon, and its
description:```
    Args:
        n_layers (`int`):The number of layers of the model.```If the description is too long to fit in one line, another indentation is necessary before writing the description
after the argument.Here's an example showcasing everything so far:```
    Args:
        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):Indices of input sequence tokens in the vocabulary.Indices can be obtained using [`AlbertTokenizer`].See [`~PreTrainedTokenizer.encode`] and
            [`~PreTrainedTokenizer.__call__`] for details.[What are input IDs?](../glossary#input-ids)```For optional arguments or arguments with defaults we follow the following syntax: imagine we have a function with the
following signature:```
def my_function(x: str = None, a: float = 1):```then its documentation should look like this:```
    Args:
        x (`str`, *optional*):This argument controls ...
        a (`float`, *optional*, defaults to 1):This argument is used to ...```Note that we always omit the "defaults to `None`" when None is the default for any argument.Also note that even
if the first line describing your argument type and its default gets long, you can't break it on several lines.You can
however, write as many lines as you want in the indented description (see the example above with `input_ids`).Writing a multi-line code block
Multi-line code blocks can be useful for displaying examples.They are done between two lines of three backticks as usual in Markdown:```
```
# first line of code
# second line
# etc
``````We follow the [doctest](https://docs.python.org/3/library/doctest.html) syntax for the examples to automatically test
the results to stay consistent with the library.Writing a return blockThe return block should be introduced with the `Returns:` prefix, followed by a line return and an indentation.The first line should be the type of the return, followed by a line return.No need to indent further for the elements
building the return.Here's an example of a single value return:```
    Returns:
        `List[int]`:A list of integers in the range [0, 1] --- 1 for a special token, 0 for a sequence token.```Here's an example of a tuple return, comprising several objects:```
    Returns:
        `tuple(torch.FloatTensor)` comprising various elements depending on the configuration ([`BertConfig`]) and inputs:
        - ** loss** (*optional*, returned when `masked_lm_labels` is provided) `torch.FloatTensor` of shape `(1,)`--Total loss is the sum of the masked language modeling loss and the next sequence prediction (classification) loss.- **prediction_scores** (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`)--
          Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).```Adding an image
Due to the rapidly growing repository, it is important to make sure that no files that would significantly weigh down the repository are added.This includes images, videos, and other non-text files.We prefer to leverage a hf.co hosted `dataset` like
the ones hosted on [hf-internal-testing](https://huggingface.co/hf-internal-testing) in which to place these files and reference
them by URL.We recommend putting them in the following dataset: [huggingface/documentation-images](https://huggingface.co/datasets/huggingface/documentation-images).If an external contribution, feel free to add the images to your PR and ask a Hugging Face member to migrate your images
to this dataset.Styling the docstringWe have an automatic script running with the `make style` comment that will make sure that:
- the docstrings fully take advantage of the line width- all code examples are formatted using black, like the code of the Transformers libraryThis script may have some weird failures if you made a syntax mistake or if you uncover a bug.Therefore, it'srecommended to commit your changes before running `make style`, so you can revert the changes done by that script
easily.Testing documentation examples
Good documentation often comes with an example of how a specific function or class should be used.Each model class should contain at least one example showcasing
how to use this model class in inference.E.g. the class [Wav2Vec2ForCTC](https://huggingface.co/docs/transformers/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC)
includes an example of how to transcribe speech to text in the
[docstring of its forward function](https://huggingface.co/docs/transformers/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC.forward).Writing documentation examplesThe syntax for Example docstrings can look as follows:```
    Example:>>> from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC
    >>> from datasets import load_dataset
    >>>import torch>>> dataset = load_dataset("hf-internal-testing/librispeech_asr_demo", "clean", split="validation")
    >>> dataset = dataset.sort("id")
    >>> sampling_rate = dataset.features["audio"].sampling_rate>>> processor = Wav2Vec2Processor.from_pretrained("facebook/wav2vec2-base-960h")
    >>>model = Wav2Vec2ForCTC.from_pretrained("facebook/wav2vec2-base-960h")>>># audio file is decoded on the fly
    >>> inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
    >>> with torch.no_grad():
    ...     logits = model(**inputs).logits

    >>>predicted_ids = torch.argmax(logits, dim=-1)>>> # transcribe speech
    >>> transcription = processor.batch_decode(predicted_ids)
    >>> transcription[0]'MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL'```The docstring should give a minimal, clear example of how the respective model
is to be used in inference and also include the expected (ideally sensible)
output.Often, readers will try out the example before even going through the function
or class definitions.Therefore, it is of utmost importance that the example
works as expected.Docstring testingTo do so each example should be included in the doctests.We use pytests' [doctest integration](https://docs.pytest.org/doctest.html) to verify that all of our examples run correctly.For Transformers, the doctests are run on a daily basis via GitHub Actions as can be
seen [here](https://github.com/huggingface/transformers/actions/workflows/doctests.yml).For Python files
Run all the tests in the docstrings of a given file with the following command, here is how we test the modeling file of Wav2Vec2 for instance:```
pytest --doctest-modules src/transformers/models/wav2vec2/modeling_wav2vec2.py -sv --doctest-continue-on-failure```If you want to isolate a specific docstring, just add `::` after the file name then type the whole path of the function/class/method whose docstring you want to test.For instance, here is how to just test the forward method of `Wav2Vec2ForCTC`:```
pytest --doctest-modules src/transformers/models/wav2vec2/modeling_wav2vec2.py::transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForCTC.forward -sv --doctest-continue-on-failure```For Markdown filesYou can test locally a given file with this command (here testing the quicktour):```
pytest --doctest-modules docs/source/quicktour.md -sv --doctest-continue-on-failure --doctest-glob="*.md"```Writing doctestsHere are a few tips to help you debug the doctests and make them pass:
-The outputs of the code need to match the expected output exactly, so make sure you have the same outputs.In particular doctest will see a difference between single quotes and double quotes, or a missing parenthesis.The only exceptions to that rule are:- whitespace: one give whitespace (space, tabulation, new line) is equivalent to any number of whitespace, so you can add new lines where there are spaces to make your output more readable.- numerical values: you should never put more than 4 or 5 digits to expected results as different setups or library versions might get you slightly different results.`doctest` is configured to ignore any difference lower than the precision to which you wrote (so 1e-4 if you write 4 digits).- Don't leave a block of code that is very long to execute.If you can't make it fast, you can either not use the doctest syntax on it (so that it's ignored), or if you want to use the doctest syntax to show the results, you can add a comment `# doctest: +SKIP` at the end of the lines of code too long to execute- Each line of code that produces a result needs to have that result written below.You can ignore an output if you don't want to show it in your code example by adding a comment ` # doctest: +IGNORE_RESULT` at the end of the line of code producing it.

--------------------------------

Translating the Transformers documentation into your languageAs part of our mission to democratize machine learning, we aim to make the Transformers library available in many more languages!Follow the steps below to help translate the documentation into your language.Open an Issue- Navigate to the Issues page of this repository.- Check if anyone has already opened an issue for your language.- If not, create a new issue by selecting the "Translation template" from the "New issue" button.- Post a comment indicating which chapters you’d like to work on, and we’ll add your name to the list.Fork the Repository- First, fork the Transformers repo by clicking the Fork button in the top-right corner.- Clone your fork to your local machine for editing with the following command:```
git clone https://github.com/YOUR-USERNAME/transformers.git```Replace `YOUR-USERNAME` with your GitHub username.Copy-paste the English version with a new language codeThe documentation files are organized in the following directory:
- docs/source:This contains all documentation materials organized by language.To copy the English version to your new language directory:- Navigate to your fork of the repository:```cd ~/path/to/transformers/docs```Replace `~/path/to` with your actual path.- Run the following command:```cp -r source/en source/LANG-ID```Replace `LANG-ID` with the appropriate ISO 639-1 or ISO 639-2 language code (see [this table](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for reference).Start translating
Begin translating the text!- Start with the `_toctree.yml` file that corresponds to your documentation chapter.This file is essential for rendering the table of contents on the website.-If the `_toctree.yml` file doesn’t exist for your language, create one by copying the English version and removing unrelated sections.- Ensure it is placed in the `docs/source/LANG-ID/` directory.Here’s an example structure for the `_toctree.yml` file:```
- sections:- local: pipeline_tutorial # Keep this name for your .md file
    title: Pipelines for Inference # Translate this
    ...
  title: Tutorials # Translate this```- Once you’ve translated the `_toctree.yml`, move on to translating the associated MDX files.Collaborate and shareIf you'd like assistance with your translation, open an issue and tag `@stevhliu`.Feel free to share resources or glossaries to ensure consistent terminology.

--------------------------------

raw HTML omitted 
ExamplesWe host a wide range of example scripts for multiple learning frameworks.Simply choose your favorite: [TensorFlow](https://github.com/huggingface/transformers/tree/main/examples/tensorflow), [PyTorch](https://github.com/huggingface/transformers/tree/main/examples/pytorch) or [JAX/Flax](https://github.com/huggingface/transformers/tree/main/examples/flax).We also have some [research projects](https://github.com/huggingface/transformers/tree/main/examples/research_projects), as well as some [legacy examples](https://github.com/huggingface/transformers/tree/main/examples/legacy).Note that unlike the main examples these are not actively maintained, and may require specific older versions of dependencies in order to run.While we strive to present as many use cases as possible, the example scripts are just that - examples.It is expected that they won't work out-of-the-box on your specific problem and that you will be required to change a few lines of code to adapt them to your needs.To help you with that, most of the examples fully expose the preprocessing of the data, allowing you to tweak and edit them as required.Please discuss on the [forum](https://discuss.huggingface.co/) or in an [issue](https://github.com/huggingface/transformers/issues) a feature you would like to implement in an example before submitting a PR; we welcome bug fixes, but since we want to keep the examples as simple as possible it's unlikely that we will merge a pull request adding more functionality at the cost of readability.Important note
ImportantTo make sure you can successfully run the latest versions of the example scripts, you have to install the library from source and install some example-specific requirements.To do this, execute the following steps in a new virtual environment:```
git clone https://github.com/huggingface/transformers
cd transformers
pip install .```Then cd in the example folder of your choice and run```
pip install -r requirements.txt```To browse the examples corresponding to released versions of 🤗 Transformers, click on the line below and then on your desired version of the library:
 raw HTML omitted 
Alternatively, you can switch your cloned 🤗 Transformers to a specific version (for instance with v3.5.1) with```
git checkout tags/v3.5.1```and run the example command as usual afterward.Running the Examples on Remote Hardware with Auto-Setup
[run_on_remote.py](./run_on_remote.py) is a script that launches any example on remote self-hosted hardware,
with automatic hardware and environment setup.It uses [Runhouse](https://github.com/run-house/runhouse) to launch
on self-hosted hardware (e.g. in your own cloud account or on-premise cluster) but there are other options
for running remotely as well.You can easily customize the example used, command line arguments, dependencies,
and type of compute hardware, and then run the script to automatically launch the example.You can refer to
[hardware setup](https://www.run.house/docs/tutorials/quick-start-cloud)
for more information about hardware and dependency setup with Runhouse, or this
[Colab tutorial](https://colab.research.google.com/drive/1sh_aNQzJX5BKAdNeXthTNGxKz7sM9VPc) for a more in-depth
walkthrough.You can run the script with the following commands:```
# First install runhouse:
pip install runhouse# For an on-demand V100 with whichever cloud provider you have configured:
python run_on_remote.py \
    --example pytorch/text-generation/run_generation.py \
    --model_type=gpt2 \
    --model_name_or_path=openai-community/gpt2\
    --prompt "I am a language model and"# For byo (bring your own) cluster:
python run_on_remote.py --host <cluster_ip>--user <ssh_user> --key_path <ssh_key_path> \
  --example <example> <args># For on-demand instancespython run_on_remote.py --instance <instance> --provider <provider> \
  --example <example> <args>```You can also adapt the script to your own needs.

--------------------------------

raw HTML omitted 
Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```NOTEYou only need to generate the documentation to inspect it locally (if you're planning changes and want to
check how they look before committing for instance).You don't have to commit the built documentation.Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.Previewing the documentationTo preview the docs, first install the `watchdog` module with:```
pip install watchdog```Then run the following command:```
doc-builder preview {package_name}{path_to_docs}```For example:```
doc-builder preview transformers docs/source/en/```The docs will be viewable at [http://localhost:3000](http://localhost:3000).You can also preview the docs once you have opened a PR.You will see a bot add a comment to a link where the documentation with your changes lives.NOTEThe `preview` command only works with existing doc files.When you add a completely new file, you need to update `_toctree.yml` & restart `preview` command (`ctrl-c` to stop it & call `doc-builder preview ...` again).Adding a new element to the navigation bar
Accepted files are Markdown (.md).Create a file with its extension and put it in the source directory.You can then link it to the toc-tree by putting
the filename without the extension in the [_toctree.yml](https://github.com/huggingface/transformers/blob/main/docs/source/en/_toctree.yml) file.Renaming section headers and moving sectionsIt helps to keep the old links working when renaming the section header and/or moving sections from one document to another.This is because the old links are likely to be used in Issues, Forums, and Social media and it'd make for a much more superior user experience if users reading those months later could still easily navigate to the originally intended information.Therefore, we simply keep a little map of moved sections at the end of the document where the original section was.The key is to preserve the original anchor.So if you renamed a section from: "Section A" to "Section B", then you can add at the end of the file:```
Sections that were moved:[ <a href="#section-b">Section A</a><a id="section-a"></a> ]```and of course, if you moved it to another file, then:```
Sections that were moved:[ <a href="../new-file#section-b">Section A</a><a id="section-a"></a> ]```Use the relative style to link to the new file so that the versioned docs continue to work.For an example of a rich moved section set please see the very end of [the Trainer doc](https://github.com/huggingface/transformers/blob/main/docs/source/en/main_classes/trainer.md).Writing Documentation - SpecificationThe `huggingface/transformers` documentation follows the
[Google documentation](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) style for docstrings,
although we can write them directly in Markdown.Adding a new tutorial
Adding a new tutorial or section is done in two steps:
- Add a new file under `./source`.This file can either be ReStructuredText (.rst) or Markdown (.md).- Link that file in `./source/_toctree.yml` on the correct toc-tree.Make sure to put your new file under the proper section.It's unlikely to go in the first section (Get Started), so
depending on the intended targets (beginners, more advanced users, or researchers) it should go in sections two, three, or
four.TranslatingWhen translating, refer to the guide at [./TRANSLATING.md](https://github.com/huggingface/transformers/blob/main/docs/TRANSLATING.md).Adding a new modelWhen adding a new model:
- Create a file `xxx.md` or under `./source/model_doc` (don't hesitate to copy an existing file as template).- Link that file in `./source/_toctree.yml`.- Write a short overview of the model:
- Overview with paper & authors- Paper abstract- Tips and tricks and how to use it best- Add the classes that should be linked in the model.This generally includes the configuration, the tokenizer, and
every model of that class (the base model, alongside models with additional heads), both in PyTorch and TensorFlow.The order is generally:
- Configuration- Tokenizer- PyTorch base model- PyTorch head models- TensorFlow base model- TensorFlow head models- Flax base model- Flax head modelsThese classes should be added using our Markdown syntax.Usually as follows:```
## XXXConfig[[autodoc]]XXXConfig```This will include every public method of the configuration that is documented.If for some reason you wish for a method
not to be displayed in the documentation, you can do so by specifying which methods should be in the docs:```
## XXXTokenizer[[autodoc]]XXXTokenizer
    - build_inputs_with_special_tokens- get_special_tokens_mask
    - create_token_type_ids_from_sequences
    - save_vocabulary```If you just want to add a method that is not documented (for instance magic methods like `__call__` are not documented
by default) you can put the list of methods to add in a list that contains `all`:```
## XXXTokenizer[[autodoc]]XXXTokenizer
    - all- __call__```Writing source documentation
Values that should be put in `code` should either be surrounded by backticks: `like so`.Note that argument names
and objects like True, None, or any strings should usually be put in `code`.When mentioning a class, function, or method, it is recommended to use our syntax for internal links so that our tool
adds a link to its documentation with this syntax: [`XXXClass`] or [`function`].This requires the class or
function to be in the main package.If you want to create a link to some internal class or function, you need to
provide its path.For instance: [`utils.ModelOutput`].This will be converted into a link with
`utils.ModelOutput` in the description.To get rid of the path and only keep the name of the object you are
linking to in the description, add a ~: [`~utils.ModelOutput`] will generate a link with `ModelOutput` in the description.The same works for methods so you can either use [`XXXClass.method`] or [`~XXXClass.method`].Defining arguments in a method
Arguments should be defined with the `Args:` (or `Arguments:` or `Parameters:`) prefix, followed by a line return and
an indentation.The argument should be followed by its type, with its shape if it is a tensor, a colon, and its
description:```
    Args:
        n_layers (`int`):The number of layers of the model.```If the description is too long to fit in one line, another indentation is necessary before writing the description
after the argument.Here's an example showcasing everything so far:```
    Args:
        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):Indices of input sequence tokens in the vocabulary.Indices can be obtained using [`AlbertTokenizer`].See [`~PreTrainedTokenizer.encode`] and
            [`~PreTrainedTokenizer.__call__`] for details.[What are input IDs?](../glossary#input-ids)```For optional arguments or arguments with defaults we follow the following syntax: imagine we have a function with the
following signature:```
def my_function(x: str = None, a: float = 1):```then its documentation should look like this:```
    Args:
        x (`str`, *optional*):This argument controls ...
        a (`float`, *optional*, defaults to 1):This argument is used to ...```Note that we always omit the "defaults to `None`" when None is the default for any argument.Also note that even
if the first line describing your argument type and its default gets long, you can't break it on several lines.You can
however, write as many lines as you want in the indented description (see the example above with `input_ids`).Writing a multi-line code block
Multi-line code blocks can be useful for displaying examples.They are done between two lines of three backticks as usual in Markdown:```
```
# first line of code
# second line
# etc
``````We follow the [doctest](https://docs.python.org/3/library/doctest.html) syntax for the examples to automatically test
the results to stay consistent with the library.Writing a return blockThe return block should be introduced with the `Returns:` prefix, followed by a line return and an indentation.The first line should be the type of the return, followed by a line return.No need to indent further for the elements
building the return.Here's an example of a single value return:```
    Returns:
        `List[int]`:A list of integers in the range [0, 1] --- 1 for a special token, 0 for a sequence token.```Here's an example of a tuple return, comprising several objects:```
    Returns:
        `tuple(torch.FloatTensor)` comprising various elements depending on the configuration ([`BertConfig`]) and inputs:
        - ** loss** (*optional*, returned when `masked_lm_labels` is provided) `torch.FloatTensor` of shape `(1,)`--Total loss is the sum of the masked language modeling loss and the next sequence prediction (classification) loss.- **prediction_scores** (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`)--
          Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).```Adding an image
Due to the rapidly growing repository, it is important to make sure that no files that would significantly weigh down the repository are added.This includes images, videos, and other non-text files.We prefer to leverage a hf.co hosted `dataset` like
the ones hosted on [hf-internal-testing](https://huggingface.co/hf-internal-testing) in which to place these files and reference
them by URL.We recommend putting them in the following dataset: [huggingface/documentation-images](https://huggingface.co/datasets/huggingface/documentation-images).If an external contribution, feel free to add the images to your PR and ask a Hugging Face member to migrate your images
to this dataset.Styling the docstringWe have an automatic script running with the `make style` comment that will make sure that:
- the docstrings fully take advantage of the line width- all code examples are formatted using black, like the code of the Transformers libraryThis script may have some weird failures if you made a syntax mistake or if you uncover a bug.Therefore, it'srecommended to commit your changes before running `make style`, so you can revert the changes done by that script
easily.Testing documentation examples
Good documentation often comes with an example of how a specific function or class should be used.Each model class should contain at least one example showcasing
how to use this model class in inference.E.g. the class [Wav2Vec2ForCTC](https://huggingface.co/docs/transformers/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC)
includes an example of how to transcribe speech to text in the
[docstring of its forward function](https://huggingface.co/docs/transformers/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC.forward).Writing documentation examplesThe syntax for Example docstrings can look as follows:```
    Example:>>> from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC
    >>> from datasets import load_dataset
    >>>import torch>>> dataset = load_dataset("hf-internal-testing/librispeech_asr_demo", "clean", split="validation")
    >>> dataset = dataset.sort("id")
    >>> sampling_rate = dataset.features["audio"].sampling_rate>>> processor = Wav2Vec2Processor.from_pretrained("facebook/wav2vec2-base-960h")
    >>>model = Wav2Vec2ForCTC.from_pretrained("facebook/wav2vec2-base-960h")>>># audio file is decoded on the fly
    >>> inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
    >>> with torch.no_grad():
    ...     logits = model(**inputs).logits

    >>>predicted_ids = torch.argmax(logits, dim=-1)>>> # transcribe speech
    >>> transcription = processor.batch_decode(predicted_ids)
    >>> transcription[0]'MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL'```The docstring should give a minimal, clear example of how the respective model
is to be used in inference and also include the expected (ideally sensible)
output.Often, readers will try out the example before even going through the function
or class definitions.Therefore, it is of utmost importance that the example
works as expected.Docstring testingTo do so each example should be included in the doctests.We use pytests' [doctest integration](https://docs.pytest.org/doctest.html) to verify that all of our examples run correctly.For Transformers, the doctests are run on a daily basis via GitHub Actions as can be
seen [here](https://github.com/huggingface/transformers/actions/workflows/doctests.yml).For Python files
Run all the tests in the docstrings of a given file with the following command, here is how we test the modeling file of Wav2Vec2 for instance:```
pytest --doctest-modules src/transformers/models/wav2vec2/modeling_wav2vec2.py -sv --doctest-continue-on-failure```If you want to isolate a specific docstring, just add `::` after the file name then type the whole path of the function/class/method whose docstring you want to test.For instance, here is how to just test the forward method of `Wav2Vec2ForCTC`:```
pytest --doctest-modules src/transformers/models/wav2vec2/modeling_wav2vec2.py::transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForCTC.forward -sv --doctest-continue-on-failure```For Markdown filesYou can test locally a given file with this command (here testing the quicktour):```
pytest --doctest-modules docs/source/quicktour.md -sv --doctest-continue-on-failure --doctest-glob="*.md"```Writing doctestsHere are a few tips to help you debug the doctests and make them pass:
-The outputs of the code need to match the expected output exactly, so make sure you have the same outputs.In particular doctest will see a difference between single quotes and double quotes, or a missing parenthesis.The only exceptions to that rule are:- whitespace: one give whitespace (space, tabulation, new line) is equivalent to any number of whitespace, so you can add new lines where there are spaces to make your output more readable.- numerical values: you should never put more than 4 or 5 digits to expected results as different setups or library versions might get you slightly different results.`doctest` is configured to ignore any difference lower than the precision to which you wrote (so 1e-4 if you write 4 digits).- Don't leave a block of code that is very long to execute.If you can't make it fast, you can either not use the doctest syntax on it (so that it's ignored), or if you want to use the doctest syntax to show the results, you can add a comment `# doctest: +SKIP` at the end of the lines of code too long to execute- Each line of code that produces a result needs to have that result written below.You can ignore an output if you don't want to show it in your code example by adding a comment ` # doctest: +IGNORE_RESULT` at the end of the line of code producing it.

--------------------------------

Translating the Transformers documentation into your languageAs part of our mission to democratize machine learning, we aim to make the Transformers library available in many more languages!Follow the steps below to help translate the documentation into your language.Open an Issue- Navigate to the Issues page of this repository.- Check if anyone has already opened an issue for your language.- If not, create a new issue by selecting the "Translation template" from the "New issue" button.- Post a comment indicating which chapters you’d like to work on, and we’ll add your name to the list.Fork the Repository- First, fork the Transformers repo by clicking the Fork button in the top-right corner.- Clone your fork to your local machine for editing with the following command:```
git clone https://github.com/YOUR-USERNAME/transformers.git```Replace `YOUR-USERNAME` with your GitHub username.Copy-paste the English version with a new language codeThe documentation files are organized in the following directory:
- docs/source:This contains all documentation materials organized by language.To copy the English version to your new language directory:- Navigate to your fork of the repository:```cd ~/path/to/transformers/docs```Replace `~/path/to` with your actual path.- Run the following command:```cp -r source/en source/LANG-ID```Replace `LANG-ID` with the appropriate ISO 639-1 or ISO 639-2 language code (see [this table](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for reference).Start translating
Begin translating the text!- Start with the `_toctree.yml` file that corresponds to your documentation chapter.This file is essential for rendering the table of contents on the website.-If the `_toctree.yml` file doesn’t exist for your language, create one by copying the English version and removing unrelated sections.- Ensure it is placed in the `docs/source/LANG-ID/` directory.Here’s an example structure for the `_toctree.yml` file:```
- sections:- local: pipeline_tutorial # Keep this name for your .md file
    title: Pipelines for Inference # Translate this
    ...
  title: Tutorials # Translate this```- Once you’ve translated the `_toctree.yml`, move on to translating the associated MDX files.Collaborate and shareIf you'd like assistance with your translation, open an issue and tag `@stevhliu`.Feel free to share resources or glossaries to ensure consistent terminology.

--------------------------------

Contributing to Node.js
Contributions to Node.js include code, documentation, answering user questions,
running the project's infrastructure, and advocating for all types of Node.js
users.The Node.js project welcomes all contributions from anyone willing to work in
good faith with other contributors and the community.No contribution is too
small and all contributions are valued.The Node.js project has an open governance model.Individuals making significant and valuable contributions are made
Collaborators and given commit-access to the project.See the
[GOVERNANCE.md](./GOVERNANCE.md) document for more information about how this
works.Contents

----[Code of Conduct](./doc/contributing/code-of-conduct.md)The Node.js project has a
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md)
to which all contributors must adhere.See [details on our policy on Code of Conduct](./doc/contributing/code-of-conduct.md).[Issues](./doc/contributing/issues.md)- [Asking for General Help](./doc/contributing/issues.md#asking-for-general-help)- [Discussing non-technical topics](./doc/contributing/issues.md#discussing-non-technical-topics)- [Submitting a Bug Report](./doc/contributing/issues.md#submitting-a-bug-report)- [Triaging a Bug Report](./doc/contributing/issues.md#triaging-a-bug-report)[Pull Requests](./doc/contributing/pull-requests.md)Pull Requests are the way concrete changes are made to the code, documentation,
dependencies, and tools contained in the `nodejs/node` repository.- [Dependencies](./doc/contributing/pull-requests.md#dependencies)- [Setting up your local environment](./doc/contributing/pull-requests.md#setting-up-your-local-environment)- [The Process of Making Changes](./doc/contributing/pull-requests.md#the-process-of-making-changes)- [Reviewing Pull Requests](./doc/contributing/pull-requests.md#reviewing-pull-requests)- [Notes](./doc/contributing/pull-requests.md#notes)Developer's Certificate of Origin 1.1```By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I
     have the right to submit it under the open source license
     indicated in the file; or(b) The contribution is based upon previous work that, to the best
     of my knowledge, is covered under an appropriate open source
     license and I have the right under that license to submit that
     work with modifications, whether created in whole or in part
     by me, under the same open source license (unless I am
     permitted to submit under a different license), as indicated
     in the file; or(c) The contribution was provided directly to me by some other
     person who certified (a), (b) or (c) and I have not modified
     it.(d) I understand and agree that this project and the contribution
     are public and that a record of the contribution (including all
     personal information I submit with it, including my sign-off) is
     maintained indefinitely and may be redistributed consistent with
     this project or the open source license(s) involved.```

--------------------------------

How to Contribute
Thank you for considering contributing to Hypothetical Repo!Contributions help us grow and improve, and we appreciate your interest.Please go through [Readme](./README.md) to get the project overview or you can make doc changes here [Docs](https://github.com/Prashant528/ideal_documented_repo/tree/main/docs).- Report Bugs: Found a bug?Create an issue with details such as steps to reproduce, expected behavior, and any relevant screenshots or logs.- Submit Enhancements: Have a feature idea?Propose it in an issue.Be sure to explain the problem it solves and how it improves the project.Also, don't forget to look at the [templates](https://github.com/huggingface/transformers/tree/main/templates) for a feature request.- Pull Requests: Review the for submitting your changes.Ensure your code is well-documented and adheres to our style guidelines.Setup GuideTo set up the project locally:- Follow the [Installation Guide](./INSTALLATION_GUIDE.md) to install dependencies and set up your environment.- Make your changes and test locally to ensure they work as intended.- Submit your pull request with a detailed description of your changes.

--------------------------------

This is my documentation readme file.Generating the documentationTo generate the documentation, you first have to build it.Several packages are necessary to build the doc,
you can install them with the following command, at the root of the code repository:```
pip install -e ".[docs]"```Then you need to install our special tool that builds the documentation:```
pip install git+https://github.com/huggingface/doc-builder```Building the documentation
Once you have setup the `doc-builder` and additional packages, you can generate the documentation by
typing the following command:```
doc-builder build transformers docs/source/en/ --build_dir ~/tmp/test-build```You can adapt the `--build_dir` to set any temporary folder that you prefer.This command will create it and generate
the MDX files that will be rendered as the documentation on the main website.You can inspect them in your favorite
Markdown editor.

--------------------------------

Node.js Project Governance
 raw HTML omitted 

-- -- -- -----
 raw HTML omittedTriagers
Triagers assess newly-opened issues in the [nodejs/node](https://github.com/nodejs/node) and [nodejs/help](https://github.com/nodejs/help)
repositories.The GitHub team for Node.js triagers is @nodejs/issue-triage.Triagers are given the "Triage" GitHub role and have:- Ability to label issues and pull requests- Ability to comment, close, and reopen issues and pull requestsSee:- [List of triagers](./README.md#triagers)- [A guide for triagers](./doc/contributing/issues.md#triaging-a-bug-report)Collaborators
Node.js core collaborators maintain the [nodejs/node](https://github.com/nodejs/node)GitHub repository.The GitHub team for Node.js core collaborators is @nodejs/collaborators.Collaborators have:- Commit access to the [nodejs/node](https://github.com/nodejs/node) repository- Access to the Node.js continuous integration (CI) jobsBoth collaborators and non-collaborators may propose changes to the Node.js
source code.The mechanism to propose such a change is a GitHub pull request.Collaborators review and merge (land) pull requests.Two collaborators must approve a pull request before the pull request can land.(One collaborator approval is enough if the pull request has been open for more
than 7 days.)Approving a pull request indicates that the collaborator accepts
responsibility for the change.Approval must be from collaborators who are not
authors of the change.If a collaborator opposes a proposed change, then the change cannot land.The
exception is if the TSC votes to approve the change despite the opposition.Usually, involving the TSC is unnecessary.Often, discussions or further changes
result in collaborators removing their opposition.See:- [List of collaborators](./README.md#current-project-team-members)- [A guide for collaborators](./doc/contributing/collaborator-guide.md)Collaborator activities- Helping users and novice contributors- Contributing code and documentation changes that improve the project- Reviewing and commenting on issues and pull requests- Participation in working groups- Merging pull requestsThe TSC can remove inactive collaborators or provide them with emeritus
status.Emeriti may request that the TSC restore them to active status.A collaborator is automatically made emeritus (and removed from active
collaborator status) if it has been more than 12 months since the collaborator
has authored or approved a commit that has landed.Technical Steering Committee
A subset of the collaborators forms the Technical Steering Committee (TSC).The TSC has final authority over this project, including:- Technical direction- Project governance and process (including this policy)- Contribution policy- GitHub repository hosting- Conduct guidelines- Maintaining the list of collaboratorsThe current list of TSC members is in
[the project README](./README.md#current-project-team-members).The [TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md) governs the operations of the TSC.All changes to the
Charter need approval by the OpenJS Foundation Cross-Project Council (CPC).TSC meetings
The TSC meets in a video conference call.Each year, the TSC elects a chair to
run the meetings.The TSC streams its meetings for public viewing on YouTube.The TSC agenda includes issues that are at an impasse.The intention of the
agenda is not to review or approve all patches.Collaborators review and approve
patches on GitHub.Any community member can create a GitHub issue asking that the TSC review
something.If consensus-seeking fails for an issue, a collaborator may apply the`tsc-agenda` label.That will add it to the TSC meeting agenda.Before each TSC meeting, the meeting chair will share the agenda with members of
the TSC.TSC members can also add items to the agenda at the beginning of each
meeting.The meeting chair and the TSC cannot veto or remove items.The TSC may invite people to take part in a non-voting capacity.During the meeting, the TSC chair ensures that someone takes minutes.After the
meeting, the TSC chair ensures that someone opens a pull request with the
minutes.The TSC seeks to resolve as many issues as possible outside meetings using
[the TSC issue tracker](https://github.com/nodejs/TSC/issues).The process in
the issue tracker is:
- A TSC member opens an issue explaining the proposal/issue and @-mentions@nodejs/tsc.- The proposal passes if, after 72 hours, there are two or more TSC votingmember approvals and no TSC voting member opposition.- If there is an extended impasse, a TSC member may make a motion for a vote.Collaborator nominationsWho can nominate Collaborators?Existing Collaborators can nominate someone to become a Collaborator.Ideal Nominees
Nominees should have significant and valuable contributions across the Node.js
organization.Contributions can be:
- Opening pull requests.- Comments and reviews.- Opening new issues.- Participation in other projects, teams, and working groups of the Node.js
organization.Nominating a new CollaboratorTo nominate a new Collaborator, open an issue in the [nodejs/node](https://github.com/nodejs/node) repository.Provide a summary of the nominee's contributions.For example:
- Commits in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/commits?author=GITHUB_ID`- Pull requests and issues opened in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/issues?q=author:GITHUB_ID`- Comments on pull requests and issues in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/issues?q=commenter:GITHUB_ID`- Reviews on pull requests in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/pulls?q=reviewed-by:GITHUB_ID`- Help provided to end-users and novice contributors- Pull requests and issues opened throughout the Node.js organization
- Use the link  `https://github.com/search?q=author:GITHUB_ID+org:nodejs`- Comments on pull requests and issues throughout the Node.js organization
- Use the link `https://github.com/search?q=commenter:GITHUB_ID+org:nodejs`- Participation in other projects, teams, and working groups of the Node.js
organization- Other participation in the wider Node.js communityMention @nodejs/collaborators in the issue to notify other collaborators aboutthe nomination.The nomination passes if no collaborators oppose it after one week.In the case
of an objection, the TSC is responsible for working with the individuals
involved and finding a resolution.There are steps a nominator can take in advance to make a nomination as
frictionless as possible.To request feedback from other collaborators in
private, use the [collaborators discussion page](https://github.com/nodejs/collaborators/discussions/categories/collaborator-nominations)
(which only collaborators may view).A nominator may also work with the
nominee to improve their contribution profile.Collaborators might overlook someone with valuable contributions.In that case,
the contributor may open an issue or contact a collaborator to request a
nomination.OnboardingAfter the nomination passes, a TSC member onboards the new collaborator.See
[the onboarding guide](./onboarding.md) for details of the onboarding
process.Consensus seeking processThe TSC follows a [Consensus Seeking](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision-making model per the
[TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md).

--------------------------------

Project Overview
Welcome to Hypothetical Repo, a project designed to simplify your tasks and provide a seamless experience.This project aims to empower users with tools that are both easy to use and highly customizable.Explore the features and capabilities of our tool through the [User Guide](./USER_GUIDE.md).Features- Feature 1: A robust functionality that enhances productivity by automating repetitive tasks.- Feature 2: An intuitive interface designed for ease of use and accessibility.- Feature 3: Seamless integration with popular tools and platforms for a smoother workflow.Getting StartedTo get started, follow the [Installation Guide](./INSTALLATION_GUIDE.md) for step-by-step setup instructions.The guide will walk you through prerequisites, installation steps, and how to run the project.For contributing or reporting issues, please check out our [Code of Conduct](./CODE_OF_CONDUCT.md).We encourage all users to participate in making this project even better!

--------------------------------

Usage
Using the `cookiecutter` utility requires to have all the `dev` dependencies installed.Let's first [fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the `transformers` repo on github.Once it's done you can clone your fork and install `transformers` in our environment:```
git clone https://github.com/YOUR-USERNAME/transformers
cd transformers
pip install -e ".[dev]"```Once the installation is done, you can generate the template by running the following command.Be careful, the template will be generated inside a new folder in your current working directory.```
cookiecutter path-to-the folder/adding_a_missing_tokenization_test/```You will then have to answer some questions about the tokenizer for which you want to add tests.The `modelname` should be cased according to the plain text casing, i.e., BERT, RoBERTa, DeBERTa.Once the command has finished, you should have a one new file inside the newly created folder named `test_tokenization_Xxx.py`.At this point the template is finished and you can move it to the sub-folder of the corresponding model in the test folder.

--------------------------------

Adding a new modelThis page has been updated in light of the removal of the `add_new_model` script in favor of the more complete`add_new_model_like` script.We recommend you checkout the documentation of [How to add a model](https://huggingface.co/docs/transformers/main/en/add_new_model)
in the Hugging Face Transformers documentation for complete and up-to-date instructions.

--------------------------------

Prerequisites- Operating system: Windows/Linux/MacOS.- Tools: Git, Python 3.8+, Node.js (optional).- Additional libraries or dependencies specified in `requirements.txt`.Steps to Install- Clone the repository: `git clone https://github.com/example/hypothetical-repo.git`- Navigate to the project folder: `cd hypothetical-repo`- Install dependencies: `pip install -r requirements.txt`- Optionally, set up environment variables or configuration files for advanced usage.Next Steps
After installation, check the [User Guide](./USER_GUIDE.md) to start using the project.Learn about additional configurations, integrations, and usage examples to make the most of the tool.

--------------------------------

Issues

----Asking for general help
Because the level of activity in the `nodejs/node` repository is so high,
questions or requests for general help using Node.js should be directed at
the [Node.js help repository](https://github.com/nodejs/help/issues).Discussing non-technical topics
Discussion of non-technical topics (such as intellectual property and trademark)
should be directed to the [Technical Steering Committee (TSC) repository](https://github.com/nodejs/TSC/issues).Submitting a bug reportWhen opening a new issue in the `nodejs/node` issue tracker, users will be
presented with a choice of issue templates.If you believe that you have
uncovered a bug in Node.js, please fill out the `Bug Report` template to the
best of your ability.Do not worry if you cannot answer every detail; just fill
in what you can.The two most important pieces of information we need in order to properly
evaluate the report is a description of the behavior you are seeing and a simple
test case we can use to recreate the problem on our own.If we cannot recreate
the issue, it becomes impossible for us to fix.In order to rule out the possibility of bugs introduced by userland code, test
cases should be limited, as much as possible, to using only Node.js APIs.If the bug occurs only when you're using a specific userland module, there is
a very good chance that either (a) the module has a bug or (b) something in
Node.js changed that broke the module.See [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve).Triaging a bug report
Once an issue has been opened, it is common for there to be discussion
around it.Some contributors may have differing opinions about the issue,
including whether the behavior being seen is a bug or a feature.This discussion
is part of the process and should be kept focused, helpful, and professional.The objective of helping with triaging issues (in core and help repos) is to
help reduce the issue backlog and keep the issue tracker healthy, while enabling
newcomers another meaningful way to get engaged and contribute.Anyone with a reasonable understanding of Node.js programming and the
project's GitHub organization plus a few contributions to the project
(commenting on issues or PRs) can apply for and become a triager.Open a PR
on the README.md of this project with: i) a request to be added as a triager,
ii) the motivation for becoming a triager, and iii) agreement on reading,
understanding, and adhering to the project's [Code Of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).The triage role enables the ability to carry out the most common triage
activities, such as applying labels and closing/reopening/assigning issues.For more information on the roles and permissions, see ["Permission levels for
repositories owned by an organization"](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization).When triagging issues and PRs:- Show patience and empathy, especially to first-time contributors.- Show no patience towards spam or troll, close the issue without interacting with it andreport the user to the moderation repository.-If you're not able to reproduce an issue, leave a comment asking for more info andadd the `needs more info` label.- Ideally issues should be closed only when they have been fixed or answered (andmerged for pull requests).Closing an issue (or PR) earlier can be seen as
dismissive from the point of view of the reporter/author.Always try to communicate the reason for closing the issue/PR.

--------------------------------

Pull requests

-- --- -- ------ --- --------- -----Dependencies
Node.js has several bundled dependencies in the deps/ and the tools/
directories that are not part of the project proper.These are detailed in the [maintaining dependencies](./maintaining/maintaining-dependencies.md) document.Changes to files in those directories should be sent
to their respective projects.Do not send a patch to Node.js.We cannot accept such patches.In case of doubt, open an issue in the
[issue tracker](https://github.com/nodejs/node/issues/) or contact one of the
[project collaborators](https://github.com/nodejs/node/#current-project-team-members).Node.js has many channels on the
[OpenJS Foundation Slack](https://slack-invite.openjsf.org/).Interesting
channels are:
[#nodejs](https://openjs-foundation.slack.com/archives/CK9Q4MB53) for general
help, questions, and discussions.[#nodejs-core](https://openjs-foundation.slack.com/archives/C019Y2T6STH) for
development of Node.js core specifically.Node.js also has an unofficial IRC channel:
[#Node.js](https://web.libera.chat/#node.js).Setting up your local environmentTo get started, you will need to have `git` installed locally.Depending on
your operating system, there are also a number of other dependencies required.These are detailed in the [Building guide](../../BUILDING.md).Depending on your environment you might want to grab IDE specific settings from
[IDE configs](https://github.com/nodejs/node-code-ide-configs).Once you have `git` and are sure you have all of the necessary dependencies,
it's time to create a fork.Step 1: Fork
Fork the project [on GitHub](https://github.com/nodejs/node) and clone your fork
locally.```
git clone git@github.com:username/node.git
cd node
git remote add upstream https://github.com/nodejs/node.git
git fetch upstream```Configure `git` so that it knows who you are:```
git config user.name "J. Random User"
git config user.email "j.random.user@example.com"```You can use any name/email address you prefer here.We only use the
metadata generated by `git` using this configuration for properly attributing
your changes to you in the `AUTHORS` file and the changelog.If you would like for the GitHub UI to link the commit to your account
and award you the `Contributor` label after the changes have been merged,
make sure this local email is also added to your
[GitHub email list](https://github.com/settings/emails).Step 2: BranchAs a best practice to keep your development environment as organized as
possible, create local branches to work within.These should also be created
directly off of the upstream default branch.```
git checkout -b my-branch -t upstream/HEAD```The process of making changes
Step 3: Code
Pull requests in Node.js typically involve changes to
one or more of a few places in the repository.- C/C++ code contained in the `src` directory- JavaScript code contained in the `lib` directory- Documentation in `doc/api`- Tests within the `test` directoryIf you are modifying code, please be sure to run `make lint` (or`vcbuild.bat lint` on Windows) to ensure that the changes follow the Node.js
code style guide.Any documentation you write (including code comments and API documentation)
should follow the [Style Guide](../../doc/README.md).Code samples
included in the API docs will also be checked when running `make lint` (or
`vcbuild.bat lint` on Windows).If you are adding to or deprecating an API,
add or change the appropriate YAML documentation.Use `REPLACEME` for the
version number in the documentation YAML:```
### `request.method`
<!--YAML
added: REPLACEME
-->* {string}The request method.```For contributing C++ code, you may want to look at the
[C++ Style Guide](cpp-style-guide.md), as well as the
[README of src/](../../src/README.md) for an overview of Node.js
C++ internals.Step 4: CommitIt is a best practice to keep your changes as logically grouped
as possible within individual commits.There is no limit to the number of
commits any single pull request may have, and many contributors find it easier
to review changes that are split across multiple commits.```
git add my/changed/files
git commit```Multiple commits often get squashed when they are landed.See the
notes about .Commit message guidelines
A good commit message should describe what changed and why.-The first line should:- contain a short description of the change (preferably 50 characters or
less, and no more than 72 characters)- be entirely in lowercase with the exception of proper nouns, acronyms, andthe words that refer to code, like function/variable names- be prefixed with the name of the changedand start with an imperative verb.Check the output of `git log --oneline files/you/changed` to find out what subsystems your changes touch.Examples:
- `net: add localAddress and localPort to Socket`- `src: fix typos in async_wrap.h`- Keep the second line blank.- Wrap all other lines at 72 columns (except for long URLs).- If your patch fixes an open issue, you can add a reference to it at the end
of the log.Use the `Fixes:` prefix and the full issue URL.For otherreferences use `Refs:`.`Fixes:` and `Refs:` trailers get automatically added to your commit message
when the Pull Request lands as long as they are included in the
Pull Request's description.If the Pull Request lands in several commits,
by default the trailers found in the description are added to each commits.Examples:
- `Fixes: https://github.com/nodejs/node/issues/1337`- `Refs: https://eslint.org/docs/rules/space-in-parens.html`- `Refs: https://github.com/nodejs/node/pull/3615`- If your commit introduces a breaking change (`semver-major`), it should
contain an explanation about the reason of the breaking change, whichsituation would trigger the breaking change, and what is the exact change.Sample complete commit message:```
subsystem: explain the commit in one lineThe body of the commit message should be one or more paragraphs, explaining
things in more detail.Please word-wrap to keep columns to 72 characters or
less.Fixes: https://github.com/nodejs/node/issues/1337Refs: https://eslint.org/docs/rules/space-in-parens.html```If you are new to contributing to Node.js, please try to do your best at
conforming to these guidelines, but do not worry if you get something wrong.One of the existing contributors will help get things situated and the
contributor landing the pull request will ensure that everything follows
the project guidelines.Step 5: RebaseAs a best practice, once you have committed your changes, it is a good idea
to use `git rebase` (not `git merge`) to synchronize your work with the main
repository.```
git fetch upstream HEAD
git rebase FETCH_HEAD```This ensures that your working branch has the latest changes from `nodejs/node`.Step 6: Test
Bug fixes and features should always come with tests.A
[guide for writing tests in Node.js](writing-tests.md) has been
provided to make the process easier.Looking at other tests to see how they
should be structured can also help.The `test` directory within the `nodejs/node` repository is complex and it is
often not clear where a new test file should go.When in doubt, add new tests
to the `test/parallel/` directory and the right location will be sorted out
later.Before submitting your changes in a pull request, always run the full Node.js
test suite.To run the tests (including code linting) on Unix / macOS:```
./configure && make -j4 test```We can speed up the builds by using [Ninja](https://ninja-build.org/).For more
information, see
[Building Node.js with Ninja](building-node-with-ninja.md).And on Windows:```
vcbuild test```For some configurations, running all tests might take a long time (an hour or
more).To run a subset of the test suite, see the [running tests](../../BUILDING.md#running-tests) section of
the Building guide.Step 7: PushOnce you are sure your commits are ready to go, with passing tests and linting,
begin the process of opening a pull request by pushing your working branch to
your fork on GitHub.```
git push origin my-branch```Step 8: Opening the pull request
From within GitHub, opening a new pull request will present you with a
[pull request template](https://raw.githubusercontent.com/nodejs/node/HEAD/.github/PULL_REQUEST_TEMPLATE.md).Please try to do your best at filling out the
details, but feel free to skip parts if you're not sure what to put.Once opened, pull requests are usually reviewed within a few days.To get feedback on your proposed change even though it is not ready
to land, use the `Convert to draft` option in the GitHub UI.Do not use the `wip` label as it might not prevent the PR
from landing before you are ready.Step 9: Discuss and updateYou will probably get feedback or requests for changes to your pull request.This is a big part of the submission process so don't be discouraged!Some
contributors may sign off on the pull request right away, others may have
more detailed comments or feedback.This is a necessary part of the process
in order to evaluate whether the changes are correct and necessary.To make changes to an existing pull request, make the changes to your local
branch, add a new commit with those changes, and push those to your fork.GitHub will automatically update the pull request.```
git add my/changed/files
git commit
git push origin my-branch```If a git conflict arises, it is necessary to synchronize your branch with other
changes that have landed upstream by using `git rebase`:```
git fetch upstream HEAD
git rebase FETCH_HEAD
git push --force-with-lease origin my-branch```Important: The `git push --force-with-lease` command is one of the few ways
to delete history in `git`.It also complicates the review process, as it won't
allow reviewers to get a quick glance on what changed.Before you use it, make
sure you understand the risks.If in doubt, you can always ask for guidance in
the pull request.There are a number of more advanced mechanisms for managing commits using
`git rebase` that can be used, but are beyond the scope of this guide.Feel free to post a comment in the pull request to ping reviewers if you are
awaiting an answer on something.If you encounter words or acronyms that
seem unfamiliar, refer to this
[glossary](https://github.com/nodejs/node/blob/HEAD/glossary.md).Approval and request changes workflow
All pull requests require "sign off" in order to land.Whenever a contributor
reviews a pull request they may find specific details that they would like to
see changed or fixed.These may be as simple as fixing a typo, or may involve
substantive changes to the code you have written.While such requests are
intended to be helpful, they may come across as abrupt or unhelpful, especially
requests to change things that do not include concrete suggestions on how to
change them.Try not to be discouraged.If you feel that a particular review is unfair,
say so, or contact one of the other contributors in the project and seek their
input.Often such comments are the result of the reviewer having only taken a
short amount of time to review and are not ill-intended.Such issues can often
be resolved with a bit of patience.That said, reviewers should be expected to
be helpful in their feedback, and feedback that is simply vague, dismissive, and
unhelpful is likely safe to ignore.Step 10: LandingIn order to land, a pull request needs to be reviewed and  by
at least two Node.js Collaborators (one collaborator approval is enough if the
pull request has been open for more than 7 days) and pass a
.After that, as long as there are noobjections from other contributors, the pull request can be merged.If you findyour pull request waiting longer than you expect, see the
.When a collaborator lands your pull request, they will posta comment to the pull request page mentioning the commit(s) it
landed as.GitHub might show the pull request as `Closed` at this
point, but don't worry.If you look at the branch you raised your
pull request against, you should see a commit with your name on it.Congratulations and thanks for your contribution!Reviewing pull requests
All Node.js contributors who choose to review and provide feedback on Pull
Requests have a responsibility to both the project and the individual making the
contribution.Reviews and feedback must be helpful, insightful, and geared
towards improving the contribution as opposed to simply blocking it.Do not
expect to be able to block a pull request from advancing simply because you say
"No" without giving an explanation.Be open to having your mind changed.Be open
to working with the contributor to make the pull request better.Reviews that are dismissive or disrespectful of the contributor or any other
reviewers are strictly counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).When reviewing a pull request, the primary goals are for the codebase to improve
and for the person submitting the request to succeed.Even if a pull request
does not land, the submitters should come away from the experience feeling like
their effort was not wasted or unappreciated.Every pull request from a new
contributor is an opportunity to grow the community.Review a bit at a time
Do not overwhelm new contributors.It is tempting to micro-optimize and make everything about relative performance,
perfect grammar, or exact style matches.Do not succumb to that temptation.Focus first on the most significant aspects of the change:
- Does this change make sense for Node.js?- Does this change make Node.js better, even if only incrementally?- Are there clear bugs or larger scale issues that need attending to?- Is the commit message readable and correct?If it contains a breaking change
is it clear enough?When changes are necessary, request them, do not demand them, and do not
assume that the submitter already knows how to add a test or run a benchmark.Specific performance optimization techniques, coding styles, and conventions
change over time.The first impression you give to a new contributor never does.Nits (requests for small changes that are not essential) are fine, but try to
avoid stalling the pull request.Most nits can typically be fixed by the
Node.js collaborator landing the pull request but they can also be an
opportunity for the contributor to learn a bit more about the project.It is always good to clearly indicate nits when you comment: e.g.
`Nit: change foo() to bar().But this is not blocking.`If your comments were addressed but were not folded automatically after new
commits or if they proved to be mistaken, please, [hide them](https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment)
with the appropriate reason to keep the conversation flow concise and relevant.Be aware of the person behind the codeBe aware that how you communicate requests and reviews in your feedback can
have a significant impact on the success of the pull request.Yes, we may land
a particular change that makes Node.js better, but the individual might just
not want to have anything to do with Node.js ever again.The goal is not just
having good code.Respect the minimum wait time for commentsThere is a minimum waiting time which we try to respect for non-trivial
changes, so that people who may have important input in such a distributed
project are able to respond.For non-trivial changes, pull requests must be left open for at least 48 hours.Sometimes changes take far longer to review, or need more specialized review
from subject-matter experts.When in doubt, do not rush.Trivial changes, typically limited to small formatting changes or fixes to
documentation, may be landed within the minimum 48 hour window.Abandoned or stalled pull requestsIf a pull request appears to be abandoned or stalled, it is polite to first
check with the contributor to see if they intend to continue the work before
checking if they would mind if you took it over (especially if it just has
nits left).When doing so, it is courteous to give the original contributor
credit for the work they started (either by preserving their name and email
address) in the commit log, or by using an `Author:` meta-data tag in the
commit.Approving a change
Any Node.js core collaborator (any GitHub user with commit rights in the
`nodejs/node` repository) is authorized to approve any other contributor's
work.Collaborators are not permitted to approve their own pull requests.Collaborators indicate that they have reviewed and approve of the changes in
a pull request either by using GitHub's Approval Workflow, which is preferred,
or by leaving an `LGTM` ("Looks Good To Me") comment.When explicitly using the "Changes requested" component of the GitHub Approval
Workflow, show empathy.That is, do not be rude or abrupt with your feedback
and offer concrete suggestions for improvement, if possible.If you're not
sure how a particular change can be improved, say so.Most importantly, after leaving such requests, it is courteous to make yourself
available later to check whether your comments have been addressed.If you see that requested changes have been made, you can clear another
collaborator's `Changes requested` review.Change requests that are vague, dismissive, or unconstructive may also be
dismissed if requests for greater clarification go unanswered within a
reasonable period of time.Use `Changes requested` to block a pull request from landing.When doing so,
explain why you believe the pull request should not land along with an
explanation of what may be an acceptable alternative course, if any.Accept that there are different opinions about what belongs in Node.js
Opinions on this vary, even among the members of the Technical Steering
Committee.One general rule of thumb is that if Node.js itself needs it (due to historic
or functional reasons), then it belongs in Node.js.For instance, `url`
parsing is in Node.js because of HTTP protocol support.Also, functionality that either cannot be implemented outside of core in any
reasonable way, or only with significant pain.It is not uncommon for contributors to suggest new features they feel would
make Node.js better.These may or may not make sense to add, but as with all
changes, be courteous in how you communicate your stance on these.Comments
that make the contributor feel like they should have "known better" or
ridiculed for even trying run counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Performance is not everything
Node.js has always optimized for speed of execution.If a particular change
can be shown to make some part of Node.js faster, it's quite likely to be
accepted.Claims that a particular pull request will make things faster will
almost always be met by requests for performance [benchmark results](writing-and-running-benchmarks.md) that
demonstrate the improvement.That said, performance is not the only factor to consider.Node.js also
optimizes in favor of not breaking existing code in the ecosystem, and not
changing working functional code just for the sake of changing.If a particular pull request introduces a performance or functional
regression, rather than simply rejecting the pull request, take the time to
work with the contributor on improving the change.Offer feedback and
advice on what would make the pull request acceptable, and do not assume that
the contributor should already know how to do that.Be explicit in your
feedback.Continuous integration testing
All pull requests that contain changes to code must be run through
continuous integration (CI) testing at [https://ci.nodejs.org/](https://ci.nodejs.org/).Only Node.js core collaborators and triagers can start a CI testing run.The
specific details of how to do this are included in the new collaborator
[Onboarding guide](../../onboarding.md).Usually, a collaborator or triager will start a CI
test run for you as approvals for the pull request come in.If not, you can ask a collaborator or triager to start a CI run.Ideally, the code change will pass ("be green") on all platform configurations
supported by Node.js.This means that all tests pass and there are no linting
errors.In reality, however, it is not uncommon for the CI infrastructure itself
to fail on specific platforms or for so-called "flaky" tests to fail ("be red").It is vital to visually inspect the results of all failed ("red") tests to
determine whether the failure was caused by the changes in the pull request.Notes
Commit squashingIn most cases, do not squash commits that you add to your pull request during
the review process.When the commits in your pull request land, they may be
squashed into one commit per logical change.Metadata will be added to the
commit message (including links to the pull request, links to relevant issues,
and the names of the reviewers).The commit history of your pull request,
however, will stay intact on the pull request page.For the size of "one logical change",
[0b5191f](https://github.com/nodejs/node/commit/0b5191f15d0f311c804d542b67e2e922d98834f8)
can be a good example.It touches the implementation, the documentation,
and the tests, but is still one logical change.All tests should always pass
when each individual commit lands on one of the `nodejs/node` branches.Getting approvals for your pull request
A pull request is approved either by saying LGTM, which stands for
"Looks Good To Me", or by using GitHub's Approve button.GitHub's pull request review feature can be used during the process.For more information, check out
[the official documentation](https://help.github.com/articles/reviewing-changes-in-pull-requests/).After you push new changes to your branch, you need to get
approval for these new changes again, even if GitHub shows "Approved"
because the reviewers have hit the buttons before.Waiting until the pull request gets landed
A pull request needs to stay open for at least 48 hours from when it is
submitted, even after it gets approved and passes the CI.This is to make sure
that everyone has a chance to weigh in.If the changes are trivial,
collaborators may decide it doesn't need to wait.A pull request may well take
longer to be merged in.All these precautions are important because Node.js is
widely used, so don't be discouraged!Check out the collaborator guideIf you want to know more about the code review and the landing process, see the
[collaborator guide](collaborator-guide.md).Appendix: subsystems
- `lib/*.js` (`assert`, `buffer`, etc.)- `build`- `doc`- `lib / src`- `test`- `tools`
You can find the full list of supported subsystems in the[nodejs/core-validate-commit](https://github.com/nodejs/core-validate-commit/blob/main/lib/rules/subsystem.js) repository.More than one subsystem may be valid for any particular issue or pull request.

--------------------------------

Code of Conduct
The Node.js project has a [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md) that all contributors are
expected to follow.This code describes the minimum behavior expectations
for all contributors.As a contributor to Node.js, how you choose to act and interact towards your
fellow contributors, as well as to the community, will reflect back not only
on yourself but on the project as a whole.The Code of Conduct is designed and
intended, above all else, to help establish a culture within the project that
allows anyone and everyone who wants to contribute to feel safe doing so.Should any individual act in any way that is considered in violation of the
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md), corrective actions will be taken.It is possible, however,
for any individual to act in such a manner that is not in violation of the
strict letter of the Code of Conduct guidelines while still going completely
against the spirit of what that Code is intended to accomplish.Open, diverse, and inclusive communities live and die on the basis of trust.Contributors can disagree with one another so long as they trust that those
disagreements are in good faith and everyone is working towards a common goal.Bad actors
All contributors to Node.js tacitly agree to abide by both the letter and
spirit of the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Failure, or unwillingness, to do so will
result in contributions being respectfully declined.A bad actor is someone who repeatedly violates the spirit of the Code of
Conduct through failure to regulate how they
interact with others.In doing so, bad actors
alienate other contributors, discourage collaboration, and generally reflect
poorly on the project as a whole.Being a bad actor may be intentional or unintentional.Typically, unintentional
bad behavior can be easily corrected by being quick to apologize and correct
course even if you are not entirely convinced you need to.Giving other
contributors the benefit of the doubt and having a sincere willingness to admit
that you might be wrong is critical for any successful open collaboration.Don't be a bad actor.

--------------------------------

Contributing to Node.js
Contributions to Node.js include code, documentation, answering user questions,
running the project's infrastructure, and advocating for all types of Node.js
users.The Node.js project welcomes all contributions from anyone willing to work in
good faith with other contributors and the community.No contribution is too
small and all contributions are valued.The Node.js project has an open governance model.Individuals making significant and valuable contributions are made
Collaborators and given commit-access to the project.See the
[GOVERNANCE.md](./GOVERNANCE.md) document for more information about how this
works.Contents

----[Code of Conduct](./doc/contributing/code-of-conduct.md)The Node.js project has a
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md)
to which all contributors must adhere.See [details on our policy on Code of Conduct](./doc/contributing/code-of-conduct.md).[Issues](./doc/contributing/issues.md)- [Asking for General Help](./doc/contributing/issues.md#asking-for-general-help)- [Discussing non-technical topics](./doc/contributing/issues.md#discussing-non-technical-topics)- [Submitting a Bug Report](./doc/contributing/issues.md#submitting-a-bug-report)- [Triaging a Bug Report](./doc/contributing/issues.md#triaging-a-bug-report)[Pull Requests](./doc/contributing/pull-requests.md)Pull Requests are the way concrete changes are made to the code, documentation,
dependencies, and tools contained in the `nodejs/node` repository.- [Dependencies](./doc/contributing/pull-requests.md#dependencies)- [Setting up your local environment](./doc/contributing/pull-requests.md#setting-up-your-local-environment)- [The Process of Making Changes](./doc/contributing/pull-requests.md#the-process-of-making-changes)- [Reviewing Pull Requests](./doc/contributing/pull-requests.md#reviewing-pull-requests)- [Notes](./doc/contributing/pull-requests.md#notes)Developer's Certificate of Origin 1.1```By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I
     have the right to submit it under the open source license
     indicated in the file; or(b) The contribution is based upon previous work that, to the best
     of my knowledge, is covered under an appropriate open source
     license and I have the right under that license to submit that
     work with modifications, whether created in whole or in part
     by me, under the same open source license (unless I am
     permitted to submit under a different license), as indicated
     in the file; or(c) The contribution was provided directly to me by some other
     person who certified (a), (b) or (c) and I have not modified
     it.(d) I understand and agree that this project and the contribution
     are public and that a record of the contribution (including all
     personal information I submit with it, including my sign-off) is
     maintained indefinitely and may be redistributed consistent with
     this project or the open source license(s) involved.```

--------------------------------

Node.js Project Governance
 raw HTML omitted 

-- -- -- -----
 raw HTML omittedTriagers
Triagers assess newly-opened issues in the [nodejs/node](https://github.com/nodejs/node) and [nodejs/help](https://github.com/nodejs/help)
repositories.The GitHub team for Node.js triagers is @nodejs/issue-triage.Triagers are given the "Triage" GitHub role and have:- Ability to label issues and pull requests- Ability to comment, close, and reopen issues and pull requestsSee:- [List of triagers](./README.md#triagers)- [A guide for triagers](./doc/contributing/issues.md#triaging-a-bug-report)Collaborators
Node.js core collaborators maintain the [nodejs/node](https://github.com/nodejs/node)GitHub repository.The GitHub team for Node.js core collaborators is @nodejs/collaborators.Collaborators have:- Commit access to the [nodejs/node](https://github.com/nodejs/node) repository- Access to the Node.js continuous integration (CI) jobsBoth collaborators and non-collaborators may propose changes to the Node.js
source code.The mechanism to propose such a change is a GitHub pull request.Collaborators review and merge (land) pull requests.Two collaborators must approve a pull request before the pull request can land.(One collaborator approval is enough if the pull request has been open for more
than 7 days.)Approving a pull request indicates that the collaborator accepts
responsibility for the change.Approval must be from collaborators who are not
authors of the change.If a collaborator opposes a proposed change, then the change cannot land.The
exception is if the TSC votes to approve the change despite the opposition.Usually, involving the TSC is unnecessary.Often, discussions or further changes
result in collaborators removing their opposition.See:- [List of collaborators](./README.md#current-project-team-members)- [A guide for collaborators](./doc/contributing/collaborator-guide.md)Collaborator activities- Helping users and novice contributors- Contributing code and documentation changes that improve the project- Reviewing and commenting on issues and pull requests- Participation in working groups- Merging pull requestsThe TSC can remove inactive collaborators or provide them with emeritus
status.Emeriti may request that the TSC restore them to active status.A collaborator is automatically made emeritus (and removed from active
collaborator status) if it has been more than 12 months since the collaborator
has authored or approved a commit that has landed.Technical Steering Committee
A subset of the collaborators forms the Technical Steering Committee (TSC).The TSC has final authority over this project, including:- Technical direction- Project governance and process (including this policy)- Contribution policy- GitHub repository hosting- Conduct guidelines- Maintaining the list of collaboratorsThe current list of TSC members is in
[the project README](./README.md#current-project-team-members).The [TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md) governs the operations of the TSC.All changes to the
Charter need approval by the OpenJS Foundation Cross-Project Council (CPC).TSC meetings
The TSC meets in a video conference call.Each year, the TSC elects a chair to
run the meetings.The TSC streams its meetings for public viewing on YouTube.The TSC agenda includes issues that are at an impasse.The intention of the
agenda is not to review or approve all patches.Collaborators review and approve
patches on GitHub.Any community member can create a GitHub issue asking that the TSC review
something.If consensus-seeking fails for an issue, a collaborator may apply the`tsc-agenda` label.That will add it to the TSC meeting agenda.Before each TSC meeting, the meeting chair will share the agenda with members of
the TSC.TSC members can also add items to the agenda at the beginning of each
meeting.The meeting chair and the TSC cannot veto or remove items.The TSC may invite people to take part in a non-voting capacity.During the meeting, the TSC chair ensures that someone takes minutes.After the
meeting, the TSC chair ensures that someone opens a pull request with the
minutes.The TSC seeks to resolve as many issues as possible outside meetings using
[the TSC issue tracker](https://github.com/nodejs/TSC/issues).The process in
the issue tracker is:
- A TSC member opens an issue explaining the proposal/issue and @-mentions@nodejs/tsc.- The proposal passes if, after 72 hours, there are two or more TSC votingmember approvals and no TSC voting member opposition.- If there is an extended impasse, a TSC member may make a motion for a vote.Collaborator nominationsWho can nominate Collaborators?Existing Collaborators can nominate someone to become a Collaborator.Ideal Nominees
Nominees should have significant and valuable contributions across the Node.js
organization.Contributions can be:
- Opening pull requests.- Comments and reviews.- Opening new issues.- Participation in other projects, teams, and working groups of the Node.js
organization.Collaborators should be people volunteering to do unglamorous work because it's
the right thing to do, they find the work itself satisfying, and they care about
Node.js and its users.People should get collaborator status because they're
doing work and are likely to continue doing work where having the abilities that
come with collaborator status are helpful (abilities like starting CI jobs,
reviewing and approving PRs, etc.).That will usually--but, very importantly, not
always--be work involving committing to the `nodejs/node` repository.For an example
of an exception, someone working primarily on the website might benefit from being
able to start Jenkins CI jobs to test changes to documentation tooling.That,
along with signals indicating commitment to Node.js, personal integrity, etc.,
should be enough for a successful nomination.It is important to understand that potential collaborators may have vastly
different areas and levels of expertise, interest, and skill.The Node.js
project is large and complex, and it is not expected that every collaborator
will have the same level of expertise in every area of the project.The
complexity or "sophistication" of an individual’s contributions, or even their
relative engineering "skill" level, are not primary factors in determining
whether they should be a collaborator.The primary factors do include the quality
of their contributions (do the contributions make sense, do they add value, do
they follow documented guidelines, are they authentic and well-intentioned,
etc.), their commitment to the project, can their judgement be trusted, and do
they have the ability to work well with others.The Authenticity of Contributors
The Node.js project does not require that contributors use their legal names or
provide any personal information verifying their identity.It is not uncommon for malicious actors to attempt to gain commit access to
open-source projects in order to inject malicious code or for other nefarious
purposes.The Node.js project has a number of mechanisms in place to prevent
this, but it is important to be vigilant.If you have concerns about the
authenticity of a contributor, please raise them with the TSC.Anyone nominating
a new collaborator should take reasonable steps to verify that the contributions
of the nominee are authentic and made in good faith.This is not always easy,
but it is important.Nominating a new CollaboratorTo nominate a new Collaborator:
- Optional but strongly recommended: open a[discussion in the nodejs/collaborators](https://github.com/nodejs/collaborators/discussions/categories/collaborator-nominations) repository.Provide a summary ofthe nominee's contributions (see below for an example).- Optional but strongly recommended: After sufficient wait time (e.g. 72

hours), if the nomination proposal has received some support and no explicit
THIS IS END BLOCK MARKER.block, and any questions/concerns have been addressed, add a comment in the
private discussion stating you're planning on opening a public issue, e.g.
"I see a number of approvals and no block, I'll be opening a public
nomination issue if I don't hear any objections in the next 72 hours".- Optional but strongly recommended: Privately contact the nominee to makesure they're comfortable with the nomination.- Open an issue in the [nodejs/node](https://github.com/nodejs/node) repository.Provide a summary ofthe nominee's contributions (see below for an example).Mention@nodejs/collaborators in the issue to notify other collaborators about
the nomination.The Optional but strongly recommended steps are optional in the sense that
skipping them would not invalidate the nomination, but it could put the nominee
in a very awkward situation if a nomination they didn't ask for pops out of
nowhere only to be rejected.Do not skip those steps unless you're absolutely
certain the nominee is fine with the public scrutiny.Example of list of contributions:
- Commits in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/commits?author=GITHUB_ID`- Pull requests and issues opened in the [nodejs/node](https://github.com/nodejs/node) repository.-Use the link `https://github.com/nodejs/node/issues?q=author:GITHUB_ID`- Comments on pull requests and issues in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/issues?q=commenter:GITHUB_ID`- Reviews on pull requests in the [nodejs/node](https://github.com/nodejs/node) repository
-Use the link `https://github.com/nodejs/node/pulls?q=reviewed-by:GITHUB_ID`- Help provided to end-users and novice contributors- Pull requests and issues opened throughout the Node.js organization
- Use the link  `https://github.com/search?q=author:GITHUB_ID+org:nodejs`- Comments on pull requests and issues throughout the Node.js organization
- Use the link `https://github.com/search?q=commenter:GITHUB_ID+org:nodejs`- Participation in other projects, teams, and working groups of the Node.js
organization- Other participation in the wider Node.js communityThe nomination passes if no collaborators oppose it (as described in thefollowing section) after one week.In the case of an objection, the TSC is
responsible for working with the individuals involved and finding a resolution.The TSC may, following typical TSC consensus seeking processes, choose to
advance a nomination that has otherwise failed to reach a natural consensus or
clear path forward even if there are outstanding objections.The TSC may also
choose to prevent a nomination from advancing if the TSC determines that any
objections have not been adequately addressed.How to review a collaborator nomination
A collaborator nomination can be reviewed in the same way one would review a PR
adding a feature:
-If you see the nomination as something positive to the project, say so!- If you are neutral, or feel you don't know enough to have an informed opinion,
it's certainly OK to not interact with the nomination.- If you think the nomination was made too soon, or can be detrimental to theproject, share your concerns.See the section "How to oppose a collaborator

nomination" below.Our goal is to keep gate-keeping at a minimal, but it cannot be zero since being
a collaborator requires trust (collaborators can start CI jobs, use their veto,
push commits, etc.), so what's the minimal amount is subjective, and there will
be cases where collaborators disagree on whether a nomination should move
forward.Refrain from discussing or debating aspects of the nomination process
itself directly within a nomination private discussion or public issue.Such discussions can derail and frustrate the nomination causing unnecessary
friction.Move such discussions to a separate issue or discussion thread.How to oppose a collaborator nomination
An important rule of thumb is that the nomination process is intended to be
biased strongly towards implicit approval of the nomination.This means
discussion and review around the proposal should be more geared towards "I have
reasons to say no..." as opposed to "Give me reasons to say yes...".Given that there is no "Request for changes" feature in discussions and issues,
try to be explicit when your comment is expressing a blocking concern.Similarly, once the blocking concern has been addressed, explicitly say so.Explicit opposition would typically be signaled as some form of clear
and unambiguous comment like, "I don't believe this nomination should pass".Asking clarifying questions or expressing general concerns is not the same as
explicit opposition; however, a best effort should be made to answer such
questions or addressing those concerns before advancing the nomination.Opposition does not need to be public.Ideally, the comment showing opposition,
and any discussion thereof, should be done in the private discussion before
the public issue is opened.Opposition should be paired with clear suggestions
for positive, concrete, and unambiguous next steps that the nominee can take to
overcome the objection and allow it to move forward.While such suggestions are
technically optional, they are strongly encouraged to prevent the nomination
from stalling indefinitely or objections from being overridden by the TSC.Remember that all private discussions about a nomination will be visible to
the nominee once they are onboarded.Onboarding
After the nomination passes, a TSC member onboards the new collaborator.See
[the onboarding guide](./onboarding.md) for details of the onboarding
process.Consensus seeking processThe TSC follows a [Consensus Seeking](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision-making model per the
[TSC Charter](https://github.com/nodejs/TSC/blob/HEAD/TSC-Charter.md).

--------------------------------

Code of Conduct
The Node.js project has a [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md) that all contributors are
expected to follow.This code describes the minimum behavior expectations
for all contributors.As a contributor to Node.js, how you choose to act and interact towards your
fellow contributors, as well as to the community, will reflect back not only
on yourself but on the project as a whole.The Code of Conduct is designed and
intended, above all else, to help establish a culture within the project that
allows anyone and everyone who wants to contribute to feel safe doing so.Should any individual act in any way that is considered in violation of the
[Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md), corrective actions will be taken.It is possible, however,
for any individual to act in such a manner that is not in violation of the
strict letter of the Code of Conduct guidelines while still going completely
against the spirit of what that Code is intended to accomplish.Open, diverse, and inclusive communities live and die on the basis of trust.Contributors can disagree with one another so long as they trust that those
disagreements are in good faith and everyone is working towards a common goal.Bad actors
All contributors to Node.js tacitly agree to abide by both the letter and
spirit of the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Failure, or unwillingness, to do so will
result in contributions being respectfully declined.A bad actor is someone who repeatedly violates the spirit of the Code of
Conduct through failure to regulate how they
interact with others.In doing so, bad actors
alienate other contributors, discourage collaboration, and generally reflect
poorly on the project as a whole.Being a bad actor may be intentional or unintentional.Typically, unintentional
bad behavior can be easily corrected by being quick to apologize and correct
course even if you are not entirely convinced you need to.Giving other
contributors the benefit of the doubt and having a sincere willingness to admit
that you might be wrong is critical for any successful open collaboration.Don't be a bad actor.

--------------------------------

Issues

----Asking for general help
Because the level of activity in the `nodejs/node` repository is so high,
questions or requests for general help using Node.js should be directed at
the [Node.js help repository](https://github.com/nodejs/help/issues).Discussing non-technical topics
Discussion of non-technical topics (such as intellectual property and trademark)
should be directed to the [Technical Steering Committee (TSC) repository](https://github.com/nodejs/TSC/issues).Submitting a bug reportWhen opening a new issue in the `nodejs/node` issue tracker, users will be
presented with a choice of issue templates.If you believe that you have
uncovered a bug in Node.js, please fill out the `Bug Report` template to the
best of your ability.Do not worry if you cannot answer every detail; just fill
in what you can.The two most important pieces of information we need in order to properly
evaluate the report is a description of the behavior you are seeing and a simple
test case we can use to recreate the problem on our own.If we cannot recreate
the issue, it becomes impossible for us to fix.In order to rule out the possibility of bugs introduced by userland code, test
cases should be limited, as much as possible, to using only Node.js APIs.If the bug occurs only when you're using a specific userland module, there is
a very good chance that either (a) the module has a bug or (b) something in
Node.js changed that broke the module.See [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve).Triaging a bug report
Once an issue has been opened, it is common for there to be discussion
around it.Some contributors may have differing opinions about the issue,
including whether the behavior being seen is a bug or a feature.This discussion
is part of the process and should be kept focused, helpful, and professional.The objective of helping with triaging issues (in core and help repos) is to
help reduce the issue backlog and keep the issue tracker healthy, while enabling
newcomers another meaningful way to get engaged and contribute.Anyone with a reasonable understanding of Node.js programming and the
project's GitHub organization plus a few contributions to the project
(commenting on issues or PRs) can apply for and become a triager.Open a PR
on the README.md of this project with: i) a request to be added as a triager,
ii) the motivation for becoming a triager, and iii) agreement on reading,
understanding, and adhering to the project's [Code Of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).The triage role enables the ability to carry out the most common triage
activities, such as applying labels and closing/reopening/assigning issues.For more information on the roles and permissions, see ["Permission levels for
repositories owned by an organization"](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization).When triagging issues and PRs:- Show patience and empathy, especially to first-time contributors.- Show no patience towards spam or troll, close the issue without interacting with it andreport the user to the moderation repository.-If you're not able to reproduce an issue, leave a comment asking for more info andadd the `needs more info` label.- Ideally issues should be closed only when they have been fixed or answered (andmerged for pull requests).Closing an issue (or PR) earlier can be seen as
dismissive from the point of view of the reporter/author.Always try to communicate the reason for closing the issue/PR.

--------------------------------

Pull requests

-- --- -- ------ --- --------- -----Dependencies
Node.js has several bundled dependencies in the deps/ and the tools/
directories that are not part of the project proper.These are detailed in the [maintaining dependencies](./maintaining/maintaining-dependencies.md) document.Changes to files in those directories should be sent
to their respective projects.Do not send a patch to Node.js.We cannot accept such patches.In case of doubt, open an issue in the
[issue tracker](https://github.com/nodejs/node/issues/) or contact one of the
[project collaborators](https://github.com/nodejs/node/#current-project-team-members).Node.js has many channels on the
[OpenJS Foundation Slack](https://slack-invite.openjsf.org/).Interesting
channels are:
[#nodejs](https://openjs-foundation.slack.com/archives/CK9Q4MB53) for general
help, questions, and discussions.[#nodejs-core](https://openjs-foundation.slack.com/archives/C019Y2T6STH) for
development of Node.js core specifically.Node.js also has an unofficial IRC channel:
[#Node.js](https://web.libera.chat/#node.js).Setting up your local environmentTo get started, you will need to have `git` installed locally.Depending on
your operating system, there are also a number of other dependencies required.These are detailed in the [Building guide](../../BUILDING.md).Depending on your environment you might want to grab IDE specific settings from
[IDE configs](https://github.com/nodejs/node-code-ide-configs).Once you have `git` and are sure you have all of the necessary dependencies,
it's time to create a fork.Step 1: Fork
Fork the project [on GitHub](https://github.com/nodejs/node) and clone your fork
locally.```
git clone git@github.com:username/node.git
cd node
git remote add upstream https://github.com/nodejs/node.git
git fetch upstream```Configure `git` so that it knows who you are:```
git config user.name "J. Random User"
git config user.email "j.random.user@example.com"```You can use any name/email address you prefer here.We only use the
metadata generated by `git` using this configuration for properly attributing
your changes to you in the `AUTHORS` file and the changelog.If you would like for the GitHub UI to link the commit to your account
and award you the `Contributor` label after the changes have been merged,
make sure this local email is also added to your
[GitHub email list](https://github.com/settings/emails).Step 2: BranchAs a best practice to keep your development environment as organized as
possible, create local branches to work within.These should also be created
directly off of the upstream default branch.```
git checkout -b my-branch -t upstream/HEAD```The process of making changes
Step 3: Code
Pull requests in Node.js typically involve changes to
one or more of a few places in the repository.- C/C++ code contained in the `src` directory- JavaScript code contained in the `lib` directory- Documentation in `doc/api`- Tests within the `test` directoryIf you are modifying code, please be sure to run `make lint` (or`vcbuild.bat lint` on Windows) to ensure that the changes follow the Node.js
code style guide.Any documentation you write (including code comments and API documentation)
should follow the [Style Guide](../../doc/README.md).Code samples
included in the API docs will also be checked when running `make lint` (or
`vcbuild.bat lint` on Windows).If you are adding to or deprecating an API,
add or change the appropriate YAML documentation.Use `REPLACEME` for the
version number in the documentation YAML:```
### `request.method`
<!--YAML
added: REPLACEME
-->* {string}The request method.```For contributing C++ code, you may want to look at the
[C++ Style Guide](cpp-style-guide.md), as well as the
[README of src/](../../src/README.md) for an overview of Node.js
C++ internals.Step 4: CommitIt is a best practice to keep your changes as logically grouped
as possible within individual commits.There is no limit to the number of
commits any single pull request may have, and many contributors find it easier
to review changes that are split across multiple commits.```
git add my/changed/files
git commit```Multiple commits often get squashed when they are landed.See the
notes about .Commit message guidelines
A good commit message should describe what changed and why.-The first line should:- contain a short description of the change (preferably 50 characters or
less, and no more than 72 characters)- be entirely in lowercase with the exception of proper nouns, acronyms, andthe words that refer to code, like function/variable names- be prefixed with the name of the changedand start with an imperative verb.Check the output of `git log --oneline files/you/changed` to find out what subsystems your changes touch.Examples:
- `net: add localAddress and localPort to Socket`- `src: fix typos in async_wrap.h`- Keep the second line blank.- Wrap all other lines at 72 columns (except for long URLs).- If your patch fixes an open issue, you can add a reference to it at the end
of the log.Use the `Fixes:` prefix and the full issue URL.For otherreferences use `Refs:`.`Fixes:` and `Refs:` trailers get automatically added to your commit message
when the Pull Request lands as long as they are included in the
Pull Request's description.If the Pull Request lands in several commits,
by default the trailers found in the description are added to each commits.Examples:
- `Fixes: https://github.com/nodejs/node/issues/1337`- `Refs: https://eslint.org/docs/rules/space-in-parens.html`- `Refs: https://github.com/nodejs/node/pull/3615`- If your commit introduces a breaking change (`semver-major`), it should
contain an explanation about the reason of the breaking change, whichsituation would trigger the breaking change, and what is the exact change.Sample complete commit message:```
subsystem: explain the commit in one lineThe body of the commit message should be one or more paragraphs, explaining
things in more detail.Please word-wrap to keep columns to 72 characters or
less.Fixes: https://github.com/nodejs/node/issues/1337Refs: https://eslint.org/docs/rules/space-in-parens.html```If you are new to contributing to Node.js, please try to do your best at
conforming to these guidelines, but do not worry if you get something wrong.One of the existing contributors will help get things situated and the
contributor landing the pull request will ensure that everything follows
the project guidelines.Step 5: RebaseAs a best practice, once you have committed your changes, it is a good idea
to use `git rebase` (not `git merge`) to synchronize your work with the main
repository.```
git fetch upstream HEAD
git rebase FETCH_HEAD```This ensures that your working branch has the latest changes from `nodejs/node`.Step 6: Test
Bug fixes and features should always come with tests.A
[guide for writing tests in Node.js](writing-tests.md) has been
provided to make the process easier.Looking at other tests to see how they
should be structured can also help.The `test` directory within the `nodejs/node` repository is complex and it is
often not clear where a new test file should go.When in doubt, add new tests
to the `test/parallel/` directory and the right location will be sorted out
later.Before submitting your changes in a pull request, always run the full Node.js
test suite.To run the tests (including code linting) on Unix / macOS:```
./configure && make -j4 test```We can speed up the builds by using [Ninja](https://ninja-build.org/).For more
information, see
[Building Node.js with Ninja](building-node-with-ninja.md).And on Windows:```
vcbuild test```For some configurations, running all tests might take a long time (an hour or
more).To run a subset of the test suite, see the [running tests](../../BUILDING.md#running-tests) section of
the Building guide.Step 7: PushOnce you are sure your commits are ready to go, with passing tests and linting,
begin the process of opening a pull request by pushing your working branch to
your fork on GitHub.```
git push origin my-branch```Step 8: Opening the pull request
From within GitHub, opening a new pull request will present you with a
[pull request template](https://raw.githubusercontent.com/nodejs/node/HEAD/.github/PULL_REQUEST_TEMPLATE.md).Please try to do your best at filling out the
details, but feel free to skip parts if you're not sure what to put.Once opened, pull requests are usually reviewed within a few days.To get feedback on your proposed change even though it is not ready
to land, use the `Convert to draft` option in the GitHub UI.Do not use the `wip` label as it might not prevent the PR
from landing before you are ready.Step 9: Discuss and updateYou will probably get feedback or requests for changes to your pull request.This is a big part of the submission process so don't be discouraged!Some
contributors may sign off on the pull request right away, others may have
more detailed comments or feedback.This is a necessary part of the process
in order to evaluate whether the changes are correct and necessary.To make changes to an existing pull request, make the changes to your local
branch, add a new commit with those changes, and push those to your fork.GitHub will automatically update the pull request.```
git add my/changed/files
git commit
git push origin my-branch```If a git conflict arises, it is necessary to synchronize your branch with other
changes that have landed upstream by using `git rebase`:```
git fetch upstream HEAD
git rebase FETCH_HEAD
git push --force-with-lease origin my-branch```Important: The `git push --force-with-lease` command is one of the few ways
to delete history in `git`.It also complicates the review process, as it won't
allow reviewers to get a quick glance on what changed.Before you use it, make
sure you understand the risks.If in doubt, you can always ask for guidance in
the pull request.There are a number of more advanced mechanisms for managing commits using
`git rebase` that can be used, but are beyond the scope of this guide.Feel free to post a comment in the pull request to ping reviewers if you are
awaiting an answer on something.If you encounter words or acronyms that
seem unfamiliar, refer to this
[glossary](https://github.com/nodejs/node/blob/HEAD/glossary.md).Approval and request changes workflow
All pull requests require "sign off" in order to land.Whenever a contributor
reviews a pull request they may find specific details that they would like to
see changed or fixed.These may be as simple as fixing a typo, or may involve
substantive changes to the code you have written.While such requests are
intended to be helpful, they may come across as abrupt or unhelpful, especially
requests to change things that do not include concrete suggestions on how to
change them.Try not to be discouraged.If you feel that a particular review is unfair,
say so, or contact one of the other contributors in the project and seek their
input.Often such comments are the result of the reviewer having only taken a
short amount of time to review and are not ill-intended.Such issues can often
be resolved with a bit of patience.That said, reviewers should be expected to
be helpful in their feedback, and feedback that is simply vague, dismissive, and
unhelpful is likely safe to ignore.Step 10: LandingIn order to land, a pull request needs to be reviewed and  by
at least two Node.js Collaborators (one collaborator approval is enough if the
pull request has been open for more than 7 days) and pass a
.After that, as long as there are noobjections from other contributors, the pull request can be merged.If you findyour pull request waiting longer than you expect, see the
.When a collaborator lands your pull request, they will posta comment to the pull request page mentioning the commit(s) it
landed as.GitHub might show the pull request as `Closed` at this
point, but don't worry.If you look at the branch you raised your
pull request against, you should see a commit with your name on it.Congratulations and thanks for your contribution!Reviewing pull requests
All Node.js contributors who choose to review and provide feedback on Pull
Requests have a responsibility to both the project and the individual making the
contribution.Reviews and feedback must be helpful, insightful, and geared
towards improving the contribution as opposed to simply blocking it.Do not
expect to be able to block a pull request from advancing simply because you say
"No" without giving an explanation.Be open to having your mind changed.Be open
to working with the contributor to make the pull request better.Reviews that are dismissive or disrespectful of the contributor or any other
reviewers are strictly counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).When reviewing a pull request, the primary goals are for the codebase to improve
and for the person submitting the request to succeed.Even if a pull request
does not land, the submitters should come away from the experience feeling like
their effort was not wasted or unappreciated.Every pull request from a new
contributor is an opportunity to grow the community.Review a bit at a time
Do not overwhelm new contributors.It is tempting to micro-optimize and make everything about relative performance,
perfect grammar, or exact style matches.Do not succumb to that temptation.Focus first on the most significant aspects of the change:
- Does this change make sense for Node.js?- Does this change make Node.js better, even if only incrementally?- Are there clear bugs or larger scale issues that need attending to?- Is the commit message readable and correct?If it contains a breaking change
is it clear enough?When changes are necessary, request them, do not demand them, and do not
assume that the submitter already knows how to add a test or run a benchmark.Specific performance optimization techniques, coding styles, and conventions
change over time.The first impression you give to a new contributor never does.Nits (requests for small changes that are not essential) are fine, but try to
avoid stalling the pull request.Most nits can typically be fixed by the
Node.js collaborator landing the pull request but they can also be an
opportunity for the contributor to learn a bit more about the project.It is always good to clearly indicate nits when you comment: e.g.
`Nit: change foo() to bar().But this is not blocking.`If your comments were addressed but were not folded automatically after new
commits or if they proved to be mistaken, please, [hide them](https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment)
with the appropriate reason to keep the conversation flow concise and relevant.Be aware of the person behind the codeBe aware that how you communicate requests and reviews in your feedback can
have a significant impact on the success of the pull request.Yes, we may land
a particular change that makes Node.js better, but the individual might just
not want to have anything to do with Node.js ever again.The goal is not just
having good code.Respect the minimum wait time for commentsThere is a minimum waiting time which we try to respect for non-trivial
changes, so that people who may have important input in such a distributed
project are able to respond.For non-trivial changes, pull requests must be left open for at least 48 hours.Sometimes changes take far longer to review, or need more specialized review
from subject-matter experts.When in doubt, do not rush.Trivial changes, typically limited to small formatting changes or fixes to
documentation, may be landed within the minimum 48 hour window.Abandoned or stalled pull requestsIf a pull request appears to be abandoned or stalled, it is polite to first
check with the contributor to see if they intend to continue the work before
checking if they would mind if you took it over (especially if it just has
nits left).When doing so, it is courteous to give the original contributor
credit for the work they started (either by preserving their name and email
address) in the commit log, or by using an `Author:` meta-data tag in the
commit.If a pull request has been inactive for more than six months, add the `stalled` label
to it.That will trigger an automation that adds a comment explaining the pull request
may be close for inactivity, giving a heads-up to the contributor before actually
closing it if it remains inactive.Approving a change
Any Node.js core collaborator (any GitHub user with commit rights in the
`nodejs/node` repository) is authorized to approve any other contributor's
work.Collaborators are not permitted to approve their own pull requests.Collaborators indicate that they have reviewed and approve of the changes in
a pull request either by using GitHub's Approval Workflow, which is preferred,
or by leaving an `LGTM` ("Looks Good To Me") comment.When explicitly using the "Changes requested" component of the GitHub Approval
Workflow, show empathy.That is, do not be rude or abrupt with your feedback
and offer concrete suggestions for improvement, if possible.If you're not
sure how a particular change can be improved, say so.Most importantly, after leaving such requests, it is courteous to make yourself
available later to check whether your comments have been addressed.If you see that requested changes have been made, you can clear another
collaborator's `Changes requested` review.Change requests that are vague, dismissive, or unconstructive may also be
dismissed if requests for greater clarification go unanswered within a
reasonable period of time.Use `Changes requested` to block a pull request from landing.When doing so,
explain why you believe the pull request should not land along with an
explanation of what may be an acceptable alternative course, if any.Accept that there are different opinions about what belongs in Node.js
Opinions on this vary, even among the members of the Technical Steering
Committee.One general rule of thumb is that if Node.js itself needs it (due to historic
or functional reasons), then it belongs in Node.js.For instance, `url`
parsing is in Node.js because of HTTP protocol support.Also, functionality that either cannot be implemented outside of core in any
reasonable way, or only with significant pain.It is not uncommon for contributors to suggest new features they feel would
make Node.js better.These may or may not make sense to add, but as with all
changes, be courteous in how you communicate your stance on these.Comments
that make the contributor feel like they should have "known better" or
ridiculed for even trying run counter to the [Code of Conduct](https://github.com/nodejs/admin/blob/HEAD/CODE_OF_CONDUCT.md).Performance is not everything
Node.js has always optimized for speed of execution.If a particular change
can be shown to make some part of Node.js faster, it's quite likely to be
accepted.Claims that a particular pull request will make things faster will
almost always be met by requests for performance [benchmark results](writing-and-running-benchmarks.md) that
demonstrate the improvement.That said, performance is not the only factor to consider.Node.js also
optimizes in favor of not breaking existing code in the ecosystem, and not
changing working functional code just for the sake of changing.If a particular pull request introduces a performance or functional
regression, rather than simply rejecting the pull request, take the time to
work with the contributor on improving the change.Offer feedback and
advice on what would make the pull request acceptable, and do not assume that
the contributor should already know how to do that.Be explicit in your
feedback.Continuous integration testing
All pull requests that contain changes to code must be run through
continuous integration (CI) testing at [https://ci.nodejs.org/](https://ci.nodejs.org/).Only Node.js core collaborators and triagers can start a CI testing run.The
specific details of how to do this are included in the new collaborator
[Onboarding guide](../../onboarding.md).Usually, a collaborator or triager will start a CI
test run for you as approvals for the pull request come in.If not, you can ask a collaborator or triager to start a CI run.Ideally, the code change will pass ("be green") on all platform configurations
supported by Node.js.This means that all tests pass and there are no linting
errors.In reality, however, it is not uncommon for the CI infrastructure itself
to fail on specific platforms or for so-called "flaky" tests to fail ("be red").It is vital to visually inspect the results of all failed ("red") tests to
determine whether the failure was caused by the changes in the pull request.Notes
Commit squashingIn most cases, do not squash commits that you add to your pull request during
the review process.When the commits in your pull request land, they may be
squashed into one commit per logical change.Metadata will be added to the
commit message (including links to the pull request, links to relevant issues,
and the names of the reviewers).The commit history of your pull request,
however, will stay intact on the pull request page.For the size of "one logical change",
[0b5191f](https://github.com/nodejs/node/commit/0b5191f15d0f311c804d542b67e2e922d98834f8)
can be a good example.It touches the implementation, the documentation,
and the tests, but is still one logical change.All tests should always pass
when each individual commit lands on one of the `nodejs/node` branches.Getting approvals for your pull request
A pull request is approved either by saying LGTM, which stands for
"Looks Good To Me", or by using GitHub's Approve button.GitHub's pull request review feature can be used during the process.For more information, check out
[the official documentation](https://help.github.com/articles/reviewing-changes-in-pull-requests/).After you push new changes to your branch, you need to get
approval for these new changes again, even if GitHub shows "Approved"
because the reviewers have hit the buttons before.Waiting until the pull request gets landed
A pull request needs to stay open for at least 48 hours from when it is
submitted, even after it gets approved and passes the CI.This is to make sure
that everyone has a chance to weigh in.If the changes are trivial,
collaborators may decide it doesn't need to wait.A pull request may well take
longer to be merged in.All these precautions are important because Node.js is
widely used, so don't be discouraged!Check out the collaborator guideIf you want to know more about the code review and the landing process, see the
[collaborator guide](collaborator-guide.md).Appendix: subsystems
- `lib/*.js` (`assert`, `buffer`, etc.)- `build`- `doc`- `lib / src`- `test`- `tools`
You can find the full list of supported subsystems in the[nodejs/core-validate-commit](https://github.com/nodejs/core-validate-commit/blob/main/lib/rules/subsystem.js) repository.More than one subsystem may be valid for any particular issue or pull request.

--------------------------------

