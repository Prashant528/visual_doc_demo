-----------------------------<SEGMENT 1>--------------------------
Contributing to Harbor
Welcome
Harbor is developed in the open, and is constantly being improved by our users, contributors, and maintainers.It is because of you that we can bring great software to the community.This guide provides information on filing issues and guidelines for open source contributors.Please leave comments / suggestions if you find something is missing or incorrect.Contributors are encouraged to collaborate using the following resources in addition to the GitHub issue tracker:

Bi-weekly public community meetings
Catch up with past meetings on YouTube
Chat with us on the CNCF Slack (get an invitation here )
#harbor for end-user discussions
#harbor-dev for development of Harbor
Want long-form communication instead of Slack?We have two distributions lists:
harbor-users for end-user discussions
harbor-dev for development of Harbor
Follow us on Twitter at @project_harbor

-----------------------------<SEGMENT 2>--------------------------


Getting Started
Fork Repository
Fork the Harbor repository on GitHub to your personal account.#Set golang environment
export GOPATH=$HOME/go
mkdir -p $GOPATH/src/github.com/goharbor

#Get code
git clone git@github.com:goharbor/harbor.git
cd $GOPATH/src/github.com/goharbor/harbor

#Track repository under your personal account
git config push.default nothing # Anything to avoid pushing to goharbor/harbor by default
git remote rename origin goharbor
git remote add $USER git@github.com:$USER/harbor.git
git fetch $USER
NOTES: Note that GOPATH can be any directory, the example above uses $HOME/go.Change $USER above to your own GitHub username.

-----------------------------<SEGMENT 3>--------------------------


Build Project
To build the project, please refer the build guideline.

Repository Structure
Here is the basic structure of the harbor code base.Some key folders / files are commented for your references.....
├── contrib       # Contain documents, scripts, and other helpful things which are contributed by the community
├── make          # Resource for building and setting up Harbor environment
...
├── src           # Source code folder
├── tests         # Test cases for API / e2e testings
└── tools         # Keep supporting tools
...The folder graph below shows the structure of the source code folder harbor/src, which will be your primary working directory.The key folders are also commented..├── chartserver         # Source code contains the main logic to handle chart.├── cmd                 # Source code contains migrate script to handle DB upgrade.


├── common              # Source code for some general components like dao etc.│   ├── api
│   ├── config
│   ├── dao
│   ├── http
│   ├── job
│   ├── models
│   ├── rbac
│   ├── registryctl
│   ├── secret
│   ├── security
│   └── utils
├── controller          # Source code for the controllers used by the API handlers.│   ├── artifact
│   ├── blob
│   ├── event
│   ├── icon
│   ├── p2p
│   ├── project
│   ├── proxy
│   ├── quota
│   ├── repository
│   ├── scan
│   ├── scanner
│   ├── tag
│   ├── task
├── core                # Source code for the main business logic.Contains rest apis and all service information.│   ├── api
│   ├── auth
│   ├── config
│   ├── controllers
│   ├── filter
│   ├── label
│   ├── notifier
│   ├── promgr
│   ├── proxy
│   ├── service
│   ├── systeminfo
│   ├── utils
│   └── views
├── jobservice          # Source code for the job service component
│   ├── api
│   ├── config
│   ├── core
│   ├── env
│   ├── errs
│   ├── job
│   ├── logger
│   ├── models
│   ├── opm
│   ├── period
│   ├── pool
│   ├── runtime
│   ├── tests
│   └── utils
├── portal              # The code of harbor web UI
│   ├── e2e
│   ├── lib             # Source code of @harbor/ui npm library which includes the main UI components of web UI
│   └── src             # General web page UI code of Harbor
├── registryctl         # Source code contains the main logic to handle registry.├── replication         # Source code contains the main logic of replication.├── server              # Source code for the APIs.│   ├── handler
│   ├── middleware
│   ├── registry
│   ├── router
│   ├── v2.0
└── testing             # Some utilities to handle testing.



-----------------------------<SEGMENT 4>--------------------------


Contribute Workflow
PR are always welcome, even if they only contain small fixes like typos or a few lines of code.If there will be a significant effort, please document it as an issue and get a discussion going before starting to work on it.Please submit a PR broken down into small changes bit by bit.A PR consisting of a lot of features and code changes may be hard to review.It is recommended to submit PRs in an incremental fashion.Note: If you split your pull request to small changes, please make sure any of the changes goes to main will not break anything.


Otherwise, it can not be merged until this feature complete.

Fork and clone
Fork the Harbor repository and clone the code to your local workspace.Per Go's workspace instructions, place Harbor's code on your GOPATH.Refer to section Fork Repository for details.Define a local working directory:

working_dir=$GOPATH/src/github.com/goharbor
Set user to match your github profile name:

user={your github profile name}
Both $working_dir and $user are mentioned in the figure above.

