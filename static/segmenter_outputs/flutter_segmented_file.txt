Contributing to Flutter
 
 tl;dr: join Discord, be courteous, follow the steps below to set up a development environment; if you stick around and contribute, you can join the team and get commit access.
Welcome
 
 We invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike!
There are many ways to contribute, including writing code, filing issues on GitHub, helping people
 on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or
 fix bugs that people have filed, adding to our documentation,
 doing outreach about Flutter, or helping out in any other way.
We grant commit access (which includes full rights to the issue
 database, such as being able to edit labels) to people who have gained
 our trust and demonstrated a commitment to Flutter.
For more details
 see the Contributor access
 page in our docs.
We communicate primarily over GitHub and Discord.
Before you get started, we encourage you to read these documents which describe some of our community norms:
1.  Our code of conduct, which stipulates explicitly
     that everyone must be gracious, respectful, and professional. This
     also documents our conflict resolution policy and encourages people
     to ask questions.
 
 2.  Values,
     which talks about what we care most about.

    which talks about what we care most about.
Helping out in the issue database
 
 Triage is the process of going through bug reports and determining if they are valid, finding out
 how to reproduce them, catching duplicate reports, and generally making our issues list
 useful for our engineers.
If you want to help us triage, you are very welcome to do so!
1.  Join the #hackers-triage Discord channel.
 
 2.  Read our code of conduct, which stipulates explicitly
     that everyone must be gracious, respectful, and professional. If you're helping out
     with triage, you are representing the Flutter team, and so you want to make sure to
     make a good impression!
 
 3.  Help out as described in our triage guide
     You won't be able to add labels at first, so instead start by trying to
     do the other steps, e.g. trying to reproduce the problem and asking for people to
     provide enough details that you can reproduce the problem, pointing out duplicates,
     and so on. Chat on the #hackers-triage channel to let us know what you're up to!
 
 4.  Familiarize yourself with our
     issue hygiene wiki page,
     which covers the meanings of some important GitHub labels and
     milestones.
 
 5.  Once you've been doing this for a while, someone will invite you to the flutter-hackers
     team on GitHub and you'll be able to add labels too. See the
     contributor access wiki
     page for details.



-----------------------------<PREDICTEDSEGMENT>--------------------------

    page for details.
Quality Assurance
 
 One of the most useful tasks, closely related to triage, is finding and filing bug reports.
Testing
 beta releases, looking for regressions, creating test cases, adding to our test suites, and
 other work along these lines can really drive the quality of the product up.
Creating tests
 that increase our test coverage, writing tests for issues others have filed, all these tasks
 are really valuable contributions to open source projects.
If this interests you, you can jump in and submit bug reports without needing anyone's permission!
The #quality-assurance channel on our Discord server
 is a good place to talk about what you're doing.
We're especially eager for QA testing when
 we announce a beta release.
See quality assurance for
 more details.
If you want to contribute test cases, you can also submit PRs.
See the next section
 for how to set up your development environment, or ask in #hackers-test on Discord.
As a personal side note, this is exactly the kind of work that first got me into open
 source.
I was a Quality Assurance volunteer on the Mozilla project, writing test cases for
 browsers, long before I wrote a line of code for any open source project.
â€”Hixie
 
 Developing for Flutter
 
 If you prefer to write code, consider starting with the list of good
 first issues for Flutter or for Flutter DevTools.
Reference the respective sections below for further instructions.
Framework and Engine
 
 To develop for Flutter, you will eventually need to become familiar
 with our processes and conventions.
This section lists the documents
 that describe these methodologies.
The following list is ordered: you
 are strongly recommended to go through these documents in the order
 presented.
1.  Setting up your engine development environment,
     which describes the steps you need to configure your computer to
     work on Flutter's engine. If you only want to write code for the
     Flutter framework, you can skip this step. Flutter's engine mainly
     uses C++, Java, and Objective-C.
 
 2.  Setting up your framework development environment,
     which describes the steps you need to configure your computer to
     work on Flutter's framework. Flutter's framework mainly uses Dart.
 
 3.  Tree hygiene,
     which covers how to land a PR, how to do code review, how to
     handle breaking changes, how to handle regressions, and how to
     handle post-commit test failures.
 
 4.  Our style guide,
     which includes advice for designing APIs for Flutter, and how to
     format code in the framework.
 
 5.  Flutter design doc template,
     which should be used when proposing a new technical design.  This is a good
     practice to do before coding more intricate changes.
     See also our guidance for writing design docs.

