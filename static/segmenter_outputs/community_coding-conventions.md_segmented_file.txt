Contributing to Node.js Contributions to Node.js include code, documentation, answering user questions,
running the project's infrastructure, and advocating for all types of Node.js
users. The Node.js project welcomes all contributions from anyone willing to work in
good faith with other contributors and the community. No contribution is too
small and all contributions are valued. The Node.js project has an open governance model. Individuals making significant and valuable contributions are made
Collaborators and given commit-access to the project. See the
GOVERNANCE.md document for more information about how this
works.

Contents
- Code of Conduct
- Issues
- Pull Requests
- Developer's Certificate of Origin 1.1

--------<PREDICTED_SEGMENT_BOUNDARY>--------

Code of Conduct The Node.js project has a Code of Conduct to which all contributors must adhere. See details on our policy on Code of Conduct.

--------<PREDICTED_SEGMENT_BOUNDARY>--------

Issues Pull Requests Pull Requests are the way concrete changes are made to the code, documentation,
dependencies, and tools contained in the nodejs/node repository.

--------<PREDICTED_SEGMENT_BOUNDARY>--------

Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I
     have the right to submit it under the open source license
     indicated in the file; or (b) The contribution is based upon previous work that, to the best
     of my knowledge, is covered under an appropriate open source
     license and I have the right under that license to submit that
     work with modifications, whether created in whole or in part
     by me, under the same open source license (unless I am
     permitted to submit under a different license), as indicated
     in the file; or (c) The contribution was provided directly to me by some other
     person who certified (a), (b) or (c) and I have not modified
     it. (d) I understand and agree that this project and the contribution
     are public and that a record of the contribution (including all
     personal information I submit with it, including my sign-off) is
     maintained indefinitely and may be redistributed consistent with
     this project or the open source license(s) involved.

--------<PREDICTED_SEGMENT_BOUNDARY>--------

title: "Coding Conventions" weight: 8 description: | This document outlines a collection of guidelines, style suggestions, and tips for writing code in the different programming languages used throughout the Kubernetes project.

--------<PREDICTED_SEGMENT_BOUNDARY>--------

Code conventions
- Bash
  - Shell Style Guide
  - Ensure that build, release, test, and cluster-management scripts run on macOS
- Go
  - Go Code Review Comments
  - Effective Go
  - Know and avoid Go landmines
  - Comment your code.
  - Go's commenting conventions
    - If reviewers ask questions about why the code is the way it is, that's a sign that comments might be helpful.
  - Command-line flags should use dashes, not underscores
  - Naming
    - Please consider package name when selecting an interface name, and avoid redundancy. For example, storage.Interface is better than storage.StorageInterface.
    - Do not use uppercase characters, underscores, or dashes in package names.
    - Please consider parent directory name when choosing a package name. For example, pkg/controllers/autoscaler/foo.go should say package autoscaler not package autoscalercontroller.
    - Unless there's a good reason, the package foo line should match the name of the directory in which the .go file exists.
    - Importers can use a different name if they need to disambiguate.
  - Locks should be called lock and should never be embedded (always lock sync.Mutex). When multiple locks are present, give each lock a distinct name following Go conventions: stateLock, mapLock etc.

--------<PREDICTED_SEGMENT_BOUNDARY>--------

Testing conventions
- All new packages and most new significant functionality must come with unit tests.
- Table-driven tests are preferred for testing multiple scenarios/inputs. For an example, see TestNamespaceAuthorization.
- Significant features should come with integration (test/integration) and/or end-to-end (test/e2e) tests.
  - Including new kubectl commands and major features of existing commands.
- Unit tests must pass on macOS and Windows platforms - if you use Linux specific features, your test case must either be skipped on windows or compiled out (skipped is better when running Linux specific commands, compiled out is required when your code does not compile on Windows).
- Avoid relying on Docker Hub. Use the Google Cloud Artifact Registry instead.
- Do not expect an asynchronous thing to happen immediately---do not wait for one second and expect a pod to be running. Wait and retry instead.
- See the testing guide for additional testing advice.

--------<PREDICTED_SEGMENT_BOUNDARY>--------

Directory and file conventions
- Avoid package sprawl. Find an appropriate subdirectory for new packages. See issue #4851 for discussion.
- Libraries with no appropriate home belong in new package subdirectories of pkg/util.
- Avoid general utility packages. Packages called "util" are suspect. Instead, derive a name that describes your desired function. For example, the utility functions dealing with waiting for operations are in the wait package and include functionality like Poll. The full name is wait.Poll.
- All filenames should be lowercase.
- Go source files and directories use underscores, not dashes.
- Package directories should generally avoid using separators as much as possible. When package names are multiple words, they usually should be in nested subdirectories.
- Document directories and filenames should use dashes rather than underscores.
- Examples should also illustrate best practices for configuration and using the system.
- Follow these conventions for third-party code:
  - Go code for normal third-party dependencies is managed using go modules and is described in the kubernetes vendoring guide.
  - Other third-party code belongs in third_party.
  - forked third party Go code goes in third_party/forked.
  - forked golang stdlib code goes in third_party/forked/golang.
  - Third-party code must include licenses.

--------<PREDICTED_SEGMENT_BOUNDARY--------

This includes modified third-party code and excerpts, as well.