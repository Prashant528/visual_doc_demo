{
    "No categories identified.": {
        "content": {
            "Joining the Community": "### Joining the Community<br />Join Discord, be courteous, and follow the steps to set up a development environment. If you contribute consistently, you can join the team and get commit access. Welcome to the Flutter team, which includes volunteers and sponsored members!<br />",
            "Understanding Community Norms": "### Understanding Community Norms<br />Read the Contributor access page in the docs. Communication is primarily over GitHub and Discord. Read the code of conduct and values documents to understand community norms.<br />",
            "Issue Triage": "### Issue Triage<br />Triage involves reviewing bug reports, reproducing issues, and managing the issues list. Join the #hackers-triage Discord channel and familiarize yourself with the issue hygiene wiki page.<br />",
            "Contributing Code": "### Contributing Code<br />Start with Dart & Flutter DevTools if you're new. Follow the DevTools CONTRIBUTING.md guide. Help with existing PRs by picking up incomplete patches.<br />",
            "Developer Outreach": "### Developer Outreach<br />Join the #hackers-devrel Discord channel if interested in developer relations. Engage in activities like advocating for Flutter, answering questions, or creating content.<br />",
            "API Documentation": "### API Documentation<br />Contribute to sample code and API documentation. Join relevant Discord channels and follow the style guide. Improve documentation by using Flutter and documenting answers to questions.<br />"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Joining the Community"
                },
                {
                    "source": "Joining the Community",
                    "target": "Understanding Community Norms"
                },
                {
                    "source": "Understanding Community Norms",
                    "target": "Issue Triage"
                },
                {
                    "source": "Issue Triage",
                    "target": "Contributing Code"
                },
                {
                    "source": "Contributing Code",
                    "target": "Developer Outreach"
                },
                {
                    "source": "Developer Outreach",
                    "target": "API Documentation"
                }
            ]
        }
    },
    "SC \u2013 Submit the changes": {
        "content": {
            "Quality Assurance": "### Quality Assurance<br />See the contributor access wiki page for details. One of the most useful tasks, closely related to triage, is finding and filing bug reports. Testing beta releases, looking for regressions, creating test cases, adding to our test suites, and other work along these lines can really drive the quality of the product up. Creating tests that increase our test coverage, writing tests for issues others have filed, all these tasks are really valuable contributions to open source projects. If this interests you, you can jump in and submit bug reports without needing anyone's permission! The #quality-assurance channel on our Discord server is a good place to talk about what you're doing. We're especially eager for QA testing when we announce a beta release. See quality assurance for more details. If you want to contribute test cases, you can also submit PRs. See the next section for how to set up your development environment, or ask in #hackers-test on Discord. As a personal side note, this is exactly the kind of work that first got me into open source. I was a Quality Assurance volunteer on the Mozilla project, writing test cases for browsers, long before I wrote a line of code for any open source project. \u2014Hixie",
            "Code Review": "### Code Review<br />For a brief description of the importance of code review, please read On Code Review. There are two aspects of code review: giving and receiving. To make it easier for your PR to receive reviews, consider the reviewers will need you to: - Reviewers, the people giving the review, are highly encouraged to revisit the Code of Conduct as well as community expectations and must go above and beyond to promote a collaborative, respectful community. When reviewing PRs from others The Gentle Art of Patch Review suggests an iterative series of focuses which is designed to lead new contributors to positive collaboration without inundating them initially with nuances:<br />- Is the idea behind the contribution sound?<br />- Is the contribution architected correctly?<br />- Is the contribution polished?<br />Note: if your pull request isn't getting enough attention, you can use the #pr-reviews channel on Slack to get help finding reviewers.<br />Best practices<br />- Write clear and meaningful git commit messages.<br />- If the PR will completely fix a specific issue, include fixes #123 in the PR body (where 123 is the specific issue number the PR will fix. This will automatically close the issue when the PR is merged.<br />- Make sure you don't include @mentions or fixes keywords in your git commit messages. These should be included in the PR body instead.<br />- When you make a PR for small change (such as fixing a typo, style change, or grammar fix), please squash your commits so that we can maintain a cleaner git history.<br />- Make sure you include a clear and detailed PR description explaining the reasons for the changes, and ensuring there is sufficient information for the reviewer to understand your PR.<br />Additional Readings:<br />- chris.beams.io/posts/git-commit/<br />- github.com/blog/1506-closing-issues-via-pull-requests<br />- davidwalsh.name/squash-commits-git<br />- https://mtlynch.io/code-review-love/"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Quality Assurance"
                },
                {
                    "source": "Quality Assurance",
                    "target": "Code Review"
                }
            ]
        }
    },
    "CF \u2013 Contribution flow": {
        "content": {
            "Developing for Flutter": "### Developing for Flutter<br />If you prefer to write code, consider starting with the list of good first issues for Flutter or for Flutter DevTools. Reference the respective sections below for further instructions.<br />#### Framework and Engine<br />To develop for Flutter, you will eventually need to become familiar with our processes and conventions. This section lists the documents that describe these methodologies. The following list is ordered: you are strongly recommended to go through these documents in the order presented.<br />1. **Setting up your engine development environment**, which describes the steps you need to configure your computer to work on Flutter's engine. If you only want to write code for the Flutter framework, you can skip this step. Flutter's engine mainly uses C++, Java, and Objective-C.<br />2. **Setting up your framework development environment**, which describes the steps you need to configure your computer to work on Flutter's framework. Flutter's framework mainly uses Dart.<br />3. **Tree hygiene**, which covers how to land a PR, how to do code review, how to handle breaking changes, how to handle regressions, and how to handle post-commit test failures.<br />4. **Our style guide**, which includes advice for designing APIs for Flutter, and how to format code in the framework.<br />5. **Flutter design doc template**, which should be used when proposing a new technical design. This is a good practice to do before coding more intricate changes. See also our guidance for writing design docs.<br />#### How to contribute to Flutter<br />In addition to the documents, there is a video linked above on How to contribute to Flutter from the Flutter YouTube channel, there are many pages in our docs, and an article Contributing to Flutter: Getting Started on Medium that may be of interest.",
            "Contributing to Kubernetes": "### Contributing to Kubernetes<br />Kubernetes is open source, but many of the people working on it do so as their day job. In order to avoid forcing people to be \"at work\" effectively 24/7, we want to establish some semi-formal protocols around development. Hopefully, these rules make things go more smoothly. If you find that this is not the case, please complain loudly. As a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays. Please do not ever hesitate to ask a question or send a pull request. Check out our community guiding principles on how to create great code as a big group. Beginner focused information can be found below in Open a Pull Request and Code Review. For quick reference on contributor resources, we have a handy contributor cheatsheet.<br />#### Communication<br />It is best to contact your SIG for issues related to the SIG's topic. Your SIG will be able to help you much more quickly than a general question would. For general questions and troubleshooting, use the standard lines of communication and work through the troubleshooting guide.<br />#### GitHub workflow<br />To check out code to work on, please refer to the GitHub Workflow Guide. The full workflow for a pull request is documented here:<br />- **Kubernetes-specific github workflow**. That document is comprehensive and detailed, for purposes of a typical pull request we will cover the initial and simple use case here:<br />**Opening a Pull Request**<br />Pull requests are often called a \"PR\". Kubernetes generally follows the standard github pull request process, but there is a layer of additional kubernetes specific (and sometimes SIG specific) differences: The first difference you'll see is that a bot will begin applying structured labels to your PR. The bot may also make some helpful suggestions for commands to run in your PR to facilitate review. These /command options can be entered in comments to trigger auto-labeling and notifications. Refer to its command reference documentation.<br />Common new contributor PR issues are:<br />- Not having correctly signed the CLA ahead of your first PR. See the CLA page for troubleshooting help, in some cases you might need to file a ticket with the CNCF to resolve a CLA problem.<br />- Finding the right SIG or reviewer(s) for the PR (see Code Review section) and following any SIG or repository specific contributing guidelines (see Learn about SIGs section)<br />- Dealing with test cases which fail on your PR, unrelated to the changes you introduce (see Test Flakes)<br />- Not following scalability good practices<br />- Include mentions (like @person) and keywords which could close the issue (like fixes #xxxx) in commit messages."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Developing for Flutter"
                },
                {
                    "source": "Parent Node",
                    "target": "Contributing to Kubernetes"
                }
            ]
        }
    },
    "TC \u2013 Talk to the community": {
        "content": {
            "API Documentation": "It can be a lot of fun to create new diagrams for the API docs.<br />",
            "Release Process": "Releases<br />If you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases channel of our Discord server.<br />",
            "Social Events": "Social events in the contributor community<br />Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself. This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example. If this is an area that is of interest to you, please join our Discord and ping Hixie on the #hackers channel!<br />"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "API Documentation"
                },
                {
                    "source": "API Documentation",
                    "target": "Release Process"
                },
                {
                    "source": "Release Process",
                    "target": "Social Events"
                }
            ]
        }
    },
    "DC \u2013 Deal with the code": {
        "content": {
            "Testing": "**Testing**<br />Testing is the responsibility of all contributors and is in part owned by all SIGs, but is also coordinated by sig-testing. Refer to the Testing Guide for more information. There are multiple types of tests. The location of the test code varies with type, as do the specifics of the environment needed to successfully run the test:<br />- **Unit**: These confirm that a particular function behaves as intended. Golang includes a native ability for unit testing via the testing package. Unit test source code can be found adjacent to the corresponding source code within a given package. For example: functions defined in `kubernetes/cmd/kubeadm/app/util/version.go` will have unit tests in `kubernetes/cmd/kubeadm/app/util/version_test.go`. These are easily run locally by any developer on any OS.<br />- **Integration**: These tests cover interactions of package components or interactions between kubernetes components and some other non-kubernetes system resource (eg: etcd). An example would be testing whether a piece of code can correctly store data to or retrieve data from etcd. Integration tests are stored in `kubernetes/test/integration/`. Running these can require the developer set up additional functionality on their development system.<br />- **End-to-end (\"e2e\")**: These are broad tests of overall system behavior and coherence. These are more complicated as they require a functional kubernetes cluster built from the sources to be tested. A separate document detailing e2e testing and test cases themselves can be found in `kubernetes/test/e2e/`.<br />- **Conformance**: These are a set of testcases, currently a subset of the integration/e2e tests, that the Architecture SIG has approved to define the core set of interoperable features that all Kubernetes deployments must support. For more information on Conformance tests please see the Conformance Testing Document. Continuous integration will run these tests either as pre-submits on PRs, post-submits against master/release branches, or both. The results appear on testgrid. sig-testing is responsible for that official infrastructure and CI. The associated automation is tracked in the test-infra repo. If you're looking to run e2e tests on your own infrastructure, kubetest is the mechanism.",
            "Security": "**Security**<br />- **Security Release Page** - outlines the procedures for the handling of security issues.<br />- **Security and Disclosure Information** - check this page if you wish to report a security vulnerability."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Testing"
                },
                {
                    "source": "Testing",
                    "target": "Security"
                }
            ]
        }
    }
}