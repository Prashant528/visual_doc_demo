{
    "CF \u2013 Contribution flow": {
        "content": {
            "Communication": "- **Communication**<br />- **GitHub workflow**<br />- **Open a Pull Request**<br />- **Code Review**<br />- **Best Practices**<br />- **Testing**",
            "Contribution Guidelines": "Kubernetes is open source, but many of the people working on it do so as their day job. In order to avoid forcing people to be \"at work\" effectively 24/7, we want to establish some semi-formal protocols around development. Hopefully, these rules make things go more smoothly. If you find that this is not the case, please complain loudly. As a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays. Please do not ever hesitate to ask a question or send a pull request. Check out our [community guiding principles](/contributors/guide/expectations.md#code-review) on how to create great code as a big group. Beginner focused information can be found below in [Open a Pull Request](#opening-a-pull-request) and [Code Review](#code-review). For quick reference on contributor resources, we have a handy [contributor cheatsheet](./contributor-cheatsheet/).",
            "GitHub Workflow": "GitHub workflow To check out code to work on, please refer to [the GitHub Workflow Guide](./github-workflow.md). - [Kubernetes-specific github workflow](pull-requests.md#the-testing-and-merge-workflow). That document is comprehensive and detailed, for purposes of a typical pull request we will cover the initial and simple use case here:"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Communication"
                },
                {
                    "source": "Communication",
                    "target": "Contribution Guidelines"
                },
                {
                    "source": "Contribution Guidelines",
                    "target": "GitHub Workflow"
                }
            ]
        }
    },
    "No categories identified.": {
        "content": {
            "Introduction": "**Contributing to Kubernetes**<br />An entrypoint to getting started with contributing to the Kubernetes project.",
            "Contribution Areas": "- **Security**<br />- **Documentation**<br />- **Issues Management or Triage**",
            "Documentation Contribution": "[Contributing to Documentation](https://kubernetes.io/editdocs/)",
            "Issues Management": "Have you ever noticed the total number of [open issues](https://issues.k8s.io)?<br />Helping to manage or triage these open issues can be a great contribution and a great opportunity to learn about the various areas of the project.<br />Triaging is the word we use to describe the process of adding multiple types of descriptive labels to GitHub issues, in order to speed up routing issues to the right folks.<br />Refer to the [Issue Triage Guidelines](/contributors/guide/issue-triage.md) for more information."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Introduction"
                },
                {
                    "source": "Introduction",
                    "target": "Contribution Areas"
                },
                {
                    "source": "Contribution Areas",
                    "target": "Documentation Contribution"
                },
                {
                    "source": "Contribution Areas",
                    "target": "Issues Management"
                }
            ]
        }
    },
    "DC \u2013 Deal with the code": {
        "content": {
            "Testing": "Testing is the responsibility of all contributors and is in part owned by all SIGs, but is also coordinated by [sig-testing](/sig-testing). Refer to the [Testing Guide](/contributors/devel/sig-testing/testing.md) for more information. There are multiple types of tests.<br />- **Unit**: These confirm that a particular function behaves as intended. Golang includes a native ability for unit testing via the [testing](https://golang.org/pkg/testing/) package. Unit test source code can be found adjacent to the corresponding source code within a given package. For example: functions defined in [kubernetes/cmd/kubeadm/app/util/version.go](https://git.k8s.io/kubernetes/cmd/kubeadm/app/util/version.go) will have unit tests in [kubernetes/cmd/kubeadm/app/util/version_test.go](https://git.k8s.io/kubernetes/cmd/kubeadm/app/util/version_test.go). These are easily run locally by any developer on any OS.<br />- **Integration**: These tests cover interactions of package components or interactions between kubernetes components and some other non-kubernetes system resource (eg: etcd). An example would be testing whether a piece of code can correctly store data to or retrieve data from etcd. Integration tests are stored in [kubernetes/test/integration/](https://git.k8s.io/kubernetes/test/integration). Running these can require the developer set up additional functionality on their development system.<br />- **End-to-end (\"e2e\")**: These are broad tests of overall system behavior and coherence. These are more complicated as they require a functional kubernetes cluster built from the sources to be tested. A separate [document detailing e2e testing](/contributors/devel/sig-testing/e2e-tests.md) and test cases themselves can be found in [kubernetes/test/e2e/](https://git.k8s.io/kubernetes/test/e2e).<br />- **Conformance**: These are a set of testcases, currently a subset of the integration/e2e tests, that the Architecture SIG has approved to define the core set of interoperable features that all Kubernetes deployments must support. For more information on Conformance tests please see the [Conformance Testing](/contributors/devel/sig-architecture/conformance-tests.md) Document. Continuous integration will run these tests either as pre-submits on PRs, post-submits against master/release branches, or both. The results appear on [testgrid](https://testgrid.k8s.io). sig-testing is responsible for that official infrastructure and CI. The associated automation is tracked in the [test-infra repo](https://git.k8s.io/test-infra). If you're looking to run e2e tests on your own infrastructure, [kubetest](https://git.k8s.io/test-infra/kubetest) is the mechanism.<br />- [Security Release Page](https://git.k8s.io/security/security-release-process.md) - outlines the procedures for the handling of security issues.<br />- [Security and Disclosure Information](https://kubernetes.io/docs/reference/issues-security/security/) - check this page if you wish to report a security vulnerability."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Testing"
                }
            ]
        }
    },
    "SC \u2013 Submit the changes": {
        "content": {
            "Opening a Pull Request": "Pull requests are often called a \"PR\". Kubernetes generally follows the standard [GitHub pull request](https://help.github.com/articles/about-pull-requests/) process, but there is a layer of additional Kubernetes specific (and sometimes SIG specific) differences:<br />- A bot will begin applying structured labels to your PR.<br />- The bot may also make some helpful suggestions for commands to run in your PR to facilitate review.<br />- Refer to its [command reference documentation](https://go.k8s.io/bot-commands).<br />- Not having correctly signed the CLA ahead of your first PR. See the [CLA page](/CLA.md) for troubleshooting help.<br />- Finding the right SIG or reviewer(s) for the PR and following any SIG or repository specific contributing guidelines.<br />- Dealing with test cases which fail on your PR, unrelated to the changes you introduce.<br />- Not following [scalability good practices](scalability-good-practices.md).<br />- Include mentions (like @person) and [keywords](https://help.github.com/en/articles/closing-issues-using-keywords) which could close the issue (like fixes #xxxx) in commit messages.",
            "Code Review": "For a brief description of the importance of code review, please read [On Code Review](/contributors/guide/expectations.md#code-review). There are two aspects of code review: giving and receiving.<br />- Follow the project [coding conventions](coding-conventions.md).<br />- Write [good commit messages](https://chris.beams.io/posts/git-commit/).<br />- Break large changes into a logical series of smaller patches.<br />- Label PRs with appropriate SIGs and reviewers.<br />- Reviewers are encouraged to revisit the [Code of Conduct](/code-of-conduct.md) and [community expectations](/expectations.md#expectations-of-reviewers-review-latency).<br />- Is the idea behind the contribution sound?<br />- Is the contribution architected correctly?<br />- Is the contribution polished?<br />- Use the [#pr-reviews](https://kubernetes.slack.com/messages/pr-reviews) channel on Slack to get help finding reviewers.<br />- Write clear and meaningful git commit messages.<br />- Include `fixes #123` in the PR body if the PR will completely fix a specific issue.<br />- Squash your commits for small changes.<br />- Include a clear and detailed PR description.<br />- Additional Readings:<br />  - [chris.beams.io/posts/git-commit/](https://chris.beams.io/posts/git-commit/)<br />  - [github.com/blog/1506-closing-issues-via-pull-requests](https://github.com/blog/1506-closing-issues-via-pull-requests)<br />  - [davidwalsh.name/squash-commits-git](https://davidwalsh.name/squash-commits-git)<br />  - [https://mtlynch.io/code-review-love/](https://mtlynch.io/code-review-love/)"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Opening a Pull Request"
                },
                {
                    "source": "Opening a Pull Request",
                    "target": "Code Review"
                }
            ]
        }
    },
    "TC \u2013 Talk to the community": {
        "content": {
            "Communication": "It is best to contact your [SIG](first-contribution.md#learn-about-sigs) for issues related to the SIG's topic. Your SIG will be able to help you much more quickly than a general question would. <br /> For general questions and troubleshooting, use the [standard lines of communication](/communication/README.md) and work through the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/)."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Communication"
                }
            ]
        }
    }
}