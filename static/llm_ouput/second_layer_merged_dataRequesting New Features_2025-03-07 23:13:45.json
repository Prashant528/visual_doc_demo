{
    "content": {
        "Introduction to Contribution": "### Contribute to \ud83e\udd17 Transformers<br />Everyone is welcome to contribute, and we value everybody's contribution.<br />Code contributions are not the only way to help the community. Answering questions, helping others, and improving the documentation are also immensely valuable. It also helps us if you spread the word! Reference the library in blog posts about the awesome projects it made possible, shout out on Twitter every time it has helped you, or simply \u2b50\ufe0f the repository to say thank you. However you choose to contribute, please be mindful and respect our [code of conduct](https://github.com/huggingface/transformers/blob/main/CODE_OF_CONDUCT.md). This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/main/CONTRIBUTING.md).",
        "Ways to Contribute": "### Ways to contribute<br />There are several ways you can contribute to \ud83e\udd17 Transformers:<br />- Fix outstanding issues with the existing code.<br />- Submit issues related to bugs or desired new features.<br />- Implement new models.<br />- Contribute to the examples or to the documentation.<br />If you don't know where to start, there is a special [Good First Issue](https://github.com/huggingface/transformers/contribute) listing. It will give you a list of open issues that are beginner-friendly and help you start contributing to open-source. The best way to do that is to open a Pull Request and link it to the issue that you'd like to work on. We try to give priority to opened PRs as we can easily track the progress of the fix, and if the contributor does not have time anymore, someone else can take the PR over. For something slightly more challenging, you can also take a look at the [Good Second Issue](https://github.com/huggingface/transformers/labels/Good%20Second%20Issue) list. In general though, if you feel like you know what you're doing, go for it and we'll help you get there! \ud83d\ude80 All contributions are equally valuable to the community. \ud83e\udd70",
        "Fixing Issues": "### Fixing outstanding issues<br />If you notice an issue with the existing code and have a fix in mind, feel free to open a Pull Request!",
        "Submitting Issues or Feature Requests": "### Submitting a bug-related issue or feature request<br />Do your best to follow these guidelines when submitting a bug-related issue or a feature request. It will make it easier for us to come back to you quickly and with good feedback.<br />**Did you find a bug?**<br />The \ud83e\udd17 Transformers library is robust and reliable thanks to users who report the problems they encounter. Before you report an issue, we would really appreciate it if you could make sure the bug was not already reported (use the search bar on GitHub under Issues). Your issue should also be related to bugs in the library itself, and not your code. If you're unsure whether the bug is in your code or the library, please ask in the [forum](https://discuss.huggingface.co/) or on our [discord](https://discord.com/invite/hugging-face-879548962464493619) first. This helps us respond quicker to fixing issues related to the library versus general questions. [!TIP] We have a [docs bot](https://huggingface.co/spaces/huggingchat/hf-docs-chat), and we highly encourage you to ask all your questions there. There is always a chance your bug can be fixed with a simple flag \ud83d\udc7e\ud83d\udd2b Once you've confirmed the bug hasn't already been reported, please include the following information in your issue so we can quickly resolve it:<br />- Your OS type and version and Python, PyTorch and TensorFlow versions when applicable.<br />- A short, self-contained, code snippet that allows us to reproduce the bug in less than 30s.<br />- The full traceback if an exception is raised.<br />- Attach any other additional information, like screenshots, you think may help.<br />To get the OS and software versions automatically, run the following command:<br />```<br />transformers-cli env<br />```<br />You can also run the same command from the root of the repository:<br />```<br />python src/transformers/commands/transformers_cli.py env<br />```",
        "Requesting New Features": "### Do you want a new feature?<br />If there is a new feature you'd like to see in \ud83e\udd17 Transformers, please open an issue and describe:<br />- What is the motivation behind this feature?<br />- Is it related to a problem or frustration with the library? Is it a feature related to something you need for a project? Is it something you worked on and think it could benefit the community? Whatever it is, we'd love to hear about it!<br />- Describe your requested feature in as much detail as possible. The more you can tell us about it, the better we'll be able to help you.<br />- Provide a code snippet that demonstrates the features usage.<br />- If the feature is related to a paper, please include a link.<br />If your issue is well written we're already 80% of the way there by the time you create it. We have added [templates](https://github.com/huggingface/transformers/tree/main/templates) to help you get started with your issue.",
        "Implementing New Models": "### Do you want to implement a new model?<br />New models are constantly released and if you want to implement a new model, please provide the following information:<br />- A short description of the model and a link to the paper.<br />- Link to the implementation if it is open-sourced.<br />- Link to the model weights if they are available.<br />If you are willing to contribute the model yourself, let us know so we can help you add it to \ud83e\udd17 Transformers! We have a technical guide for [how to add a model to \ud83e\udd17 Transformers](https://huggingface.co/docs/transformers/add_new_model).",
        "Improving Documentation": "### Do you want to add documentation?<br />We're always looking for improvements to the documentation that make it more clear and accurate. Please let us know how the documentation can be improved such as typos and any content that is missing, unclear or inaccurate. We'll be happy to make the changes or help you make a contribution if you're interested! For more details about how to generate, build, and write the documentation, take a look at the documentation [README](https://github.com/huggingface/transformers/tree/main/docs).",
        "Creating a Pull Request": "### Create a Pull Request<br />Before writing any code, we strongly advise you to search through the existing PRs or issues to make sure nobody is already working on the same thing. If you are unsure, it is always a good idea to open an issue to get some feedback. You will need basic `git` proficiency to contribute to \ud83e\udd17 Transformers. While `git` is not the easiest tool to use, it has the greatest manual. Type `git --help` in a shell and enjoy! If you prefer books, [Pro Git](https://git-scm.com/book/en/v2) is a very good reference. You'll need [Python 3.9](https://github.com/huggingface/transformers/blob/main/setup.py#L449) or above to contribute to \ud83e\udd17 Transformers. Follow the steps below to start contributing:<br />- Fork the [repository](https://github.com/huggingface/transformers) by clicking on the [Fork](https://github.com/huggingface/transformers/fork) button on the repository's page. This creates a copy of the code under your GitHub user account.<br />- Clone your fork to your local disk, and add the base repository as a remote:<br />```<br />git clone git@github.com:<your Github handle>/transformers.git<br />cd transformers<br />git remote add upstream https://github.com/huggingface/transformers.git<br />```<br />- Create a new branch to hold your development changes:<br />```<br />git checkout -b a-descriptive-name-for-my-changes<br />```<br />\ud83d\udea8 Do not work on the `main` branch!<br />- Set up a development environment by running the following command in a virtual environment:<br />```<br />pip install -e \".[dev]\"<br />```<br />If \ud83e\udd17 Transformers was already installed in the virtual environment, remove it with `pip uninstall transformers` before reinstalling it in editable mode with the `-e` flag. Depending on your OS, and since the number of optional dependencies of Transformers is growing, you might get a failure with this command. If that's the case make sure to install the Deep Learning framework you are working with (PyTorch, TensorFlow and/or Flax) then do:<br />```<br />pip install -e \".[quality]\"<br />```<br />which should be enough for most use cases.<br />- Develop the features in your branch. As you work on your code, you should make sure the test suite passes. Run the tests impacted by your changes like this:<br />```<br />pytest tests/<TEST_TO_RUN>.py<br />```<br />For more information about tests, check out the [Testing](https://huggingface.co/docs/transformers/testing) guide. \ud83e\udd17 Transformers relies on `black` and `ruff` to format its source code consistently. After you make changes, apply automatic style corrections and code verifications that can't be automated in one go with:<br />```<br />make fixup<br />```<br />This target is also optimized to only work with files modified by the PR you're working on. If you prefer to run the checks one after the other, the following command applies the style corrections:<br />```<br />make style<br />```<br />\ud83e\udd17 Transformers also uses `ruff` and a few custom scripts to check for coding mistakes. Quality controls are run by the CI, but you can run the same checks with:<br />```<br />make quality<br />```<br />Finally, we have a lot of scripts to make sure we don't forget to update some files when adding a new model. You can run these scripts with:<br />```<br />make repo-consistency<br />```<br />To learn more about those checks and how to fix any issues with them, check out the [Checks on a Pull Request](https://huggingface.co/docs/transformers/pr_checks) guide. If you're modifying documents under the `docs/source` directory, make sure the documentation can still be built. This check will also run in the CI when you open a pull request. To run a local check make sure you install the documentation builder:<br />```<br />pip install \"[docs]\"<br />```<br />Run the following command from the root of the repository:<br />```<br />doc-builder build transformers docs/source/en --build_dir ~/tmp/test-build<br />```<br />This will build the documentation in the `~/tmp/test-build` folder where you can inspect the generated Markdown files with your favorite editor. You can also preview the docs on GitHub when you open a pull request. Once you're happy with your changes, add the changed files with `git add` and record your changes locally with `git commit`:<br />```<br />git add modified_file.py<br />git commit<br />```<br />Please remember to write [good commit messages](https://chris.beams.io/posts/git-commit/) to clearly communicate the changes you made! To keep your copy of the code up to date with the original repository, rebase your branch on `upstream/branch` before you open a pull request or if requested by a maintainer:<br />```<br />git fetch upstream<br />git rebase upstream/main<br />```<br />Push your changes to your branch:<br />```<br />git push -u origin a-descriptive-name-for-my-changes<br />```<br />If you've already opened a pull request, you'll need to force push with the `--force` flag. Otherwise, if the pull request hasn't been opened yet, you can just push your changes normally.<br />- Now you can go to your fork of the repository on GitHub and click on Pull Request to open a pull request. Make sure you tick off all the boxes on our checklist below. When you're ready, you can send your changes to the project maintainers for review.<br />- It's ok if maintainers request changes, it happens to our core contributors too! So everyone can see the changes in the pull request, work in your local branch and push the changes to your fork. They will automatically appear in the pull request.",
        "Pull Request Checklist": "### Pull request checklist<br />\u2610 The pull request title should summarize your contribution.<br />\u2610 If your pull request addresses an issue, please mention the issue number in the pull request description to make sure they are linked (and people viewing the issue know you are working on it).<br />\u2610 To indicate a work in progress please prefix the title with `[WIP]`. These are useful to avoid duplicated work, and to differentiate it from PRs ready to be merged.<br />\u2610 Make sure existing tests pass.<br />\u2610 If adding a new feature, also add tests for it.<br />- If you are adding a new model, make sure you use `ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)` to trigger the common tests.<br />- If you are adding new `@slow` tests, make sure they pass using `RUN_SLOW=1 python -m pytest tests/models/my_new_model/test_my_new_model.py`.<br />- If you are adding a new tokenizer, write tests and make sure `RUN_SLOW=1 python -m pytest tests/models/{your_model_name}/test_tokenization_{your_model_name}.py` passes.<br />- CircleCI does not run the slow tests, but GitHub Actions does every night!",
        "Public Methods and Non-Text Files": "### Public Methods and Non-Text Files<br />\u2610 All public methods must have informative docstrings (see [modeling_bert.py](https://github.com/huggingface/transformers/blob/main/src/transformers/models/bert/modeling_bert.py) for an example).<br />\u2610 Due to the rapidly growing repository, don't add any images, videos and other non-text files that'll significantly weigh down the repository. Instead, use a Hub repository such as [hf-internal-testing](https://huggingface.co/hf-internal-testing) to host these files and reference them by URL. We recommend placing documentation related images in the following repository: [huggingface/documentation-images](https://huggingface.co/datasets/huggingface/documentation-images). You can open a PR on this dataset repository and ask a Hugging Face member to merge it. For more information about the checks run on a pull request, take a look at our [Checks on a Pull Request](https://huggingface.co/docs/transformers/pr_checks) guide.",
        "Testing": "### Tests<br />An extensive test suite is included to test the library behavior and several examples. Library tests can be found in the [tests](https://github.com/huggingface/transformers/tree/main/tests) folder and examples tests in the [examples](https://github.com/huggingface/transformers/tree/main/examples) folder. We like `pytest` and `pytest-xdist` because it's faster. From the root of the repository, specify a path to a subfolder or a test file to run the test:<br />```<br />python -m pytest -n auto --dist=loadfile -s -v ./tests/models/my_new_model<br />```<br />Similarly, for the `examples` directory, specify a path to a subfolder or test file to run the test. For example, the following command tests the text classification subfolder in the PyTorch `examples` directory:<br />```<br />pip install -r examples/xxx/requirements.txt # only needed the first time<br />python -m pytest -n auto --dist=loadfile -s -v ./examples/pytorch/text-classification<br />```<br />In fact, this is actually how our `make test` and `make test-examples` commands are implemented (not including the `pip install`)! You can also specify a smaller set of tests in order to test only the feature you're working on. By default, slow tests are skipped but you can set the `RUN_SLOW` environment variable to `yes` to run them. This will download many gigabytes of models so make sure you have enough disk space, a good internet connection or a lot of patience! Remember to specify a path to a subfolder or a test file to run the test. Otherwise, you'll run all the tests in the `tests` or `examples` folder, which will take a very long time!<br />```<br />RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./tests/models/my_new_model<br />RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./examples/pytorch/text-classification<br />```<br />Like the slow tests, there are other environment variables available which are not enabled by default during testing:<br />- `RUN_CUSTOM_TOKENIZERS`: Enables tests for custom tokenizers. More environment variables and additional information can be found in the [testing_utils.py](https://github.com/huggingface/transformers/blob/main/src/transformers/testing_utils.py). \ud83e\udd17 Transformers uses `pytest` as a test runner only. It doesn't use any `pytest`-specific features in the test suite itself. This means `unittest` is fully supported. Here's how to run tests with `unittest`:<br />```<br />python -m unittest discover -s tests -t . -v<br />python -m unittest discover -s examples -t examples -v<br />```",
        "Style Guide": "### Style guide<br />For documentation strings, \ud83e\udd17 Transformers follows the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html). Check our [documentation writing guide](https://github.com/huggingface/transformers/tree/main/docs#writing-documentation---specification) for more information.",
        "Develop on Windows": "### Develop on Windows<br />On Windows (unless you're working in [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/) or WSL), you need to configure git to transform Windows `CRLF` line endings to Linux `LF` line endings:<br />```<br />git config core.autocrlf input<br />```<br />One way to run the `make` command on Windows is with MSYS2:<br />- [Download MSYS2](https://www.msys2.org/), and we assume it's installed in `C:\\msys64`.<br />- Open the command line `C:\\msys64\\msys2.exe` (it should be available from the Start menu).<br />- Run in the shell: `pacman -Syu` and install `make` with `pacman -S make`.<br />- Add `C:\\msys64\\usr\\bin` to your PATH environment variable. You can now use `make` from any terminal (PowerShell, cmd.exe, etc.)! \ud83c\udf89",
        "Syncing a Forked Repository": "### Sync a forked repository with upstream main (the Hugging Face repository)<br />When updating the main branch of a forked repository, please follow these steps to avoid pinging the upstream repository which adds reference notes to each upstream PR, and sends unnecessary notifications to the developers involved in these PRs.<br />- When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead, merge directly into the forked main.<br />- If a PR is absolutely necessary, use the following steps after checking out your branch:<br />```<br />git checkout -b your-branch-for-syncing<br />git pull --squash --no-commit upstream main<br />git commit -m '<your message without GitHub references>'<br />git push --set-upstream origin your-branch-for-syncing<br />```",
        "Setup Environment": "Usage Using the `cookiecutter` utility requires to have all the `dev` dependencies installed. Let's first [fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the `transformers` repo on github. Once it's done you can clone your fork and install `transformers` in our environment: <br /> ``` <br /> git clone https://github.com/YOUR-USERNAME/transformers <br /> cd transformers <br /> pip install -e \"[dev]\" <br /> ```",
        "Generate Template": "Once the installation is done, you can generate the template by running the following command. Be careful, the template will be generated inside a new folder in your current working directory. <br /> ``` <br /> cookiecutter path-to-the folder/adding_a_missing_tokenization_test/ <br /> ``` <br /> You will then have to answer some questions about the tokenizer for which you want to add tests. The `modelname` should be cased according to the plain text casing, i.e., BERT, RoBERTa, DeBERTa. Once the command has finished, you should have a one new file inside the newly created folder named `test_tokenization_Xxx.py`. At this point the template is finished and you can move it to the sub-folder of the corresponding model in the test folder."
    },
    "flow": [
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Introduction to Contribution"
                }
            ],
            "sequence": "Introduction to Contribution"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Ways to Contribute"
                }
            ],
            "sequence": "Ways to Contribute"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Fixing Issues"
                }
            ],
            "sequence": "Fixing Issues"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Submitting Issues or Feature Requests"
                }
            ],
            "sequence": "Submitting Issues or Feature Requests"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Requesting New Features"
                },
                {
                    "source": "Requesting New Features",
                    "target": "Setup Environment",
                    "edge_label": "templates/adding_a_missing_tokenization_test/README.md"
                },
                {
                    "source": "Setup Environment",
                    "target": "Generate Template",
                    "edge_label": "templates/adding_a_missing_tokenization_test/README.md"
                }
            ],
            "sequence": "Requesting New Features"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Implementing New Models"
                }
            ],
            "sequence": "Implementing New Models"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Improving Documentation"
                }
            ],
            "sequence": "Improving Documentation"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Creating a Pull Request"
                }
            ],
            "sequence": "Creating a Pull Request"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Pull Request Checklist"
                }
            ],
            "sequence": "Pull Request Checklist"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Public Methods and Non-Text Files"
                }
            ],
            "sequence": "Public Methods and Non-Text Files"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Testing"
                }
            ],
            "sequence": "Testing"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Style Guide"
                }
            ],
            "sequence": "Style Guide"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Develop on Windows"
                }
            ],
            "sequence": "Develop on Windows"
        },
        {
            "edges": [
                {
                    "source": "Contributing to transformers",
                    "target": "Syncing a Forked Repository"
                }
            ],
            "sequence": "Syncing a Forked Repository"
        }
    ],
    "links": {
        "Introduction to Contribution": [
            "https://github.com/huggingface/transformers/blob/main/CODE_OF_CONDUCT.md",
            "https://github.com/scikit-learn/scikit-learn/blob/main/CONTRIBUTING.md"
        ],
        "Ways to Contribute": [
            "https://github.com/huggingface/transformers/contribute",
            "https://github.com/huggingface/transformers/labels/Good%20Second%20Issue"
        ],
        "Fixing Issues": [],
        "Submitting Issues or Feature Requests": [
            "https://discuss.huggingface.co/",
            "https://discord.com/invite/hugging-face-879548962464493619",
            "https://huggingface.co/spaces/huggingchat/hf-docs-chat"
        ],
        "Requesting New Features": [
            "https://github.com/huggingface/transformers/tree/main/templates"
        ],
        "Implementing New Models": [
            "https://huggingface.co/docs/transformers/add_new_model"
        ],
        "Improving Documentation": [
            "https://github.com/huggingface/transformers/tree/main/docs"
        ],
        "Creating a Pull Request": [
            "https://git-scm.com/book/en/v2",
            "https://github.com/huggingface/transformers/blob/main/setup.py#L449",
            "https://github.com/huggingface/transformers",
            "https://github.com/huggingface/transformers/fork",
            "https://huggingface.co/docs/transformers/testing",
            "https://huggingface.co/docs/transformers/pr_checks",
            "https://chris.beams.io/posts/git-commit/"
        ],
        "Pull Request Checklist": [],
        "Public Methods and Non-Text Files": [
            "https://github.com/huggingface/transformers/blob/main/src/transformers/models/bert/modeling_bert.py",
            "https://huggingface.co/hf-internal-testing",
            "https://huggingface.co/datasets/huggingface/documentation-images",
            "https://huggingface.co/docs/transformers/pr_checks"
        ],
        "Testing": [
            "https://github.com/huggingface/transformers/tree/main/tests",
            "https://github.com/huggingface/transformers/tree/main/examples",
            "https://github.com/huggingface/transformers/blob/main/src/transformers/testing_utils.py"
        ],
        "Style Guide": [
            "https://google.github.io/styleguide/pyguide.html",
            "https://github.com/huggingface/transformers/tree/main/docs#writing-documentation---specification"
        ],
        "Develop on Windows": [
            "https://learn.microsoft.com/en-us/windows/wsl/",
            "https://www.msys2.org/"
        ],
        "Syncing a Forked Repository": []
    }
}