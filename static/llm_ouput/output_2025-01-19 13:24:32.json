{
    "No categories identified.": {
        "content": {
            "Contribution Guide": "Thanks for taking the time to contribute to MDN Web Docs! :tada: <br /> This document covers project setup steps along with a set of guidelines for contributing to MDN Web Docs content. <br /> Everyone participating in this project is expected to follow our Code of Conduct, which means adhering to Mozilla's Community Participation Guidelines. <br /> If you want to jump right in, see Getting started with MDN Web Docs for an overview of how to join, and the Contribute page on MDN for a filtered list of tasks.",
            "Adding a New Document": "Adding a new document is relatively straightforward, especially if you can start by copying the index.md of a similar document. <br /> There are a few things to keep in mind: <br /> - Documents must be written in Markdown. <br /> - A document is represented by an index.md file. <br /> - If you're creating a new CSS document for a property called foo, create a new folder files/en-us/web/css/foo/ and put the Markdown file in this folder (files/en-us/web/css/foo/index.md). <br /> - A document's index.md file must start with front-matter that defines the title, slug, and, most of the time, page-type."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Contribution Guide"
                },
                {
                    "source": "Contribution Guide",
                    "target": "Adding a New Document"
                }
            ]
        }
    },
    "SC \u2013 Submit the changes": {
        "content": {
            "Making Changes": "This will make it easier to submit a pull request for your changes. <br /> [!NOTE] Open a discussion if your changes will contain large, complex or structural changes. Ask for feedback before embarking on large tasks. <br /> 1. When the server is running, make the changes you would like to make to one or more index.md files. <br /> 2. Open a browser and navigate to the equivalent pages you've changed. If you changed files/en-us/web/javascript/index.md, you would navigate to http://localhost:5042/en-us/docs/web/javascript in your browser, for example. <br /> 3. Check for detected flaws at the top of the previewed page. Some flaws may be automatically fixable. <br /> 4. Commit your changes to the branch (our example is using the fix-typo branch) and push the changes to your fork's remote: <br /> # Adding all files to the commit <br /> git add . <br /> Linting edited files <br /> To ensure that all MDN documents follow the same formatting, we use both Prettier and MarkdownLint to format and lint Markdown files. This helps us enforce uniform styling across all documents with minimal reviewer intervention. <br /> If you have a local checkout of the repository and have installed the dependencies, or you are using github.dev, a pre-commit hook will be installed which automatically runs while making a commit. <br /> To save some headache and improve your work flow while authoring, you may wish to configure your editor to automatically run Prettier. Alternatively, you may run yarn fix:md in the command line to manually format all Markdown files. <br /> [!NOTE] Automatically formatting changes does not work for pull requests opened using the GitHub Web UI as described in the \"Simple changes\" section. This may result in failed status checks on pull requests.",
            "Deleting and Redirecting Content": "Run the yarn content delete command and redirect all deleted documents. <br /> yarn content delete Learn/Accessibility --recursive --redirect Web/Accessibility <br /> [!WARNING] You should always add a redirect when deleting documents. If there is no obvious alternative, redirect to the nearest \"parent\" of the deleted topic. If you forget to redirect when deleting a file, you can do it afterwards. See the Redirecting a document section. <br /> Commit all of the changes and push your branch to the remote. <br /> Redirecting a document <br /> If you are moving a document as shown above you don't need to create a redirect. However, you may need to do so when fixing a broken link or after deleting a document without the --redirect flag. You may do this by using the yarn content add-redirect command.",
            "Creating a Pull Request": "Add a redirect with yarn content add-redirect. The target page can be a page on MDN or an external URL: <br /> yarn content add-redirect /en-US/path/of/deleted/page /en-US/path/of/target/page <br /> Commit all of the changed files and pushing your branch to your fork: <br /> Creating a pull request <br /> Once you've made your changes and pushed them to a branch on your fork, you can create a pull request to propose your changes to the mdn/content repository. Someone from the MDN team or the MDN Web Docs community will review your changes and provide feedback. For details on what to do next, see the pull request etiquette section to see how to handle pull requests and get your content merged successfully. <br /> Pull request etiquette <br /> This is the exciting part of contributing to MDN as you're almost done with the contribution process!",
            "Review and Approval": "Here are some things to keep in mind at this point: <br /> - Your pull request must be reviewed and approved before it's merged into the main branch. <br /> - You do not need to request a review; one or more reviewers will be selected for you automatically. <br /> - It can be up to 48 hours for merged pull requests to have their changes published to MDN Web Docs. <br /> During reviews, you may be asked to answer questions about your work or to make changes to your suggested edits. This is a common part of the process of making changes in open source projects. <br /> There are some important rules of etiquette to remember that will help during the review stage. <br /> 1. Check tests that are run automatically for pull requests (see .github/workflows). If one or more of these tests fail, you must fix them. Your pull request will not be approved and merged if there are failing tests. If you don't know how to resolve the underlying issue(s), you can ask for help. <br /> 2. Resolve conflicts if your pull request has merge conflicts with the main branch. This is usually done by merging the main branch into your feature branch (git pull upstream main), and then pushing the updated branch to your fork (git push). <br /> 3. Group logical changes in each pull request so that it contains a single change or a related set of changes. If a pull request becomes too large or contains too many unrelated changes, a reviewer may close your pull request and ask you to submit a new pull request for each set of changes. <br /> 4. Don't re-open pull requests closed by a reviewer. <br /> 5. Don't use git rebase of main over your branch. Your changes are replayed on top of the current main branch at that point in time. This might confuse reviewers as notifications on GitHub lead to nowhere. <br /> License <br /> When contributing to the content you agree to license your contributions according to our license."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Making Changes"
                },
                {
                    "source": "Making Changes",
                    "target": "Deleting and Redirecting Content"
                },
                {
                    "source": "Deleting and Redirecting Content",
                    "target": "Creating a Pull Request"
                },
                {
                    "source": "Creating a Pull Request",
                    "target": "Review and Approval"
                }
            ]
        }
    },
    "CF \u2013 Contribution flow": {
        "content": {
            "Getting Started": "**Getting started**<br />Before contributing, make sure you're familiar with the project guidelines and conventions:<br />- **Writing guidelines** - This page covers everything from how and what we write to general project guidelines.<br />- **Writing style guide** - This covers the language and style we use and how we write and format code examples.<br />- **How to write in Markdown** - This covers the Markdown features we support on MDN and custom extensions we've added.",
            "Prerequisite Knowledge": "**Prerequisite knowledge**<br />We expect contributors to MDN to have some knowledge of web technologies before working on content. We've put together relevant resources to get up to speed on specific topics before contributing:<br />- **Open source**: If you're new to open source projects, see the Open source etiquette page.<br />- **Git and GitHub**: If you are unfamiliar with these, see the section Getting ready to contribute to get pointers on where to start.<br />- **Web technologies**: HTML, CSS, JavaScript, and more are covered in our Learn web development tutorials.<br />- **MDN repositories**: To find out where everything lives in various MDN repositories, see our MDN Web Docs repositories page.",
            "Documentation Conventions": "**Documentation conventions**<br />There are a few things to keep in mind about content on MDN and how it is maintained:<br />- A document's content is written in an index.md file.<br />- A document's index.md starts with \"front-matter\" described in Front-matter.<br />- Documents have corresponding folders (the JavaScript page's index.md is in files/en-us/web/javascript, for example).<br />- Document folders may contain images referenced by the index.md file in that folder.<br />- A document folder may contain child folders with child documents (e.g., files/en-us/web/javascript/closures/index.md).<br />- Redirects are specified in _redirects.txt."
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Getting Started"
                },
                {
                    "source": "Getting Started",
                    "target": "Prerequisite Knowledge"
                },
                {
                    "source": "Prerequisite Knowledge",
                    "target": "Documentation Conventions"
                }
            ]
        }
    },
    "BW \u2013 Build local workspace": {
        "content": {
            "Front Matter": "### Front Matter<br />Do not edit this file manually! See Moving documents for details. Front matter Each document's index.md starts with front-matter, which is written in YAML. The YAML is read by the MDN build system and is used to read the metadata of a document. The front-matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines (---). Front-matter defines the document's title and slug, and may also include status, browser-compat and specification information. Here's an example of front-matter from the JavaScript page: ---",
            "Setting Up Git and GitHub": "### Setting Up Git and GitHub<br />You'll need a GitHub account to contribute to MDN Web Docs. If you are comfortable working with git and GitHub, you can skip ahead to Contributing to MDN. If you've created a new GitHub account and want to know what to do next, you can choose one of the following ways to manage changes:<br />- GitHub UI - This is the easiest way to contribute small changes described in Simple changes.<br />- GitHub Desktop - A desktop app for managing interaction with GitHub.<br />- GitHub CLI - A command-line wrapper for interacting with GitHub.<br />- git - You can use git from the command line to interact with GitHub. The examples in this document assume you are using this method. The git cheat sheet and Using Git guide are useful resources for beginners and advanced users.",
            "Simple Changes": "### Simple Changes<br />If you want to make a small change like fixing a typo, the GitHub UI is the easiest way to get started. If you've found a typo on the JavaScript landing page, for example, you can propose a fix as follows:<br />1. Sign in to GitHub<br />2. Navigate to https://github.com/mdn/content<br />3. Find the source file, in this case files/en-us/web/javascript/index.md<br />From there, the GitHub UI will walk you through the rest by creating a fork and a branch to commit your changes to. After you have made changes to your branch, open a pull request with your changes to be incorporated. A pull request represents the work you want to be reviewed, approved, and merged into the main branch of the MDN repository. See the Creating a pull request for more details on creating and handling pull requests successfully. If you're not certain of the changes that you want to make, get in touch with us! [!NOTE] You can click the View the source on GitHub link at the bottom of an MDN page to jump directly to the page source on GitHub.",
            "Forking and Cloning the Repository": "### Forking and Cloning the Repository<br />If you want to make changes to more than one file, the GitHub UI is not very efficient because you have to make separate pull requests for each file you want to change. Instead of using the GitHub UI, you need to use git or a client like the GitHub Desktop or GitHub CLI. The following examples are using plain git commands, but you can use any of the clients mentioned above to perform the equivalent actions. To fork and clone the repository:<br />1. Create a fork of the mdn/content repository to freely experiment with branches and changes. Assuming your GitHub username is octocat, your fork would be a copy of the mdn/content repository in your account at https://github.com/octocat/content.<br />2. Clone your fork to your local machine. Assuming your GitHub username is octocat, you would do something like this:<br /># starting in a directory of your choice<br />cd ~/repos<br /># clone your fork of the repository<br />git clone git@github.com:octocat/content.git<br />3. Create a remote to keep your clone and fork (https://github.com/octocat/content) up-to-date. This example adds a remote named upstream, but you can name it mdn or any other name you like.<br /># starting in your clone directory<br />cd ~/repos/content<br />git remote add upstream git@github.com:mdn/content.git<br />When you run git remote -v, you'll see that you have two remotes: upstream and origin. The origin remote is your fork (https://github.com/octocat/content) and the upstream remote is the mdn/content repository.<br />4. Keep your fork up-to-date often. You can do this by fetching the latest changes from the mdn/content repository and merging them into your fork.<br />cd ~/repos/content<br /># checkout your local clone's main branch<br />git checkout main<br />git fetch upstream<br /># merge the latest content from the main branch of the mdn repository<br />git merge upstream/main<br />5. Create a branch for your changes. This example creates a branch named fix-typo:",
            "Contributing to MDN": "### Contributing to MDN<br />The previous sections describe how to get started using the GitHub UI to make small changes to a single file and how to create a fork and clone the repository to prepare for making larger changes. This section describes how to build the project locally and how to prepare your changes for submission.",
            "Preparing the Project": "### Preparing the Project<br />To serve the site locally, you need to have Node.js and Yarn 1 (Classic) installed. You can check if these are installed by running the following commands:<br />node -v<br />yarn -v<br />After you have installed Node.js and Yarn, you can install the dependencies using yarn:<br /># Assuming your fork is in ~/repos/content<br />cd ~/repos/content<br />yarn",
            "Running the Project": "### Running the Project<br />After you have installed all dependencies, you can start the local preview using yarn start:<br />yarn start<br />Once started, a live preview is available at http://localhost:5042/<br />Set your preferred editor by adding EDITOR=... into a .env file in the project root. To specify VS Code as your preferred editor, for example, use the following command:<br />echo 'EDITOR=code' >> .env<br />You can set the EDITOR environment variable to any editor you like. When browsing a page server locally, you can press Open in your editor to edit the current file in your preferred editor.",
            "Editing Files and Tracking Changes in Git": "### Editing Files and Tracking Changes in Git<br />To edit files and track your changes, you should use feature branches. Feature branches are created from the main branch and should be named after the feature you're working on.",
            "Moving Documents": "### Moving Documents<br />Let's say you want to move the entire /en-US/Learn/Accessibility tree to /en-US/Learn/A11y, you can do so as follows:<br />1. Starting from a fresh branch:<br />cd ~/repos/content<br /># Fetch the latest changes from the main branch on mdn/content<br />git fetch upstream<br />git checkout main<br />git merge upstream/main<br /># create a new branch for your work<br />git checkout -b moving-a11y"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Front Matter"
                },
                {
                    "source": "Front Matter",
                    "target": "Setting Up Git and GitHub"
                },
                {
                    "source": "Setting Up Git and GitHub",
                    "target": "Simple Changes"
                },
                {
                    "source": "Simple Changes",
                    "target": "Forking and Cloning the Repository"
                },
                {
                    "source": "Forking and Cloning the Repository",
                    "target": "Contributing to MDN"
                },
                {
                    "source": "Contributing to MDN",
                    "target": "Preparing the Project"
                },
                {
                    "source": "Preparing the Project",
                    "target": "Running the Project"
                },
                {
                    "source": "Running the Project",
                    "target": "Editing Files and Tracking Changes in Git"
                },
                {
                    "source": "Editing Files and Tracking Changes in Git",
                    "target": "Moving Documents"
                }
            ]
        }
    },
    "DC \u2013 Deal with the code": {
        "content": {
            "Refer to Front-Matter": "You might find it helpful to refer to the front-matter within a similar document's index.md.<br />",
            "Moving Documents": "Moving documents is made easier with the `yarn content move` command. This command moves the file and fixes up redirects automatically.<br />**Usage:**<br />`yarn content move <from-slug> <to-slug> [locale]`<br />**Warning:** Don't edit the `_redirects.txt` file manually. See the Redirecting a document section for more information.<br />",
            "Updating References": "Once files are moved, update references to those files in other content files as well.<br />**Command:**<br />`node scripts/update-moved-file-links.js`<br />",
            "Committing Changes": "Commit all the changes and push your branch to the remote.<br />",
            "Deleting Documents": "Delete documents or a tree of documents using the `yarn content delete` command.<br />**Usage:**<br />`yarn content delete <document-slug> [locale] --redirect <redirect-slug-or-url>`<br />**Warning:** Don't delete files or directories from the repository manually; the command handles necessary changes.<br />"
        },
        "flow": {
            "edges": [
                {
                    "source": "Parent Node",
                    "target": "Refer to Front-Matter"
                },
                {
                    "source": "Refer to Front-Matter",
                    "target": "Moving Documents"
                },
                {
                    "source": "Moving Documents",
                    "target": "Updating References"
                },
                {
                    "source": "Updating References",
                    "target": "Committing Changes"
                },
                {
                    "source": "Committing Changes",
                    "target": "Deleting Documents"
                }
            ]
        }
    }
}