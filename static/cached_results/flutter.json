{
    "content": {
        "Getting Started": "### Contributing to Flutter<br />**tl;dr:** Join [Discord](./docs/contributing/Chat.md), be [courteous](CODE_OF_CONDUCT.md), follow the steps below to set up a development environment; if you stick around and contribute, you can [join the team](./docs/contributing/Contributor-access.md) and get commit access.<br /><br />### Welcome<br />We invite you to join the Flutter team, which is made up of volunteers and sponsored folk alike! There are many ways to contribute, including writing code, filing issues on GitHub, helping people on our mailing lists, our chat channels, or on Stack Overflow, helping to triage, reproduce, or fix bugs that people have filed, adding to our documentation, doing outreach about Flutter, or helping out in any other way. We grant commit access (which includes full rights to the issue database, such as being able to edit labels) to people who have gained our trust and demonstrated a commitment to Flutter. For more details see the [Contributor access](./docs/contributing/Contributor-access.md) page in our docs. We communicate primarily over GitHub and [Discord](./docs/contributing/Chat.md). Before you get started, we encourage you to read these documents which describe some of our community norms:<br />- [Our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitly that everyone must be gracious, respectful, and professional. This also documents our conflict resolution policy and encourages people to ask questions.<br />- [Values](./docs/about/Values.md), which talks about what we care most about.",
        "Issue Triage": "### Helping out in the issue database<br />Triage is the process of going through bug reports and determining if they are valid, finding out how to reproduce them, catching duplicate reports, and generally making our issues list useful for our engineers. If you want to help us triage, you are very welcome to do so!<br />- Join the #hackers-triage [Discord channel](./docs/contributing/Chat.md).<br />- Read [our code of conduct](CODE_OF_CONDUCT.md), which stipulates explicitly that everyone must be gracious, respectful, and professional. If you're helping out with triage, you are representing the Flutter team, and so you want to make sure to make a good impression!<br />- Help out as described in our [triage guide](./docs/triage/README.md).<br />You won't be able to add labels at first, so instead start by trying to do the other steps, e.g. trying to reproduce the problem and asking for people to provide enough details that you can reproduce the problem, pointing out duplicates, and so on. Chat on the #hackers-triage channel to let us know what you're up to!<br />- Familiarize yourself with our [issue hygiene](./docs/contributing/issue_hygiene/README.md) wiki page, which covers the meanings of some important GitHub labels and milestones.<br />- Once you've been doing this for a while, someone will invite you to the flutter-hackers team on GitHub and you'll be able to add labels too. See the [contributor access](./docs/contributing/Contributor-access.md) wiki page for details.",
        "Quality Assurance": "### Quality Assurance<br />One of the most useful tasks, closely related to triage, is finding and filing bug reports. Testing beta releases, looking for regressions, creating test cases, adding to our test suites, and other work along these lines can really drive the quality of the product up. Creating tests that increase our test coverage, writing tests for issues others have filed, all these tasks are really valuable contributions to open source projects. If this interests you, you can jump in and submit bug reports without needing anyone's permission! The #quality-assurance channel on our [Discord server](./docs/contributing/Chat.md) is a good place to talk about what you're doing. We're especially eager for QA testing when we announce a beta release. See [quality assurance](./docs/releases/Quality-Assurance.md) for more details. If you want to contribute test cases, you can also submit PRs. See the next section for how to set up your development environment, or ask in #hackers-test on Discord. As a personal side note, this is exactly the kind of work that first got me into open source. I was a Quality Assurance volunteer on the Mozilla project, writing test cases for browsers, long before I wrote a line of code for any open source project. \u2014Hixie",
        "Development": "### Developing for Flutter<br />If you prefer to write code, consider starting with the list of good first issues for [Flutter](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or for [Flutter DevTools](https://github.com/flutter/devtools/labels/good%20first%20issue). Reference the respective sections below for further instructions.<br /><br />#### Framework and Engine<br />To develop for Flutter, you will eventually need to become familiar with our processes and conventions. This section lists the documents that describe these methodologies. The following list is ordered: you are strongly recommended to go through these documents in the order presented.<br />- [Setting up your engine development environment](./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md), which describes the steps you need to configure your computer to work on Flutter's engine. If you only want to write code for the Flutter framework, you can skip this step. Flutter's engine mainly uses C++, Java, and Objective-C.<br />- [Setting up your framework development environment](./docs/contributing/Setting-up-the-Framework-development-environment.md), which describes the steps you need to configure your computer to work on Flutter's framework. Flutter's framework mainly uses Dart.<br />- [Tree hygiene](./docs/contributing/Tree-hygiene.md), which covers how to land a PR, how to do code review, how to handle breaking changes, how to handle regressions, and how to handle post-commit test failures.<br />- [Our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md), which includes advice for designing APIs for Flutter, and how to format code in the framework.<br />- [Flutter design doc template](https://flutter.dev/go/template), which should be used when proposing a new technical design. This is a good practice to do before coding more intricate changes. See also our [guidance for writing design docs](./docs/contributing/Design-Documents.md).<br />In addition to the documents, there is a video linked above on How to contribute to Flutter from the [Flutter](https://youtube.com/c/flutterdev) YouTube channel, there are many pages in [our docs](./docs/README.md), and an article [Contributing to Flutter: Getting Started](https://medium.com/@ayushbherwani/contributing-to-flutter-getting-started-a0db68cbcd5b) on Medium that may be of interest. For a curated list of pages see the sidebar on the wiki's home page. They are more or less listed in order of importance.<br /><br />#### DevTools<br />Contributing code to Dart & Flutter DevTools may be a good place to start if you are looking to dip your toes into contributing with a relatively low-cost setup or if you are generally excited about improving the Dart & Flutter developer experience. Please see the DevTools [CONTRIBUTING.md](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md) guide to get started.<br /><br />#### Helping with existing PRs<br />Once you've learned the process of contributing, if you aren't sure what to work on next you might be interested in helping other developers complete their contributions by picking up an incomplete patch from the list of [issues with partial patches](https://github.com/flutter/flutter/labels/has%20partial%20patch).",
        "Outreach": "### Outreach<br />If your interests lie in the direction of developer relations and developer outreach, whether advocating for Flutter, answering questions in fora like [Stack Overflow](https://stackoverflow.com/questions/tagged/flutter?sort=Newest&filters=NoAnswers,NoAcceptedAnswer&edited=true) or [Reddit](https://www.reddit.com/r/flutterhelp/new/?f=flair_name%3A%22OPEN%22), or creating content for our [documentation](https://docs.flutter.dev/) or sites like [YouTube](https://www.youtube.com/results?search_query=flutter&sp=EgQIAxAB), the best starting point is to join the #hackers-devrel [Discord channel](./docs/contributing/Chat.md). From there, you can describe what you're interested in doing, and go ahead and do it! As others become familiar with your work, they may have feedback, be interested in collaborating, or want to coordinate their efforts with yours.",
        "API Documentation": "### API documentation<br />Another great area to contribute in is sample code and API documentation. If this is an area that interests you, join our [Discord](./docs/contributing/Chat.md) server and introduce yourself on the #hackers-devrel, #hackers-framework, or #hackers-engine channels, describing your area of interest. As our API docs are integrated into our source code, see the \"developing for Flutter\" section above for a guide on how to set up your developer environment. To contribute API documentation, an excellent command of the English language is particularly helpful, as is a careful attention to detail. We have a [whole section in our style guide](./docs/contributing/Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc) that you should read before you write API documentation. It includes notes on the \"Flutter Voice\", such as our word and grammar conventions. In general, a really productive way to improve documentation is to use Flutter and stop any time you have a question: find the answer, then document the answer where you first looked for it. We also keep [a list of areas that need better API documentation](https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22d%3A+api+docs%22+sort%3Areactions-%2B1-desc). In many cases, we have written down what needs to be said in the relevant issue, we just haven't gotten around to doing it! We're especially eager to add sample code and diagrams to our API documentation. Diagrams are generated from Flutter code that draws to a canvas, and stored in a [special repository](https://github.com/flutter/assets-for-api-docs/#readme). It can be a lot of fun to create new diagrams for the API docs.",
        "Releases and Social Events": "### Releases<br />If you are interested in participating in our release process, which may involve writing release notes and blog posts, coordinating the actual generation of binaries, updating our release tooling, and other work of that nature, then reach out on the #hackers-releases channel of our [Discord](./docs/contributing/Chat.md) server.<br /><br />### Social events in the contributor community<br />Finally, one area where you could have a lot of impact is in contributing to social interactions among the Flutter contributor community itself. This could take the form of organizing weekly video chats on our Discord, or planning tech talks from contributors, for example. If this is an area that is of interest to you, please join our [Discord](./docs/contributing/Chat.md) and ping Hixie on the #hackers channel!",
        "Code of Conduct": "The Flutter project expects Flutter's contributors to act professionally and respectfully. Flutter contributors are expected to maintain the safety and dignity of Flutter's social environments (such as GitHub and Discord). Specifically:<br />- Respect people, their identities, their culture, and their work.<br />- Be kind. Be courteous. Be welcoming.<br />- Listen. Consider and acknowledge people's points before responding.<br />Should you experience anything that makes you feel unwelcome in Flutter's community, please contact [conduct@flutter.dev](mailto:conduct@flutter.dev) or, if you prefer, directly contact someone on the project, for instance [Hixie](mailto:ian@hixie.ch).<br />The Flutter project will not tolerate harassment in Flutter's community, even outside of Flutter's public communication channels.",
        "Conflict Resolution": "When multiple contributors disagree on the direction for a particular patch or the general direction of the project, the conflict should be resolved by communication. The people who disagree should get together, try to understand each other's points of view, and work to find a design that addresses everyone's concerns. This is usually sufficient to resolve issues. If you cannot come to an agreement, ask for the advice of a more senior member of the project. Be wary of agreement by attrition, where one person argues a point repeatedly until other participants give up in the interests of moving on. This is not conflict resolution, as it does not address everyone's concerns. Be wary of agreement by compromise, where two good competing solutions are merged into one mediocre solution. A conflict is addressed when the participants agree that the final solution is better than all the conflicting proposals. Sometimes the solution is more work than either of the proposals. [Embrace the yak shave](./docs/contributing/Style-guide-for-Flutter-repo.md#lazy-programming).",
        "Questions": "It's always ok to ask questions. Our systems are large, and nobody will be an expert in all the systems. Once you find the answer, document it in the first place you looked. That way, the next person will be brought up to speed even quicker. Source: [xkcd, May 2012](https://xkcd.com/1053/)",
        "Core Values": "### Flutter's Core Values \ud83c\udfd7\ufe0f <br /> - **Build the best way to develop user interfaces.** <br /> This tells us what we are creating. It helps narrow our focus. The best way to develop user interfaces is a productive way of developing. The best way to develop user interfaces creates beautiful applications. The best way to develop user interfaces creates fast applications. The best way to develop user interfaces enables developers to create applications fast. The best way to develop user interfaces is extensible, so that we are not a barrier to developers. <br /> - **Focus on the user and all else will follow.** <br /> Our user is the developer. Our developer's user is the end user of the application written with Flutter. Our first priority is to our developer's user, the end user. Our second priority is to our user, the developer. Caring about the end user means having high quality support for accessibility, top performance, stability, high fidelity and compatibility with the user's platform, supporting low-end devices, and so forth. Caring about the developer means creating a joyful and productive development experience with quick iteration cycles, creating usable, simple, reliable, predictable APIs, giving the developer full access to the underlying platform, and so forth.",
        "Openness": "### Openness \ud83d\udcd6 <br /> Flutter is an open source project, in the full senses of the word: we are open to ideas, we are open to contributions, our code and our roadmap are open, our priorities are open. Transparency leads to a higher quality product. While the most active part of our team is currently primarily formed of employees from Google, we are growing and welcome anyone to join the team; at this point, the majority of people with commit access are not part of Google's Flutter team. Flutter's stewardship is managed by a team at Google.",
        "Maintaining Quality": "### Maintaining Quality \ud83d\udcab <br /> A mediocre product cannot be the best way to develop user interfaces, so we must build processes around maintaining high levels of quality. This manifests in various ways. One is that we are feature-driven, not date-driven: we do not plan work based on deadlines. We may sometimes host events where we announce new features, but these events will announce features that have become available, rather than the features becoming available in order to be announced. This means sometimes a feature we intended to announce will slip and not be announced, but we prefer this to announcing a rushed feature. We may sometimes gate features behind flags until we are confident of their quality.",
        "Having Fun": "### Have Fun Doing It \ud83e\udd23 <br /> Last, but definitely not least, we want to make sure that our work environment is pleasant for everyone involved. Your health and the health of your family and friends is more important than Flutter. Our community [is welcoming](../../CODE_OF_CONDUCT.md). We don't know everything; all of us can make mistakes. We want team members to feel empowered to make changes to the code and to our processes. We encourage a bias towards action. It's better to try something and be wrong, than to plan forever and never execute.",
        "Support": "### Support <br /> When we think about whether we claim to \"support\" something, e.g. whether Flutter supports Windows 7, we use the following frame of reference. We document [which platforms we consider to fall into each category](https://docs.flutter.dev/reference/supported-platforms) on flutter.dev. <br /> **Areas of support** <br /> We distinguish several categories along which one can describe a level of support: <br /> - Supporting for deployment (we support a platform for deployment if you can run release builds of applications on that platform). <br /> - Supporting for development (we support a platform for development if you can run debug builds of applications on that platform, connect them to a debugger, hot reload, view logs, and so forth; we support a plugin for development if it can be stepped through in a debugger). <br /> - Supporting for hosting development (we support a platform for hosting development if it is one on which you can compile a Flutter application; we support an IDE for hosting development if it has a Flutter plugin). <br /> - Supporting for Flutter development (we support a platform for Flutter development if one can contribute to Flutter itself from that platform). <br /> The list of supported platforms on flutter.dev is describing the platforms supported for deployment. <br /> **Levels of support** <br /> For each area, we consider the level to which we provide support: <br /> - We will literally help you with your code if things don't work. This is very rare. (See also \"[top-tier customers](../contributing/issue_hygiene/README.md#customers)\"). <br /> - We will make a best effort to ensure that well written code works (e.g. we have testing on that platform). This is a common level for target platforms that have reached a label of \"stable\" (e.g. Android, iOS) on devices that are widely available (e.g. 64bit ARM). This corresponds to the \"Supported Google-tested platforms\" category on the list of supported platforms. <br /> - We will not go out of our way to prevent code from working, but if it works it's because of luck and our best intentions rather than a coordinated effort (e.g. we do no testing on that platform). This is a common level of support for less commonly-used devices. For example, we do minimal testing of 32bit iOS devices. This corresponds to the \"Best effort platforms tested by the community\" category on the list of supported platforms. <br /> - We will pay no attention to whether code works, but we will accept patches that are easy to reason about. This is a common level of support for the many esoteric embedded platforms that we have no way to even manually test. For example, if you have your own SoC and are running Flutter, we want you to succeed but we don't have any way to ensure it keeps working. At this level, we would not accept what we consider \"risky\" PRs, or PRs that involve significant refactorings. If you are willing to provide reliable CI support for your platform, we are more than happy to work with you to move that platform to level 2 (at which point more invasive PRs become viable). <br /> - We won't accept patches. This is the appropriate response for features and platforms that are wildly outside our roadmap. For example, maintaining a Rust port of the framework is not something the Flutter project would accept patches for. This corresponds to the \"Unsupported platforms\" category on the list of supported platforms.",
        "Resources": "### See Also \ud83d\udc99 <br /> - [Code of Conduct](../../CODE_OF_CONDUCT.md) <br /> - [Contributor Guide](../../CONTRIBUTING.md) <br /> - [Flutter's Culture of Inclusivity](https://flutter.dev/culture) <br /> - [Flutter culture and how to preserve it](https://medium.com/flutter/flutter-culture-and-how-to-preserve-it-436b4ed1031d)",
        "Discord Communication": "### Chatting on Discord<br />The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148). [This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH). Please do not share either link directly, instead share links to this page. The server is open to the public, though some channels are intended only for people who are actively contributing. See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there). We recommend you use the same display name on Discord and GitHub. (Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on. When in doubt, remember: our server has Dash as an icon!)",
        "Channel Overview": "### Existing channels<br />We have different channels for different purposes (this list is not exhaustive):<br />**Channel Description Participants**<br />#welcome Welcome message. Only admins can post. Anyone can read.<br />#announcements Flutter announcements (e.g. breaking changes). Only team members can post (but not frequently). Anyone can read.<br />#server-support Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues. Anyone.<br />#general Chat about anything related to Flutter. Anyone.<br />#help People asking for our help. Anyone.<br />#package-authors For people who develop Flutter packages. People writing packages for [pub.dev](https://pub.dev/).<br />#dart Questions about the Dart language. Anyone.<br />#tree-status Announcements about whether the trees are open or closed. Anyone, but discussion should happen elsewhere.<br />#hackers Chat about anything related to Flutter. Flutter contributors. Anyone can watch.<br />#hackers-* Chat specifically about foo, where foo is something to do with Flutter development, for example \"engine\", \"framework\", \"desktop\", \"devtools\", etc. Flutter contributors. Anyone can watch.<br />#hackers-dart Questions about the Dart language. Flutter contributors. Anyone can watch.<br />#hackers-new New people to the team and people who want to help them. Flutter contributors. Anyone can watch.<br />#hackers-triage For use while triaging bugs. Flutter contributors. Anyone can watch.<br />#hidden-chat Chat about anything related to Flutter. Flutter contributors only. Not public.<br />general (voice) Talk (audio) about anything related to Flutter. Anyone.<br />team (voice) Talk (audio) that is only open to team members. Flutter contributors. The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the \"team member\" role to see them.",
        "Creating New Channels": "### New channels<br />If you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support. If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads. If you would like a channel for subcommunities, e.g. #women or #china, that should be fine. (Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.) For practical reasons, we do not use Discord for chat groups limited to specific customers. For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord. Each channel describes its topic in the channel description. Please read the channel description before posting in a channel, to make sure you're using the appropriate one.",
        "Community Policies": "### Policies<br />Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter. The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing. If you want help with your app, ask in #help instead. If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md). See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the \"team\" role. Please don't direct-message people unless they are comfortable with it (ask publicly first). You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.",
        "Discord Features": "### Discord features<br />**Threading**<br />Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.<br />**Status**<br />You can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.",
        "Design Documentation": "### Design documents<br />This page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).",
        "Commit Access": "For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine. However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as \"contributor access\", \"being a member of the flutter-hackers group\", \"being a member of the Flutter team\"). We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter. Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.<br />The possible criteria are:<br />- You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).<br />- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.<br />- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.<br />- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)). (This is rare.)",
        "Responsibilities": "Being granted access means that you will be added to the \"flutter-hackers\" group on GitHub and the \"team\" role on Discord. This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md). A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues. We grant access optimistically based on a reasonably small volume of evidence of good faith. Correspondingly, we will remove access quickly if we find our trust has been violated. Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously. (Please read it, it's stricter than most.)<br />If you have commit access or \"team\" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md). Our code of conduct is much, much stricter than most. We do not wait until someone has been actively rude or insulting. Being disrespectful in any way is grounds for action. For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct. If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day. When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.<br />Most people react very positively to this. If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment. On Discord, this would be kicking them from the channel. Repeat offenders should be banned. On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this). Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.",
        "Documentation": "Maintaining documentation Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.<br />If you spot something wrong, please fix it! As a contributor, you have access to the wiki.",
        "Privileges": "Being in the GitHub \"flutter-hackers\" group gives you the following:<br />- The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).<br />- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).<br />- PRs will run their tests slightly faster.<br />Being in the Discord \"team\" group gives you the following:<br />- The ability to talk without rate-limiting on the #hackers-* channels.<br />- The ability to kick people.<br />- The ability to manage the server emoji.",
        "Process": "The actual process (as followed by Flutter repo admins) is as follows:<br />- Verify that they qualify under all the terms described above. Make sure they have a sponsor who isn't you.<br />- Verify the identity of the person making the request. Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.<br />- Add them to our private spreadsheet (go/flutter-organization-members).<br />- Click the \"Add a member\" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.<br />- Type their name in the text field, select them, then click the \"Invite\" button.<br />- Add them to the \"team\" group on Discord. Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!<br />For new Googlers joining the team: You need to ask someone in the team to add you to get added. It's not an automatic process after you join the flutter Google group.",
        "Inactivity": "We occasionally check for account with commit access that have not been used for a while. It takes very little to count as \"active\" (e.g. commenting on an issue, even adding an emoji reaction to an issue). If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access. If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.",
        "Access Rights": "Access rights to Flutter dashboard The [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits. To see rerun tasks, you need to be added to an allowlist. Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored. To get access, ask on #hackers-infra to be added to the allowlist.<br />Adding a contributor to Flutter Dashboard This is only for team members with access to the Flutter Dashboard Datastore.<br />- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)<br />- Click `Create Entity`<br />- Click `Email: Empty` -> Edit property. Insert contributor Google account<br />- Click `Create`<br />Access to LUCI recipes and configuration repositories If you need access to the LUCI recipes, you need to be added to the relevant ACLs. Ask in #hackers-infra to be added to the LUCI ACLs.<br />Process A Googler has to be the one to grant permission. Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)<br />Access to Flutter Gold If you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user. Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.<br />Process The list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5). Googlers can submit a change to add to the authorized users. This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)",
        "fcontrib.org Accounts": "fcontrib.org accounts If you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account. Ping @Hixie or another admin in the #server-support channel on Discord.<br />Process You\u2019ll need the user\u2019s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin. To add a fcontrib.org participant:<br />- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)<br />- Under \u201cUsers\u201d in the upper left of the main content area, click \u201cAdd a User\u201d and follow the prompts.<br />- For a password, choose \u201cGenerate Password\u201d and email the password to the new account holder using their non-fcontrib account -- they\u2019ll be able to log in with that and then choose a new password.",
        "Review Teams": "Review teams Some parts of the codebase have teams specified so that PRs get round-robin assigned for review. To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord. Members must be a member of the Flutter Hackers group (as documented at the top of this page). We currently have the following review teams:<br />- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.<br />- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.<br />- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions. To create a new team, contact @Hixie. You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.",
        "Pusher Permissions": "Pusher permissions Some branches are protected to avoid accidents. Only people in the specific branches can push to them. Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security. To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord. Members must be a member of the Flutter Hackers group (as documented at the top of this page). The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia",
        "Primary Issue Triage": "The process of triaging new incoming bugs consists of processing the list of [issues without team-* labels, with no assignees, and not labeled will need additional triage](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+no%3Aassignee+-label%3A%22will+need+additional+triage%22+-label%3Ateam-release%2Cteam-codelabs%2Cteam-ecosystem%2Cteam-infra%2Cteam-engine%2Cteam-framework%2Cteam-news%2Cteam-ios%2Cteam-tool%2Cteam-web%2Cteam-linux%2Cteam-macos%2Cteam-windows%2Cteam-design%2Cteam-android%2Cteam-go_router%2Cteam-games%2Cteam-text-input+) as described in this section, so as to make that list empty.<br />See also: [Issue triage reports](https://github.com/flutter/flutter/wiki/Issue-triage-reports)<br />To triage an issue, first look at the bug report, and try to understand what the described problem is. Edit the original comment to remove boilerplate that the bug reporter didn't remove. Edit the original comment to add backticks (```) around blocks of stack traces, code, the output of shell scripts like `flutter doctor`, etc.",
        "Artifacts": "Ideally every issue would have a sample app that demonstrated the problem. Performance bugs should have timeline traces. Crashes should have crash logs with a Flutter version so that the [flutter-symbolizer-bot](https://github.com/flutter-symbolizer-bot) can do its work (see also [Crashes](../engine/Crashes.md)).",
        "Actionable Issues": "An actionable issue is one for which it is easy to determine if a particular PR means the issue can be closed or not. Issues whose descriptions are vague, or that express a general malaise or general desire, issues that specify a failure mode but no steps to reproduce the problem, and other issues where the nature of the problem is not clear and where it would be difficult to determine if any particular change could actually fix the problem, should be closed.",
        "Unactionable Bugs": "As discussed above, if a filed issue is unactionable due to vagueness or a lack of steps to reproduce, it should be closed, because we're never going to get to it if we don't know what the problem is given that we have many, many other bugs that we can make progress on today.",
        "Duplicates": "If you recognize that this bug is a duplicate of an existing bug, add a reference to that bug in a comment, then close the bug. Skip the remaining steps. As you triage more and more bugs you will become more and more familiar with the existing bugs and so you will get better and better at marking duplicates in this way.",
        "Requests for Help": "If the bug report is a question, then it probably belongs in Stack Overflow or on our #help channel or some other forum for getting help. However, if it appears that the reporter did try to read our documentation to find the answer, and failed, or, if you look in our documentation and find it is inadequate here, then please consider it a documentation bug (and update the summary accordingly).",
        "Labels": "General rule: The more labels an issue has, the better! See also: [List of labels](https://github.com/flutter/flutter/labels) Some labels are used to track the flow of issues from the time they're filed until they're assigned to a specific team for execution. You should use these to track the state of an issue through your first-level triage process.",
        "Team Assignment": "Most issues will have both, and they won't always match. In general the flow chart for team assignment is as follows, stopping as soon as the first `team-` label is assigned: - If it's about the flutter/news_toolkit repository, add `team-news`. - If it's about a codelab, add `team-codelab`. - If it's about the release process or tooling (e.g., `conductor`), add `team-release`. - If it's about the Flutter team's CI or infrastructure, add `team-infra`. - If it's about Impeller, add `team-engine`. - If it's about accessibility (e.g. `Semantics`, `talkBack`, `voiceOver`), add `team-accessibility`. - If it's specific to a single platform, also add that platform's fyi label. - If it's about Cupertino or Material Design, add `team-design`.",
        "Additional Labels": "Once the main labels above are added, consider what additional labels could be added, in particular: Add any of the applicable \"c: *\" labels; typically only one will apply but sometimes `c: regression` will apply in conjunction with one of the others.",
        "Triage Process for Teams": "We intend for each area of the product to go through the following triage regularly: - Look at open bugs and determine what needs to be worked on. - Look at open PRs and review them. It is recommended to do these in separate dedicated meetings. For teams with multiple areas of focus (e.g. design languages), it's recommended that each area of focus have its own meeting.",
        "Team Issue Triage": "Each team has a label, for example `team-engine` is the engine team's label. Each issue gets assigned to a team during primary triage. In addition, each team has a \"triaged\" label (e.g. `triaged-engine`) and an \"FYI\" label (e.g. `fyi-engine`). Each team has an incoming issue list, the issues assigned to that team (team-foo), or marked for the attention of that team (fyi-foo), that the team has not yet triaged (triaged-foo).",
        "Checklist for Cleaning Up Issues": "When looking at an issue, perform the following cleanup steps: - Correct any typos and inaccuracies in the summary. - Correct the set of labels applied. - Hide low quality comments. Restrict the time you spend diagnosing each issue during triage. You don\u2019t have to fix the issue! 30 seconds for P0 and 10~15 seconds for the others is reasonable! (Plus whatever time it takes to update the issue.)",
        "PR Triage Process": "Teams should also go through all PRs in their area (ideally in a separate meeting). PRs can apply to multiple areas, and different teams have different methods of organizing code, so there is no uniform guidance for this process. However, in general: - Check that PRs have an assigned reviewer. - Check that the assigned reviewers have left comments; if not, contact them to remind them. - Check that any questions on the PR from the contributor have been answered.",
        "Links for Teams": "Accessibility team (`team-accessibility`) - [Incoming issue list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-accessibility%2Cfyi-accessibility+-label%3Atriaged-accessibility+no%3Aassignee+-label%3A%22will+need+additional+triage%22+sort%3Aupdated-asc+) - [P0 list](https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-accessibility+label%3AP0+sort%3Aupdated-asc+) - [Package PRs](https://github.com/flutter/flutter/pulls?q=is%3Aopen+is%3Apr+label%3A%22a%3A+accessibility%22+sort%3Aupdated-asc+-is%3Adraft+)",
        "Commit Access#1": "For people who make the occasional contribution to Flutter (filing an issue, submitting the occasional PR, chatting on Discord), the default set of permissions is fine. However, if you are a frequent contributor, whether helping us in triage, or often fixing bugs, or regularly improving our documentation, or regularly helping others in our #help channel, or participating in high-level design discussions and prioritization, you may find your life is more pleasant with commit access (also known as \"contributor access\", \"being a member of the flutter-hackers group\", \"being a member of the Flutter team\"). We grant commit access (which includes full rights to the issue database, such as being able to edit labels, and grants access to our internal chat channels) to people who have gained our trust and demonstrated a commitment to Flutter. Specifically, if you meet one of the following criteria and you have a sponsor (someone who already has contributor access and agrees that you should be granted access), then please ask your sponsor to propose, on the #server-support [Chat](Chat.md) channel, that you be made a member of the team, and then reply to that message explaining which criteria below you are claiming to meet.<br />The possible criteria are:<br />- You have a long history of participating productively, e.g. in our [Chat](Chat.md) channels, helping with [Triage](../triage/README.md), helping other contributors track down problems, finding meaningful issues in submitted PRs, helping people in our #help channel, etc, all while demonstrating exemplary behavior that closely aligns with our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md).<br />- You have recently submitted several PRs that have landed successfully (received an LGTM, PR was merged, no regressions reported, PR was not reverted), without needing extensive tutoring in the process.<br />- You are employed by a company with a history of contributing to Flutter, for the purpose of yourself regularly contributing to Flutter.<br />- You represent a development team that creates applications, plugins, or packages using Flutter and have a close relationship with our developer relations team, including having a customer label, and have a great need to regularly update labels on issues (see [Issue hygiene, Customers](./issue_hygiene/README.md#customers)). (This is rare.)",
        "Responsibilities#1": "Being granted access means that you will be added to the \"flutter-hackers\" group on GitHub and the \"team\" role on Discord. This privilege is granted with some expectation of responsibility: contributors are people who care about Flutter and want to help Flutter along our [roadmap](../roadmap/Roadmap.md). A contributor is not just someone who can make changes or comment on issues, but someone who has demonstrated their ability to collaborate with the team, get the most knowledgeable people to review code, contribute high-quality code, follow through to fix bugs (in code or tests), and provide meaningful insights on issues. We grant access optimistically based on a reasonably small volume of evidence of good faith. Correspondingly, we will remove access quickly if we find our trust has been violated. Contributors with commit access must still follow all our processes and policies, and must follow our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) rigorously. (Please read it, it's stricter than most.)<br />If you have commit access or \"team\" access on the Discord server, you are responsible for enforcing our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md). Our code of conduct is much, much stricter than most. We do not wait until someone has been actively rude or insulting. Being disrespectful in any way is grounds for action. For example, passive-aggressive whining and general unconstructive negativity are all violations of the code of conduct. If someone is in a bad mood, we would rather they avoided contributing to Flutter on that day. When you see something that might be described as unwelcoming or is in some other way a violation of our code of conduct, promptly contact the offender and ask them to read the code of conduct and consider how they might more effectively espouse its philosophy.<br />Most people react very positively to this. If they react negatively, or if they continue to make the environment unpleasant, they should be removed from the environment. On Discord, this would be kicking them from the channel. Repeat offenders should be banned. On GitHub, they can be blocked from our organisation (you may need to ask @Hixie or another admin of our GitHub org to do this). Please let the #server-support [Chat](Chat.md) channel know when you do anything like this, so that we can keep an eye on how common it is.",
        "Documentation#1": "Maintaining documentation Part of being a contributor is making sure our documentation is up to date, including our internal (team-facing) documentation such as this wiki.<br />If you spot something wrong, please fix it! As a contributor, you have access to the wiki.",
        "Privileges#1": "Being in the GitHub \"flutter-hackers\" group gives you the following:<br />- The ability to merge your own PRs once they are reviewed (see [Tree Hygiene](Tree-hygiene.md)).<br />- The ability to add labels, milestones, etc, on issues on GitHub (see [Issue Hygiene](./issue_hygiene/README.md)).<br />- PRs will run their tests slightly faster.<br />Being in the Discord \"team\" group gives you the following:<br />- The ability to talk without rate-limiting on the #hackers-* channels.<br />- The ability to kick people.<br />- The ability to manage the server emoji.",
        "Process#1": "The actual process (as followed by Flutter repo admins) is as follows:<br />- Verify that they qualify under all the terms described above. Make sure they have a sponsor who isn't you.<br />- Verify the identity of the person making the request. Ask them to confirm, on Discord, that they have read the style guide, issue or tree hygiene wiki page, code of conduct, and other documents relevant to them.<br />- Add them to our private spreadsheet (go/flutter-organization-members).<br />- Click the \"Add a member\" button on [the flutter-hackers team page](https://github.com/orgs/flutter/teams/flutter-hackers/members) on GitHub.<br />- Type their name in the text field, select them, then click the \"Invite\" button.<br />- Add them to the \"team\" group on Discord. Be sure to verify that you are promoting the right person; multiple people can have the same nickname on Discord!<br />For new Googlers joining the team: You need to ask someone in the team to add you to get added. It's not an automatic process after you join the flutter Google group.",
        "Inactivity#1": "We occasionally check for account with commit access that have not been used for a while. It takes very little to count as \"active\" (e.g. commenting on an issue, even adding an emoji reaction to an issue). If your account has been inactive for over a year we will try to reach out (e.g. by e-mail or on Discord) before removing access. If your account access was removed but you wish to return to contributing to Flutter, you are most welcome to do so; just reach out on the Discord (see [Chat](Chat.md)) and ask someone to renominate you according to the process described above.",
        "Access Rights#1": "Access rights to Flutter dashboard The [Flutter dashboard](https://flutter-dashboard.appspot.com/) shows what recently landed and what tests passed or failed with those commits. To see rerun tasks, you need to be added to an allowlist. Anyone with commit access is eligible to be added to that allowlist, but only certain team members have the permissions required to update the backend database where the permissions are stored. To get access, ask on #hackers-infra to be added to the allowlist.<br />Adding a contributor to Flutter Dashboard This is only for team members with access to the Flutter Dashboard Datastore.<br />- Open [flutter-dashboard datastore](https://console.cloud.google.com/datastore/entities;kind=AllowedAccount;ns=__$DEFAULT$__/query/kind?project=flutter-dashboard)<br />- Click `Create Entity`<br />- Click `Email: Empty` -> Edit property. Insert contributor Google account<br />- Click `Create`<br />Access to LUCI recipes and configuration repositories If you need access to the LUCI recipes, you need to be added to the relevant ACLs. Ask in #hackers-infra to be added to the LUCI ACLs.<br />Process A Googler has to be the one to grant permission. Documentation on how to use the relevant tools is available at: [https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl](https://goto.google.com/gob-ctl#add-or-remove-users-in-host-acl)<br />Access to Flutter Gold If you need access to triage images in [Flutter Gold](https://flutter-gold.skia.org/), you need to be added as an authorized user. Users in the `@google.com` domain are already authorized to use Flutter Gold, but `@gmail.com` addresses can also be added to the allow list.<br />Process The list of authorized users is maintained in the [skia build-bot repository](https://skia.googlesource.com/buildbot), in [this file](https://skia.googlesource.com/buildbot/+/refs/heads/main/golden/k8s-instances/flutter/flutter-skiacorrectness.json5). Googlers can submit a change to add to the authorized users. This repository is also [mirrored on GitHub.](https://github.com/google/skia-buildbot)",
        "fcontrib.org Accounts#1": "fcontrib.org accounts If you are a team member who wants to share design docs (see [Chat](Chat.md)) but you don't want to use your own personal account, you can ask a Flutter admin for an fcontrib.org account. Ping @Hixie or another admin in the #server-support channel on Discord.<br />Process You\u2019ll need the user\u2019s email account somewhere else, first and last name, and desired fcontrib.org account login before you begin. To add a fcontrib.org participant:<br />- Open an incognito window and log in using your admin fcontrib credentials at [https://admin.google.com/](https://admin.google.com/). (q.v. valentine)<br />- Under \u201cUsers\u201d in the upper left of the main content area, click \u201cAdd a User\u201d and follow the prompts.<br />- For a password, choose \u201cGenerate Password\u201d and email the password to the new account holder using their non-fcontrib account -- they\u2019ll be able to log in with that and then choose a new password.",
        "Review Teams#1": "Review teams Some parts of the codebase have teams specified so that PRs get round-robin assigned for review. To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord. Members must be a member of the Flutter Hackers group (as documented at the top of this page). We currently have the following review teams:<br />- [android-reviewers](https://github.com/orgs/flutter/teams/android-reviewers): for folks working on the Android port of Flutter; use `#hackers-android` for discussions.<br />- [devtools-reviewers](https://github.com/orgs/flutter/teams/devtools-reviewers): for the [devtools](https://github.com/flutter/devtools) repo; use `#hackers-devexp` for discussions.<br />- [website-reviewers](https://github.com/orgs/flutter/teams/website-reviewers): for folks working on [www.flutter.dev](http://www.flutter.dev) and docs.flutter.dev; use `#hackers-devrel` for discussions. To create a new team, contact @Hixie. You will also need to create a `CODEOWNERS` file to actually trigger the review assignment.",
        "Pusher Permissions#1": "Pusher permissions Some branches are protected to avoid accidents. Only people in the specific branches can push to them. Anyone can ask to be added or removed from these groups, they exist only to reduce accidents, not for security. To join one of these teams, request members be added/deleted, or change any settings, ping @Hixie on Discord. Members must be a member of the Flutter Hackers group (as documented at the top of this page). The following groups have been defined for these purposes: pushers-beta, pushers-fuchsia",
        "Code of Conduct#1": "The Flutter project expects Flutter's contributors to act professionally and respectfully. Flutter contributors are expected to maintain the safety and dignity of Flutter's social environments (such as GitHub and Discord). Specifically:<br />- Respect people, their identities, their culture, and their work.<br />- Be kind. Be courteous. Be welcoming.<br />- Listen. Consider and acknowledge people's points before responding.<br />Should you experience anything that makes you feel unwelcome in Flutter's community, please contact [conduct@flutter.dev](mailto:conduct@flutter.dev) or, if you prefer, directly contact someone on the project, for instance [Hixie](mailto:ian@hixie.ch).<br />The Flutter project will not tolerate harassment in Flutter's community, even outside of Flutter's public communication channels.",
        "Conflict Resolution#1": "When multiple contributors disagree on the direction for a particular patch or the general direction of the project, the conflict should be resolved by communication. The people who disagree should get together, try to understand each other's points of view, and work to find a design that addresses everyone's concerns. This is usually sufficient to resolve issues. If you cannot come to an agreement, ask for the advice of a more senior member of the project. Be wary of agreement by attrition, where one person argues a point repeatedly until other participants give up in the interests of moving on. This is not conflict resolution, as it does not address everyone's concerns. Be wary of agreement by compromise, where two good competing solutions are merged into one mediocre solution. A conflict is addressed when the participants agree that the final solution is better than all the conflicting proposals. Sometimes the solution is more work than either of the proposals. [Embrace the yak shave](./docs/contributing/Style-guide-for-Flutter-repo.md#lazy-programming).",
        "Questions#1": "It's always ok to ask questions. Our systems are large, and nobody will be an expert in all the systems. Once you find the answer, document it in the first place you looked. That way, the next person will be brought up to speed even quicker. Source: [xkcd, May 2012](https://xkcd.com/1053/)",
        "Issue Management": "- **Avoid asking about the status of an issue**; if we have an update, we'll post it.<br />- If you have permission, assign bugs to yourself if you're working on them.<br />- Unassign bugs that you are not working on soon.<br />- If an issue is not assigned, assume it is available to be worked on.<br />- We use three issue trackers: the [main one on flutter/flutter](https://github.com/flutter/flutter/issues), one for [the flutter.dev Website, on flutter/website](https://github.com/flutter/website/issues), and one for [the IntelliJ and Android Studio plugins, on flutter/flutter-intellij](https://github.com/flutter/flutter-intellij/issues).<br />- The issue tracker contains the list of bugs that we are very lucky to have had reported by our generous community.<br />- Bugs include known defects, as well as feature requests, planned work, and proposals.<br />- Within the bug database, we try to make sure each issue is actionable and discoverable.<br />- Do not add \"me too\" or \"same\" or \"is there an update\" comments to issues or PRs.<br />- The Flutter team prioritizes issues in part based on the number of +1 (thumbs up) reactions on the top-level comment of the bug.<br />- If you have no new details to add, consider just thumbs up-ing the issue.<br />- If you wish to subscribe to the issue, click the \"subscribe\" button in the right-hand column of the GitHub UI.<br />- Asking for updates is also not generally helpful.<br />- Issues are not always the best venue for discussions.<br />- Discussions within an issue should remain focused on the topic.<br />- Issues are never an appropriate venue for asking for help with your code.<br />- Providing workarounds for issues can be helpful for developers using Flutter and finding a bug.<br />- Avoid posting screenshots of text.",
        "Providing Test Cases": "- **Provide reduced test cases** to debug a problem.<br />- Attach such a file or files to the issue itself.<br />- For legal reasons, we cannot debug problems that require looking at proprietary code or, generally, code that is not publicly available.<br />- Consider posting issues in English.<br />- Avoid using screenshots in languages other than English.",
        "Locking Issues": "- **Locking an issue**: Closed issues that haven't received any activity in a [few weeks](https://github.com/flutter/flutter/blob/main/.github/lock.yml#L4) are automatically locked by a [bot](https://github.com/apps/lock).<br />- Under normal circumstances, open issues should not regularly be locked.<br />- If you are concerned that such an issue is not receiving its due attention, see Escalating an Issue.<br />- If you have a similar issue and are not sure if it is the same, it is fine to file a new issue and linking it to the other issue.",
        "Prioritization": "- **Priorities**: The [P0](https://github.com/flutter/flutter/labels/P0) label indicates that the issue is one of the following: a build break, regression, or failure in an existing feature that prevents us from shipping the current build.<br />- The [P1](https://github.com/flutter/flutter/labels/P1) label indicates high-priority issues that are at the top of the work list.<br />- The [P2](https://github.com/flutter/flutter/labels/P2) label indicates issues that we agree are important to work on, but are not at the top of the work list.<br />- The [P3](https://github.com/flutter/flutter/labels/P3) label indicates issues that we currently consider less important to the Flutter project.<br />- When will my bug be fixed? Flutter is an open source project and many people contribute their time (or their employees' time) to fix code and implement features.",
        "Voting and Labels": "- **Thumbs-up reactions**: To vote on an issue, use the \"Thumbs-up\" emoji to react to the issue.<br />- We use [many labels](https://github.com/flutter/flutter/labels).<br />- Naming conventions: `a: *`, `browser: *`, `c: *`, `d: *`, `dependency: *`, `e: *`, `f: *`, `found in release: x.yy`, `from: *`, `t: *`, `p: *`, `platform-*`, `r: *`.<br />- Adding labels: Labels are more or less free, so we can add them pretty easily.",
        "Assigning Issues": "- **Assigning Issues**: Issues are typically self-assigned.<br />- Only assign a bug to someone else if they have explicitly volunteered to do the task.<br />- If you don't have permissions to assign yourself an issue you want to work on, don't worry about it, just submit the PR.<br />- Only assign a bug to yourself when you are actively working on it or scheduled to work on it.",
        "Filing Bugs": "- **File bugs for everything**: File bugs for anything that you come across that needs doing.<br />- Exceptions: Do not file bugs that meet the following criteria: Asking meta-questions like \"why was bug #XYZ closed?\"<br />- How to propose a specific change: File a bug describing the problem.<br />- Every issue should be actionable.<br />- Issues should have clear steps to reproduce.<br />- Closing issues: An issue should be closed if it is fixed, a duplicate, makes multiple requests, is describing a solution rather than a problem, is not actionable, or is a feature request that we are unlikely to ever address.",
        "Discord Communication#1": "### Chatting on Discord<br />The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148). [This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH). Please do not share either link directly, instead share links to this page. The server is open to the public, though some channels are intended only for people who are actively contributing. See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there). We recommend you use the same display name on Discord and GitHub. (Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on. When in doubt, remember: our server has Dash as an icon!)",
        "Channel Overview#1": "### Existing channels<br />We have different channels for different purposes (this list is not exhaustive):<br />**Channel Description Participants**<br />#welcome Welcome message. Only admins can post. Anyone can read.<br />#announcements Flutter announcements (e.g. breaking changes). Only team members can post (but not frequently). Anyone can read.<br />#server-support Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues. Anyone.<br />#general Chat about anything related to Flutter. Anyone.<br />#help People asking for our help. Anyone.<br />#package-authors For people who develop Flutter packages. People writing packages for [pub.dev](https://pub.dev/).<br />#dart Questions about the Dart language. Anyone.<br />#tree-status Announcements about whether the trees are open or closed. Anyone, but discussion should happen elsewhere.<br />#hackers Chat about anything related to Flutter. Flutter contributors. Anyone can watch.<br />#hackers-* Chat specifically about foo, where foo is something to do with Flutter development, for example \"engine\", \"framework\", \"desktop\", \"devtools\", etc. Flutter contributors. Anyone can watch.<br />#hackers-dart Questions about the Dart language. Flutter contributors. Anyone can watch.<br />#hackers-new New people to the team and people who want to help them. Flutter contributors. Anyone can watch.<br />#hackers-triage For use while triaging bugs. Flutter contributors. Anyone can watch.<br />#hidden-chat Chat about anything related to Flutter. Flutter contributors only. Not public.<br />general (voice) Talk (audio) about anything related to Flutter. Anyone.<br />team (voice) Talk (audio) that is only open to team members. Flutter contributors. The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the \"team member\" role to see them.",
        "Creating New Channels#1": "### New channels<br />If you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support. If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads. If you would like a channel for subcommunities, e.g. #women or #china, that should be fine. (Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.) For practical reasons, we do not use Discord for chat groups limited to specific customers. For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord. Each channel describes its topic in the channel description. Please read the channel description before posting in a channel, to make sure you're using the appropriate one.",
        "Community Policies#1": "### Policies<br />Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter. The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing. If you want help with your app, ask in #help instead. If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md). See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the \"team\" role. Please don't direct-message people unless they are comfortable with it (ask publicly first). You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.",
        "Discord Features#1": "### Discord features<br />**Threading**<br />Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.<br />**Status**<br />You can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.",
        "Design Documentation#1": "### Design documents<br />This page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).",
        "Testing Betas": "With each beta, we need to test that there are no regressions. We have lots of automated tests, but sometimes the thing that breaks is something we hadn't thought to test (or haven't figured out how to test) and so human testing is important!<br />",
        "Announcing Betas": "When to test betas<br />We announce betas on our Discord (see the [Chat](../contributing/Chat.md) page for the invite link), in the #releases channel, about once a month.<br />",
        "Getting a Beta Build": "How to get a beta build<br />When a beta build is announced, switch to the beta channel: `flutter channel beta && flutter upgrade`<br />If you get a `git` error, then you probably have a contributor checkout of Flutter. Use git instead: `git fetch upstream && git checkout upstream/beta`<br />Either way, check that everything is as you expect: `flutter --version`<br />It should specify the version number that you are testing.<br />",
        "Testing a Beta Build": "How to test a beta build<br />This is the easiest part: just use it! Test it on your projects, try running demos, try doing things you depend on normally.<br />Tell others who are testing the beta branch what you're doing in #quality-assurance on Discord!<br />In time, we will collect some specific things to try out here.<br />",
        "Discord Communication#1#1": "### Chatting on Discord<br />The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148). [This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH). Please do not share either link directly, instead share links to this page. The server is open to the public, though some channels are intended only for people who are actively contributing. See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there). We recommend you use the same display name on Discord and GitHub. (Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on. When in doubt, remember: our server has Dash as an icon!)",
        "Channel Overview#1#1": "### Existing channels<br />We have different channels for different purposes (this list is not exhaustive):<br />**Channel Description Participants**<br />#welcome Welcome message. Only admins can post. Anyone can read.<br />#announcements Flutter announcements (e.g. breaking changes). Only team members can post (but not frequently). Anyone can read.<br />#server-support Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues. Anyone.<br />#general Chat about anything related to Flutter. Anyone.<br />#help People asking for our help. Anyone.<br />#package-authors For people who develop Flutter packages. People writing packages for [pub.dev](https://pub.dev/).<br />#dart Questions about the Dart language. Anyone.<br />#tree-status Announcements about whether the trees are open or closed. Anyone, but discussion should happen elsewhere.<br />#hackers Chat about anything related to Flutter. Flutter contributors. Anyone can watch.<br />#hackers-* Chat specifically about foo, where foo is something to do with Flutter development, for example \"engine\", \"framework\", \"desktop\", \"devtools\", etc. Flutter contributors. Anyone can watch.<br />#hackers-dart Questions about the Dart language. Flutter contributors. Anyone can watch.<br />#hackers-new New people to the team and people who want to help them. Flutter contributors. Anyone can watch.<br />#hackers-triage For use while triaging bugs. Flutter contributors. Anyone can watch.<br />#hidden-chat Chat about anything related to Flutter. Flutter contributors only. Not public.<br />general (voice) Talk (audio) about anything related to Flutter. Anyone.<br />team (voice) Talk (audio) that is only open to team members. Flutter contributors. The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the \"team member\" role to see them.",
        "Creating New Channels#1#1": "### New channels<br />If you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support. If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads. If you would like a channel for subcommunities, e.g. #women or #china, that should be fine. (Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.) For practical reasons, we do not use Discord for chat groups limited to specific customers. For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord. Each channel describes its topic in the channel description. Please read the channel description before posting in a channel, to make sure you're using the appropriate one.",
        "Community Policies#1#1": "### Policies<br />Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter. The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing. If you want help with your app, ask in #help instead. If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md). See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the \"team\" role. Please don't direct-message people unless they are comfortable with it (ask publicly first). You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.",
        "Discord Features#1#1": "### Discord features<br />**Threading**<br />Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.<br />**Status**<br />You can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.",
        "Design Documentation#1#1": "### Design documents<br />This page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).",
        "Introduction": "### Introduction<br />- Regressions should be [reverted first](../infra/Landing-Changes-With-Autosubmit.md) and questions asked later. Bringing the tree to green is higher priority.<br />- A breaking change is one that breaks the tests in the flutter/tests repo, and those need a migration guide.<br />- Expect that a new patch will be reviewed within two weeks, unless it is fixing a P0 bug in which case it should be reviewed the same day. If it has not been reviewed in that timeframe, reach out on [Chat](Chat.md). Remember that reviewers are human beings with additional professional and personal responsibilities.<br />This page covers how to land a PR and other aspects of writing code for Flutter other than the actual writing of the code. For guidance on designing APIs, documenting, and formatting your code, see the [Style guide for Flutter repo](Style-guide-for-Flutter-repo.md) document.",
        "Forking and Filing Issues": "### Forking and Filing Issues<br />- Fork the repository on GitHub (see the [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md) for advice on doing this and in general setting up your development environment).<br />- If there is not already an issue covering the work you are interested in doing, then file a new bug to describe the issue you are addressing. Having an issue means that if we have to revert the PR, we can reopen the issue and not lose track of the fact that the work didn't fully land. Similarly if someone works on a PR then stops before it can land, having an issue means we have somewhere to point to the code when we close the PR without landing it, so other people can take it over.",
        "Design Discussion": "### Design Discussion<br />- Discuss your design on the issue. See [Design Documents](Design-Documents.md) for advice. You may find it useful to create a Google Doc to solicit feedback (use the template at [flutter.dev/go/template](https://flutter.dev/go/template)). You may wish to e-mail the mailing list, or discuss the topic on our [Chat](Chat.md) channels. The more buy-in you get from the rest of the team (especially the relevant leads), the easier the rest of the process will be. You can put the label \"proposal\" on your issue to indicate that you have a design up for discussion in the issue.",
        "Implementing Changes": "### Implementing Changes<br />- If the work you are doing affects our privacy surface, such as modifying how we collect analytics, crash logs, or the like, then please reach out to a Googler to discuss your changes (you'll want to start a Google Doc to solicit feedback, use the template at [flutter.dev/go/template](https://flutter.dev/go/template)), who will be happy to loop in one of our engineers who explicitly focus on privacy issues so that they're able to give feedback on the work you plan to do.<br />- Create a branch off of `main` (or if the repository has not yet switched to having a `main` branch, from `master`) on your GitHub fork of the repository, and implement your change. Make sure it is tested (see the next section for details). You must follow the guidelines described in the [Style guide for Flutter repo](Style-guide-for-Flutter-repo.md). Files must not have trailing spaces. For the engine repository, C, C++, and Objective-C code should be formatted with `clang-format` before submission (use `buildtools/<OS>/clang/bin/clang-format --style=file -i`).<br />- Submit this branch as a PR to the relevant Flutter repository. (See also: [Signing commits](./Signing-commits.md))<br />- Get your code reviewed (see below). You should probably reach out to the relevant expert(s) for the areas you touched and ask them to review your PR directly.",
        "Testing and Review": "### Testing and Review<br />- GitHub sometimes recommends specific reviewers; if you're not sure who to ask, that's probably a good place to start.<br />- Make sure your PR passes all the pre-commit tests. Consider running some of the post-commit tests locally (see the [devicelab](https://github.com/flutter/flutter/blob/main/dev/devicelab/README.md) directory). If any tests break, especially the `customer_testing` tests, please see the breaking change policy section below for details on how to proceed. The `luci-flutter` test isn't checking your PR, it's letting you know whether the tree itself is passing the tests right now (including post-commit tests). If the trees or dashboards are showing any regressions, only fixes that improve the situation are allowed to go in.<br />- Once everything is green and you have an LGTM from the owners of the code you are affecting (or someone to whom they have delegated), and an LGTM from any other contributor who left comments, add the \"autosubmit\" label if you're in the flutter-hackers github group. A bot will land the patch when it feels like it. If you're not in the flutter-hackers group a reviewer will add the label for you.<br />- Watch the post-commit tests on the [dashboard](https://dashboard.flutter.dev/#/build) to make sure everything passes. If anything goes wrong, revert your patch and study the problem. You should aim to be the one to revert your patch. You will be racing everyone else on the team who will also be trying to revert your patch. (See below for guidance on reverting PRs.)",
        "Using Git": "### Using Git<br />Assuming your environment has been configured according to the instructions in [Setting up the Engine development environment](../engine/contributing/Setting-up-the-Engine-development-environment.md), [Setting up the Framework development environment](Setting-up-the-Framework-development-environment.md), or [Setting up the Packages development environment](../ecosystem/contributing/Setting-up-the-Packages-development-environment.md), follow these steps to start working on a patch:<br />- `git fetch upstream`<br />- `git checkout upstream/main -b name_of_your_branch`<br />- `flutter update-packages`<br />- Hack away.<br />- `git commit -a -m \"<your informative commit message>\"`<br />- `git push origin name_of_your_branch`<br />GitHub provides you with a link for submitting the pull request in the message output by `git push`. Because `git pull` will often miss tags that are used to define the release of the flutter tool, it is recommended to use `git fetch` typically to avoid version mismatches when running `flutter update-packages`. Use `git fetch upstream; git rebase upstream/main; git push origin your_branch_name` to update your PRs, rather than using merge, because that way our tooling will recognize your PR as being up to date. (Otherwise it'll try testing against the tests at the time you originally branched.) Also, be wary of force pushing to your PR branch if you are dealing with golden image tests; see [gold troubleshooting instructions](./testing/Writing-a-golden-file-test-for-package-flutter.md#troubleshooting). Please make sure all your patches have detailed commit messages explaining what the problem was and what the solution is. (Avoid GitHub @-mentions in commit messages. GitHub turns this into a notification for the person any time someone rebases your commit on their own fork. On a project of this size, that's rather disruptive. If you need to @-mention someone, do it as a separate comment on the PR.) You must complete the [Contributor License Agreement](https://cla.developers.google.com/clas). You can do this online, and it only takes a minute.",
        "Code Review": "### Code Review<br />Every PR must be code-reviewed before check-in, including things like rolling a dependency. Getting a review means that a regular Flutter contributor (someone with commit access; see [contributor access](Contributor-access.md) for details) has \"approved\" the PR in the GitHub UI. We call this \"getting an LGTM\" (\"looks good to me\"). If you are not yourself someone with commit access, then a second person with commit access must also review and approve your PR. This ensures that two people with commit access (trusted contributors) agree on every commit.<br />Why Code review serves many critical purposes. There's the obvious purpose: catching errors. Even the most experienced engineers frequently make errors that are caught by code review.<br />But there are also many other benefits of code reviews:<br />- It spreads knowledge among the team. Since every line of code will have been read by two people, it's more likely that once you move on, someone else will understand the code.<br />- It keeps you honest. Knowing that someone will be reading your code, you are less tempted to cut corners and more motivated to write code you are proud of.<br />- It exposes you to different modes of thinking. Your code reviewer has probably not thought about the problem in the same way you have, and so may have a fresh perspective and may find you a better way to solve the problem.<br />We recommend you consider [these suggestions](https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html) for addressing code review comments on your PR.<br />When If you're working on a big patch, don't hesitate to get reviews early, before you're ready to check code in. Also, don't hesitate to ask for multiple people to review your code, and don't hesitate to provide unsolicited comments on other people's PRs (although approvals in the GitHub UI should be reserved for those with contributor access). The more reviews the better. If nobody reviews your PR within two weeks, you can ask for a review via our [Chat](Chat.md) channels. Start by asking in #hackers, saying what your patch does and providing a link.<br />Who PRs are assigned reviewers weekly. The precise process varies by team but tends to be combined with issue [triage](../triage/README.md). Code should be reviewed by the owner (tech lead) of the area(s) of the codebase that you are changing, or someone to whom they have delegated that authority. If anyone else leaves comments, please also wait for their approval (LGTM) before landing code. If nobody has reviewed your code after a week, then reach out on our [Chat](Chat.md) channels. The `#hackers-new` channel is a good place to ask for help if you're a new contributor. For PRs affecting the `material` and `cupertino` libraries, team members are expected to seek reviewers directly; they will not be assigned during PR triage.<br />How Code review status is managed via GitHub's approval system. PRs should not be merged unless one or more contributors with commit access (at least one of which should be very familiar with the code in question) have approved the PR in the GitHub UI. Reviewers should carefully read the code and make sure they understand it. A reviewer should check the code for both high level concerns, such as whether the approach is reasonable and whether the code's structure makes sense, as well as lower-level issues like how readable the code is and adherence to the [Flutter style guide](Style-guide-for-Flutter-repo.md). Use [these best practices](https://mtlynch.io/human-code-reviews-1/) when reviewing code and providing comments. As a reviewer, you are the last line of defense.<br />- Did the author sign the CLA? If not, ask them to do so and don't look at the code.<br />- Take a step back. What problem is the PR trying to solve? Is it a real problem?<br />- What other solutions could we consider? What could we do to make this even better?<br />- Is it the best API? See our [philosophy](Style-guide-for-Flutter-repo.md#philosophy) section. Look for state duplication, synchronous slow work, complecting, global state, overly-specific APIs, API cliffs and API oceans, API design in a vacuum (without a customer).<br />If these terms don't make sense, read the style guide again. :-)<br />- Is it the best implementation? Again, see our [style guide](Style-guide-for-Flutter-repo.md#coding-patterns-and-catching-bugs-early), in particular its section on good coding patterns. Are there hacks? Are we taking on more technical debt? Think of ways in which the code could break.<br />- Is it testable? Is it tested? All code must be tested. Are there asserts? Encourage liberal use of assertions.<br />- Look for mistakes in indenting the code and other trivial formatting problems.<br />- Is new code licensed correctly?<br />- Is the documentation thorough and useful? Look for useless documentation, empty prose, and breadcrumbs. See the [documentation section](Style-guide-for-Flutter-repo.md#documentation-dartdocs-javadocs-etc) of our style guide for what that means.<br />- Check for good grammar in API docs and comments. Check that identifiers are named according to our conventions.<br />Once you are satisfied with the contribution, and only once you are satisfied, use the GitHub \"Approval\" mechanism (an \"LGTM\" comment is not sufficient). If you feel like you are being worn down, hand the review to someone else. Consider our [conflict resolution](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md#conflict-resolution) policy if you feel like you are being forced to agree to something you don't like. Reviewers should not give an LGTM unless the patch has tests that verify all the affected code, or unless a test would make no sense. If you review a patch, you are sharing the responsibility for the patch with its author. You should only give an LGTM if you would feel confident answering questions about the code. In general, reviewers should favor approving a PR once it is in a state where it definitely improves the overall code health of the system being worked on, even if the PR isn't perfect. Reviewers should also provide positive feedback throughout the process, to offset the impact of the stream of critiques that is code review. Reviewers should always feel free to leave comments expressing that something could be better, but if it's not very important, prefix it with something like \"Shouldn't block this PR but: \" to let the author know that it's just a point of polish that they could choose to ignore in the current PR (these should be documented in TODO comments with a tracking issue). If you are not a regular Flutter contributor (someone with commit access), we very much welcome your reviews on code contributions in the form of comments on the code, but please refrain from approving or LGTM'ing changes, as it confuses PR authors, who may think your approval is authoritative and merge the PR prematurely.<br />When commenting on a PR, keep in mind the following mantra:<br />- Be polite and grateful. Graceful professionalism.<br />- Explain what is happening. Explain why it is happening.<br />- Provide next steps. Set expectations. It's better to close a PR than to leave it in limbo.<br />See also: [How to review a Flutter PR](https://docs.google.com/presentation/d/1apKVLEAEqxINby49JhLWSLI-CMH0nxCcnrf90nW4cts/edit?usp=sharing) presentation<br />What (to do when the patch is abandoned) Sometimes the contributor is unable to finish the work of landing the patch. In that case, if the PR has promise, we may close it but mention it on the relevant issue so that other interested parties can pick it up. Such issues are given the label [has partial patch](https://github.com/flutter/flutter/labels/has%20partial%20patch).",
        "Landing a Patch": "### Landing a Patch<br />Once you have submitted your patch and received your LGTM, if you do not have commit access to the repository yet, then wait for one of the project maintainers to submit it for you. If you do have access, add the \"autosubmit\" label. A bot will land the PR for you.<br />Squashing commits When you squash commits, by default, GitHub will concatenate all your commit messages to form a unified commit message. This often yields an overly verbose commit message with many unhelpful entries (e.g. \"fix typo\"). Please double-check (and hand-edit if necessary) your commit message before merging such that the message contains a helpful description of the overall change.<br />Tree breakage (regressions in functionality) If a check-in has caused a regression on the main branch (sometimes \"master\") for any of the flutter repositories, revert (roll back) the check-in (even if it isn't yours). Do not attempt to forward-fix post-submit test failures. There is no shame in making mistakes! Reverts happen all the time and are a normal part of engineering. To revert a PR, just add the `revert` label to it. For more details, see [Landing Changes With Autosubmit](../infra/Landing-Changes-With-Autosubmit.md). Avoid \"Revert \"Revert \"Revert \"Revert \"Fix foo\"\"\"\" commit messages Please limit yourself to one \"Revert\" per commit message, otherwise we won't have any idea what is actually landing.<br />Is it putting us back to where we were before? Is it adding new code? Is it a controversial new feature that actually caused a regression before but is now fixed (we hope)? Only use \"Revert\" if you are actually returning us to a known-good state. Also avoid using \"Reland\" in the commit message. When you later revert the revert, just land the PR afresh with the original commit message, possibly updated with the information since collected, and include a link to the original PR and to the revert PR so that people can follow the breadcrumbs later.",
        "Handling Regressions": "### Handling Regressions<br />Regressions in performance After each check-in, please monitor the [performance dashboards](https://flutter-dashboard.appspot.com/). If you see a regression (any of the charts increasing after your commit), please follow these steps:<br />- Comment on the PR acknowledging the regression.<br />- If the regression is expected and is a desirable trade-off (e.g. disk size increased slightly in exchange for a significant improvement in speed), then rebaseline the relevant benchmarks (log in, then click the magnifying glass at the top right of each chart, then click the button to auto rebaseline and commit).<br />- If the regression is not expected, and may be a problem in your PR, revert your PR and investigate.<br />- If the regression is not expected, and is quite severe, revert your PR and investigate.<br />- If the regression is not expected, and is not severe, and is definitely not a problem in your PR (e.g. you changed a comment and the analyzer performance got worse, or you deleted a README and the rasterizer slowed down), then file a bug, labeled with the \"regression\", \"performance\", `P0` labels, and either investigate or delegate to someone to investigate.<br />The investigation should be considered a high priority. It is your responsibility to make sure that the cause is understood within a few days. Performance regressions are not a problem so long as they are promptly dealt with. Therefore, Flutter considers all unexpected performance regressions to be `P0` until we have it under control (e.g. we know what caused it and either have a fix under way or have determined it is an acceptable trade-off).<br />Performance regressions caused by auto-roller commits Although reverting a normal commit that caused performance regressions is the default behavior, reverting an [auto-roller](../infra/Autorollers.md) (e.g., an engine-roller commit like [https://github.com/flutter/flutter/commit/fdcb57b69eff2162e9aead6dec0f8058788e7608](https://github.com/flutter/flutter/commit/fdcb57b69eff2162e9aead6dec0f8058788e7608)) commit could cause some complications:<br />- The auto-roller commit usually include multiple commits of the source repo (e.g., engine-roller commit includes multiple commits of [https://github.com/flutter/engine](https://github.com/flutter/engine)). This can be applied recursively as the engine-roller commit includes a dart-roller commit, or a skia-roller commit. Therefore, a roller commit could actually include a ton of leaf-level commits, which makes it really hard to triage which leaf commit actually caused the regression.<br />- The auto-roller will try to roll again as soon as possible that will reland any changes reverted by a Flutter commit revert. So in order to keep the revert effective, one has to either (1) pause the auto-roller, or (2) revert the leaf commit in the source repo.<br />- If the auto-roller is paused for a long time (say 1 day), the source repo will accumulate many commits. That makes the next roll very hard to manage: it's difficult to triage a build failure or a new performance regression caused by the next roll, since that roll will include all the commits in the paused period.<br />Therefore, reverting a roller commit or pausing the auto-roller is NOT the default action if it causes a performance regression. The default action should be to file an issue with labels \"performance\", \"regression\", and `P0` immediately, and start investigating which leaf-commit caused the regression. Once the leaf-commit is identified, check if it's an expected trade-off. If so, remove the `P0` label and try to see if there's any way to mitigate the regression. If not, revert the leaf commit in the source repo and let the auto-roller apply that revert. Once the revert is rolled into Flutter, close the issue.",
        "Handling Interdependent Changes": "### Handling Interdependent Changes<br />If you're working on a feature that requires changes in both the [framework](https://github.com/flutter/flutter) and [engine](https://github.com/flutter/flutter) repos, you'll need to make 2 separate PRs. In such situation CI on the framework PR may fail because it depends on engine code that is not (yet) on engine repo's main branch. In such situation, you need to land the changes in the engine first, wait for them to roll into the framework's main branch, and then rebase your framework PR.",
        "Handling Breaking Changes": "### Handling Breaking Changes<br />In general, we want to avoid making changes to Flutter, our plugins, or our packages, that force developers using Flutter to change their code in order to upgrade to new versions of Flutter. See [our compatibility policy](https://flutter.dev/docs/resources/compatibility). Sometimes, however, doing this is necessary for the greater good. We want our APIs to be intuitive; if being backwards-compatible requires making an API into something that we would never have designed that way unless forced to by circumstances, then we should instead break the API and make it good.<br />The process for making breaking changes is as follows:<br />1. Determine if your change is a breaking change Implement the change you wish to see and run the existing tests against your new code (without having changed the tests first). Changes that break (i.e. require changes to) one or more of the contributed tests are considered \"breaking changes\". The \"contributed tests\" are:<br />- Those in the [customer_testing](https://github.com/flutter/tests) shard on `flutter/flutter` PRs.<br />- Additional test suites that we have been allowed to run but that are not public. (Notably, Google allows us to run several tens of thousands of [proprietary tests](../infra/Understanding-Google-Testing.md) on each commit.)<br />There are no exemptions to this policy, because these tests run in our CI and breaking them will close the tree. In cases where these tests pass but we can nonetheless imagine reasonable scenarios where developers would be affected negatively, by courtesy, once the change has landed, engineers are encouraged to announce the changes by sending an e-mail to [flutter-announce@](https://groups.google.com/g/flutter-announce), a message to the `#announcements` channel on our [Chat](Chat.md), and tagging the relevant issues with the [c: API break label](https://github.com/flutter/flutter/labels/c%3A%20API%20break) (such that they will be included in our release notes). However, we do not consider these breaking changes. (One reason to do this would be if we see our own tests being significantly affected, even if no contributed test actually fails.)<br />2. Evaluate the breaking change If your change counts as a breaking change, seriously consider whether it is truly necessary and beneficial. Consider writing a [design document](Design-Documents.md). Discuss it with your code reviewer. Raise it in [Chat](Chat.md).<br />3. Prepare your change. If you decide your change is valuable enough to deploy, adjust your PR so that it introduces the new functionality, API, behavior change, etc, in an opt-in fashion, thus avoiding the immediate breakage. For example, rather than replacing a widget with another, introduce the new widget and discourage use of the old one. Rather than changing the order in which a certain argument is processed, provide a flag that selects which order the arguments will be processed in. When changing the semantics of an API with a temporary opt-in, a three-phase change is needed (adding the new API and opt-in, then removing the old API, then removing the opt-in.) If possible, avoid four-phase deprecations (adding a new API with a temporary name and deprecating an old API, removing the old API, changing the new API to the old name and deprecating the temporary name, and finally removing the temporary name), because they involve a lot of churn and will irritate our developers. Stage your change and the documentation for your change. Typically this will be two or more PRs, plus PRs to fix the tests that were broken (see step 1), as well as writing a migration guide as a PR to the Website repository. If possible, include flutter fixes to aid users in migration. Whether or not the change is supported by flutter fix should be included in the migration guide. To learn about authoring fixes, see [Data driven Fixes](Data-driven-Fixes.md). Use our [breaking change migration guide template](https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/template.md) (follow all the instructions in the comments) to create the migration guide that describes the change. Do not land the migration guide at this time. You will need to update it before you land it in the last step.<br />4. Land your change. Once you are ready, have received feedback, iterated on your design and your migration guide, land your initial change and start migrating clients. Do not yet land the migration guide. Once all the clients are migrated, land your final change. (You may have several iterations here if you have a multiphase roll-out.) During this process, each individual PR does not break any tests, so it should not block any autorollers.<br />5. Document the change, including clear documentation for migrating code, with samples, and clear rationales for each change Once everything has landed:<br />- update your migration guide based on your experience migrating everyone,<br />- update the timeline on the guide, and push it to [the flutter.dev Web site](https://flutter.dev/docs/release/breaking-changes) (don't forget to update the [index](https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/index.md) of that directory as well),<br />- e-mail a copy to [flutter-announce@](https://groups.google.com/g/flutter-announce),<br />- notify the `#announcements` channel on our [Chat](Chat.md), and<br />- add the [c: API break label](https://github.com/flutter/flutter/labels/c%3A%20API%20break) to the relevant issues, so they get listed in the upcoming Release notes.",
        "Deprecations": "### Deprecations<br />Old APIs can be marked as deprecated as part of this process. Deprecation is not a way to avoid making a breaking change; you should consider deprecating an API to be equivalent to removing it, as some of our customers (and we ourselves) consider using a deprecated API to be anathema (triggering a build failure). The syntax for deprecations must match the following pattern:<br />```<br />@Deprecated(<br />'Call prepareFrame followed by owner.requestVisualUpdate() instead. '<br />'This will enable an improvement to performance in a future version of Flutter.',<br />'This feature was deprecated after v2.9.0-0.1.pre.'<br />)<br />```<br />In other words:<br />```<br />@Deprecated(<br />'[description of how to migrate] '<br />'[brief motivation for why we are breaking the API] '<br />'This feature was deprecated after [beta version at time of deprecation].'<br />)<br />```<br />Using this standard form ensures that we can write a script to detect all deprecated APIs and remove them. We have a test that verifies that this syntax is followed. To determine the latest beta version, see [https://flutter.dev/docs/development/tools/sdk/releases](https://flutter.dev/docs/development/tools/sdk/releases). When adding a deprecation notice to the framework, a flutter fix should be included with your change. This helps users migrate to the new API as easily as possible. To learn more about authoring fixes, see [Data driven Fixes](Data-driven-Fixes.md). If a fix cannot be written for the new API, please file an issue in [https://github.com/dart-lang/sdk](https://github.com/dart-lang/sdk) and link to it in your change. When deprecating features, be aware that you will not by default be informed when the Flutter code itself uses the deprecated feature (there is a `deprecated_member_use_from_same_package: ignore` line in the root `analysis_options.yaml` file). To find places where the old feature is used, rename its declaration and see where the compiler complains. (You can't just comment out the \"ignore\" in the `analysis_options.yaml` file because it's hiding hundreds of other warnings...) Removing deprecated APIs from the framework are not currently planned. In the past, deprecations were removed after a set amount of time. This is not currently in practice. If and when we do resume removing deprecated APIs, it will be announced across several channels like the [flutter-announce group](https://groups.google.com/g/flutter-announce), and the [Discord](../contributing/Chat.md).",
        "Skipped Tests": "### Skipped Tests<br />Tests can be skipped using the `skip` parameter of `test()`, `group()` and `testWidgets()`. However, they should be kept to a minimum and only done for the following two reasons. The first is if there is a test that is flaky, we can mark is as temporarily skipped to keep the tree green while a fix for it is developed. For these types of skips you need to file a tracking issue so we can ensure there is follow up to remove the skip. This tracking issue should be tagged with the `skip-test` label. Then in a comment on the same line as the parameter, include a link to this issue:<br />```<br />skip: true, // https://github.com/flutter/flutter/issues/XXXXX<br />```<br />The other reason to use the skip parameter is to mark a test that by design doesn't make sense to test under a specific condition. An example would be a test that only tests a feature available on a specific platform or environment. For these cases, include a comment on the same line as the skip parameter with the text `[intended]` and a short description of why the skip is needed:<br />```<br />skip: isBrowser, // [intended] There are no default transitions to test on the web.<br />```<br />If the analyzer script sees a skip without a comment containing either an issue link or an `[intended]` tag, it will report and error and fail the check.",
        "Creating a Design Doc": "If you want to write a design doc for people to review, we recommend using Google Docs. We have a template you can use, at [flutter.dev/go/template](https://flutter.dev/go/template). It describes the process for minting a `flutter.dev/go/foo` shortlink for your design doc. We recommend you use that template so that people can immediately recognize that this is a Flutter design document and that it is shared publicly. After you have created your design doc, the next step is to create a tracking GitHub issue for it. File a new issue to track the design doc using [the design doc issue template](https://github.com/flutter/flutter/issues/new?template=7_design_doc.yml). Assign it to yourself. Add the label \"design doc\" to the issue. Don't forget to configure your document's Sharing settings so that everyone has comment access. The idea of sharing the document in this way is not necessarily to proactively obtain feedback from the entire community; it is to make it possible for people to share the document with anyone in the community, whether they work for your employer or not, and whether you have personally shared the document with them yet or not. The template discusses how to create a shortlink for your design doc (flutter.dev/go/...). When creating the shortlink, remember to test the URL you are publishing in an incognito window! Googlers: Design docs must be created by non-corp accounts! See [Contributor Access](Contributor-access.md#fcontriborg-accounts) for details on getting `fcontrib.org` accounts if you don't want to use your personal GMail account. When you implement a design, document it in the source code in detail. The API documentation is the usual place where we document our designs. It's perfectly reasonable for API docs to be multiple pages long with subheadings (e.g. see the docs for [RenderBox](https://master-api.flutter.dev/flutter/rendering/RenderBox-class.html)!).<br />",
        "Purpose of Design Docs": "Purpose of design docs The Flutter project uses design docs as a tool for guiding discussions. Decisions are made in PRs, not in design docs. Approvals are given in PRs, not in design docs.<br />",
        "Soliciting Feedback": "Soliciting feedback If you wish to get feedback on your design doc, you have many options for doing so, depending on how much feedback you want:<br />- If there is an issue already filed on the topic, definitely put a link to the design doc there. People who have found the issue and want to get updates on the topic will have subscribed to the issue, so this is the most effective way to communicate with them.<br />- Post the link on Discord. You can post it to #hidden-chat to just get feedback from team members. You can post it to one or more of the #hackers-* channels if you want feedback from people who are interested in the general area. You can post it to the global #hackers channel if you want feedback from anyone interested in working on Flutter. If you really want feedback, you can post a request to #announcements and publish it to any server that is following ours.<br />- If you want feedback from the broad community, tweet out the link and let other team members know so that we can retweet it. Similarly, you can post the request to one of the Flutter reddit channels, such as r/FlutterDev.<br />- You can ask our developer relations (devrel) team to broadcast a request for comments. (Start by asking in #hackers-devrel; if nobody responds, ping Hixie on that channel.)<br />- You can ask our user experience researcher (UXR) team to study the proposal and potentially test it with real users, or collect relevant data from the next quarterly survey. (Start by asking in #hackers-devexp; if nobody responds, ping Hixie on that channel.)<br />- If you have commit access, you can ask to talk about the design doc at the next Dash Forum meeting (normally held on Tuesdays at 11am US west coast time). Ping Hixie on #hidden-chat to get on the schedule, or use the form to request to be added, the link for which is pinned in the #hidden-chat channel.<br />",
        "Getting Good Feedback": "How to get good feedback Often, you will solicit feedback, and get none. There are many causes of this. Maybe your proposal is unclear, and so people don't really know what to suggest. People are often reluctant to provide broad criticisms. Consider if you can improve the clarity of your design doc. Do you have a clear problem statement separate from your solution? Do you show example code of the problem? Do you have screenshots or diagrams of the problem? For your solution, do you start from first principles and explain it? Often it's easy to forget that your readers don't have the same context you do, so without a gentle introduction they'll get lost very quickly. Do you have sample code of your proposed solution(s)? Do you need more diagrams or screenshots? Ask someone you trust if they think your document is sufficiently clear. Maybe your proposal is too big for anyone to get their head around. Can it be split into smaller components, so that each one can be understood separately, before bringing all the pieces together into your grand design?<br />",
        "Encouraging Engagement": "Maybe everyone agrees. Consider leaving some intentionally sketchy details in your proposal to encourage people to engage! (This is a risky strategy, sometimes people end up liking your \"bad\" ideas...) Maybe your proposal is too obvious or uninteresting. Sometimes, a change is so uncontroversial and simple that frankly it would be better just to write the PR and submit it.<br />",
        "Content in Design Docs": "Content in design docs Screen captures The easiest way to capture videos for design docs is using macOS. Press Command+Shift+5 for a whole bunch of options. Diagrams As we use Google Docs for the text portion of design docs, the easiest way to draw diagrams is using Google Diagrams. Select `Insert` > `Drawing` > `New` to create a new diagram.<br />",
        "Prerequisites": "### Prerequisites<br />- Linux, macOS, or Windows<br />- `git` (used for source version control)<br />- An IDE, such as [Android Studio with the Flutter plugin](https://docs.flutter.dev/development/tools/android-studio) or [VS Code](https://docs.flutter.dev/development/tools/vs-code)<br />- Android platform tools<br />  - Mac: `brew install --cask android-platform-tools`<br />  - Linux: `sudo apt-get install android-tools-adb`<br />  Verify that `adb` is in your [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) (that `which adb` prints sensible output).<br />- Python (used by some of our tools)",
        "Set up your environment": "### Set up your environment<br />- Clone the flutter/flutter repo using either SSH or HTTPS (SSH is recommended, but requires a working [SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh) on your GitHub account):<br />  - SSH: `git clone git@github.com:flutter/flutter.git`<br />  - HTTPS: `git clone https://github.com/flutter/flutter.git`<br />- Change into the directory of the cloned repository and rename the origin remote to upstream:<br />  - `cd flutter`<br />  - `git remote rename origin upstream`<br />- [Fork the flutter/flutter repo](https://github.com/flutter/flutter/fork) into your own GitHub account.<br />- Add your fork as the origin remote to your local clone either using SSH or HTTPS (SSH is recommended, but requires a working [SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh) on your GitHub account) by replacing \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 with your GitHub account name:<br />  - SSH: `git remote add origin git@github.com:\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/flutter.git`<br />  - HTTPS: `git remote add origin https://github.com/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/flutter.git`",
        "Verify setup": "### Verify setup<br />- Verify the upstream and origin repository you've specified for your clone.<br />  - `git remote -v`<br />- Add the repo's `bin` directory to your [PATH](https://en.wikipedia.org/wiki/PATH_(variable)): e.g. on UNIX, using `export PATH=\"$PATH:$HOME/<path to flutter repository>/bin\"`<br />- If you already have a Flutter installation you will either need to remove it from your PATH, or use a full path whenever you are running `flutter` in this repository.",
        "Resolve version issues": "### Resolve version issues<br />If you have version solving errors when trying to run examples below, you are running a version of Flutter other than the one checked out here.<br />- `flutter update-packages`<br />  This will recursively fetch all the Dart packages that Flutter depends on.<br />  If version solving failed, try `git fetch upstream` to update Flutter versions before `flutter update-packages`.<br />Tip: If you plan on using IntelliJ as your IDE, then also run `flutter ide-config --overwrite` to create all of the IntelliJ configuration files so you can open the main flutter directory as a project and run examples from within the IDE.<br />Next steps:<br />- [Running examples](../examples/Running-examples.md), to see if your setup works.<br />- [The flutter tool](../tool/README.md), to learn about how the `flutter` command line tool works.<br />- [Style guide for Flutter repo](Style-guide-for-Flutter-repo.md), to learn how to write code for Flutter.<br />- [Tree hygiene](Tree-hygiene.md), to learn about how to submit patches.<br />- [Signing commits](Signing-commits.md), to configure your environment to securely sign your commits.",
        "Compiling the Engine": "If you've already built the engine and have the configuration set up but merely need a refresher on actually compiling the code, see [Compiling the engine](Compiling-the-engine.md).<br />If you are checking these instructions to refresh your memory and your fork of the engine is stale, make sure to merge up to HEAD before doing a `gclient sync`.",
        "Getting Dependencies": "Make sure you have the following dependencies available:<br />- A Linux, macOS, or Windows host<br />- Linux supports cross-compiling artifacts for Android and Fuchsia, but not iOS.<br />- macOS supports cross-compiling artifacts for Android and iOS.<br />- Windows doesn't support cross-compiling artifacts for any of Android, Fuchsia, or iOS.<br />- `git` (used for source version control).<br />- An ssh client (used to authenticate with GitHub).<br />- `python3` (used by many of our tools, including `gclient`).<br />- Chromium's [depot_tools](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up) (Which includes gclient)<br />- Add the `depot_tools` directory to the front of your `PATH`.<br />- On macOS and Linux: `curl` and `unzip` (used by `gclient sync`).<br />- On Linux: The `pkg-config` package.<br />- On Windows:<br />  - Visual Studio 2017 or later (required for non-Googlers only).<br />  - [Windows 10 SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/) (required for non-Googlers only). Be sure to install the \"Debugging Tools for Windows\" feature.<br />- On macOS:<br />  - Install the latest Xcode.<br />  - On Apple Silicon arm64 Macs, install the Rosetta translation environment by running `softwareupdate --install-rosetta`.<br />You do not need to install [Dart](https://www.dartlang.org/downloads/linux.html). A Dart toolchain is automatically downloaded as part of the \"Getting the source\" step. Similarly for the Android SDK, it is downloaded by the `gclient sync` step below.",
        "Getting the Source": "Run the following steps to set up your environment:<br />[!IMPORTANT] Non-Googler Windows users should set the following environment variables to point `depot_tools` to their Visual Studio installation directory:<br />- `DEPOT_TOOLS_WIN_TOOLCHAIN=0`<br />- `GYP_MSVS_OVERRIDE_PATH=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community`<br />- Use the path of your installation.<br />Clone the Flutter source code. As of late 2024, the engine source is part of the main [flutter/flutter repo](https://github.com/flutter/flutter). The convention is to fork this repo and point `origin` to your fork and `upstream` to `git@github.com:flutter/flutter.git`. See [Setting up the Framework development environment](https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#set-up-your-environment) for more.<br />[!IMPORTANT] On Windows, the following must be run as an Administrator due to [a known issue](https://github.com/flutter/flutter/issues/94580).<br />[Setup a .gclient file](../../../../../engine/README.md) in the repository root (the `flutter/flutter` repository root), and run `gclient sync`. The \"Engine Tool\" called `et` is useful when working with the engine.",
        "Engine Tool Path": "It is located in the [flutter/engine/src/flutter/bin](https://github.com/flutter/flutter/tree/0c3359df8c8342c8907316488b1404a216f215b6/engine/src/flutter/bin) directory. Add this to your `$PATH` in your `.rc` file: e.g. on UNIX, using `export PATH=/path/to/flutter/engine/src/flutter/bin:$PATH`.",
        "Additional Steps for Web Engine": "Amend the generated `.gclient` file in the root of the source directory to add the following:<br />```<br />solutions = [<br />  {<br />    # Same as above...<br />    \"custom_vars\": {<br />      \"download_emsdk\": True,<br />    },<br />  },<br />]<br />```<br />Now, run:<br />```<br />gclient sync<br />```",
        "Next Steps": "- [Compiling the engine](Compiling-the-engine.md) explains how to actually get builds, now that you have the code.<br />- [The flutter tool](https://github.com/flutter/flutter/blob/master/docs/tool/README.md) has a section explaining how to use custom engine builds.<br />- [Signing commits](https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md), to configure your environment to securely sign your commits.",
        "Editor Autocomplete Support": "Xcode [Objective-C++]<br />On Mac, you can simply use Xcode (e.g., `open out/host_debug_unopt/products.xcodeproj`).<br />VSCode with C/C++ Intellisense [C/C++]<br />VSCode can provide some IDE features using the [C/C++ extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools). It will provide basic support on install without needing any additional configuration. There will probably be some issues, like header not found errors and incorrect jump to definitions. Intellisense can also use our `compile_commands.json` for more robust functionality. Either symlink `src/out/compile_commands.json` to the project root at `src` or provide an absolute path to it in the `c_cpp_properties.json` config file. See [\"compile commands\" in the c_cpp_properties.json reference](https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference). This will likely resolve the basic issues mentioned above. For example, in `src/.vscode/settings.json`:<br />```<br />{<br />  \"clangd.path\": \"buildtools/mac-arm64/clang/bin/clangd\",<br />  \"clangd.arguments\": [<br />    \"--compile-commands-dir=out/host_debug_unopt_arm64\"<br />  ],<br />  \"clang-format.executable\": \"buildtools/mac-arm64/clang/bin/clang-format\"<br />}<br />```",
        "IDE Support for Java Code": "For adding IDE support to the Java code in the engine with VSCode, see . Zed Editor [Zed](https://zed.dev/) can be used to edit C++ code in the Engine. To enable analysis and auto-completion, symlink `src/out/compile_commands.json` to the project root at `src`. cquery/ccls (multiple editors) [C/C++/Objective-C++] Alternatively, [cquery](https://github.com/cquery-project/cquery) and a derivative [ccls](https://github.com/MaskRay/ccls) are highly scalable C/C++/Objective-C language server that supports IDE features like go-to-definition, call hierarchy, autocomplete, find reference etc that works reasonably well with our engine repo. They([https://github.com/cquery-project/cquery/wiki/Editor-configuration](https://github.com/cquery-project/cquery/wiki/Editor-configuration)) [supports](https://github.com/MaskRay/ccls/wiki/Editor-Configuration) editors like VSCode, emacs, vim etc. To set up:<br />- Install cquery<br />- `brew install cquery` or `brew install ccls` on osx; or<br />- [Build from source](https://github.com/cquery-project/cquery/wiki/Getting-started)<br />- Generate compile_commands.json which our GN tool already does such as via `src/flutter/tools/gn --ios --unoptimized`<br />- Install an editor extension such as [VSCode-cquery](https://marketplace.visualstudio.com/items?itemName=cquery-project.cquery) or [vscode-ccls](https://marketplace.visualstudio.com/items?itemName=ccls-project.ccls)<br />- VSCode-query and vscode-ccls requires the compile_commands.json to be at the project root. Copy or symlink `src/out/compile_commands.json` to `src/` or `src/flutter` depending on which folder you want to open.<br />- Follow [Setting up the extension](https://github.com/cquery-project/cquery/wiki/Visual-Studio-Code#setting-up-the-extension) to configure VSCode-query.",
        "Using VSCode for Android Embedding": "Using VSCode as an IDE for the Android Embedding [Java]<br />- Install the extensions vscjava.vscode-java-pack (Extension Pack for Java) and vscjava.vscode-java-dependency (Project Manager for Java).<br />- Right click on the `shell/platform/android` folder in the engine source and click on `Add Folder to Java Source Path`. This creates an anonymous workspace and turns those files from [\"syntax mode\"](https://code.visualstudio.com/docs/java/java-project#_syntax-mode) to \"compile mode\". At this point, you should see a lot of errors since none of the external imports are found.<br />- Find the \"Java Dependencies\" pane in your Explorer view. Use the \"Explorer: Focus on Java Dependencies View\" command if hidden.<br />- Refresh the view and find the \"flutter_*\" project. There should be a \"_/shell/platform/android\" source folder there.<br />- In the \"Referenced Libraries\" sibling node, click the + button, navigate to `engine/src/third_party/android_embedding_dependencies` and add the entire folder. This is the equivalent of adding<br />```<br />\"java.project.referencedLibraries\": [<br />  \"{path to engine}/src/third_party/android_embedding_dependencies/lib/**/*.jar\"<br />]<br />```<br />to your VSCode's settings.json for your user or for your workspace.<br />- If you previously had a `shell/platform/android/.classpath`, delete it.<br />Using Android Studio as an IDE for the Android Embedding [Java]<br />Alternatively, Android Studio can be used as an IDE for the Android Embedding Java code. See docs at [https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#editing-java-code](https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#editing-java-code) for instructions.",
        "VSCode Additional Configuration": "VSCode Additional Useful Configuration<br />- Create [snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets) for header files with [this configuration](https://github.com/chromium/chromium/blob/master/tools/vscode/settings.json5). This will let you use `hdr` keyboard macro to create the boiler plate header code. Also consider some of [these settings](https://github.com/chromium/chromium/blob/master/tools/vscode/settings.json5) and [more tips](https://chromium.googlesource.com/chromium/src/+show/lkgr/docs/vscode.md).<br />- To format GN files on save, [consider using this extension](https://marketplace.visualstudio.com/items?itemName=persidskiy.vscode-gnformat).",
        "Introduction#1": "This wiki is primarily aimed at engineers building or making contributions to Flutter.",
        "Getting Started#1": "If you are new to Flutter, then you will find more general information on the Flutter project, including tutorials and samples, on our website at [flutter.dev](https://flutter.dev).<br />For specific information about Flutter's APIs, consider our API reference which can be found at the [api.flutter.dev](https://api.flutter.dev/).<br />If you want to know what we're likely to do in the future, our [roadmap](./roadmap/Roadmap.md) may be of interest.<br />If you intend to contribute to Flutter, welcome! You are encouraged to start with [our contributor guide](../CONTRIBUTING.md), which helps onboard new team members.<br />It points to the most relevant pages on this wiki.<br />You are also invited to join our [Discord](./contributing/Chat.md) server.",
        "Notable Sections": "Index of notable sections:<br />- [Actionable bugs](./triage/README.md#what-makes-an-issue-actionable), and the closing of unactionable bugs<br />- [Breaking changes](./contributing/Tree-hygiene.md#handling-breaking-changes)<br />- [Cherrypick process](./releases/Flutter-Cherrypick-Process.md)<br />- [Closing issues](./contributing/issue_hygiene/README.md#closing-issues)<br />- [Dashboards](./infra/Dashboards.md)<br />- [Debugging a broken engine autoroll](./engine/Debugging-the-engine.md#bisecting-a-roll-failure)<br />- [Deprecations](./contributing/Tree-hygiene.md#deprecations)<br />- [Design documents](./contributing/Design-Documents.md)<br />- [Discord](./contributing/Chat.md)<br />- [Engineering Philosophy](./contributing/Style-guide-for-Flutter-repo.md#philosophy)<br />- [Flaky tests](./contributing/issue_hygiene/README.md#flaky-tests)<br />- [flutter.dev is down](./In-case-of-emergency.md)<br />- [Issue prioritization](./contributing/issue_hygiene/README.md#priorities)<br />- [Labels](./contributing/issue_hygiene/README.md#labels)<br />- [Milestones](./contributing/issue_hygiene/README.md#milestones)<br />- [Plugin compatibility policy](./contributing/Style-guide-for-Flutter-repo.md#plugin-compatibility)<br />- [Reviewing code](./contributing/Tree-hygiene.md#getting-a-code-review)<br />- [RFC process](./contributing/issue_hygiene/README.md#how-to-propose-a-specific-change)<br />- [Status of popular issues](./contributing/issue_hygiene/Popular-issues.md)<br />- [Style guide for Flutter repo](./contributing/Style-guide-for-Flutter-repo.md)<br />- [Submitting code, process for](./contributing/Tree-hygiene.md#overview)<br />- [Support levels, definitions of](./about/Values.md#support)<br />- [Symbolicating stack traces](./engine/Crashes.md)<br />- [Threading in the Engine](./about/The-Engine-architecture.md#threading)<br />- [When will my bug be fixed?](./contributing/issue_hygiene/README.md#when-will-my-bug-be-fixed)<br />- [Security best practices](./infra/Security.md#best-practices)",
        "Discord Communication#1#1#1": "### Chatting on Discord<br />The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148). [This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH). Please do not share either link directly, instead share links to this page. The server is open to the public, though some channels are intended only for people who are actively contributing. See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there). We recommend you use the same display name on Discord and GitHub. (Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on. When in doubt, remember: our server has Dash as an icon!)",
        "Channel Overview#1#1#1": "### Existing channels<br />We have different channels for different purposes (this list is not exhaustive):<br />**Channel Description Participants**<br />#welcome Welcome message. Only admins can post. Anyone can read.<br />#announcements Flutter announcements (e.g. breaking changes). Only team members can post (but not frequently). Anyone can read.<br />#server-support Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues. Anyone.<br />#general Chat about anything related to Flutter. Anyone.<br />#help People asking for our help. Anyone.<br />#package-authors For people who develop Flutter packages. People writing packages for [pub.dev](https://pub.dev/).<br />#dart Questions about the Dart language. Anyone.<br />#tree-status Announcements about whether the trees are open or closed. Anyone, but discussion should happen elsewhere.<br />#hackers Chat about anything related to Flutter. Flutter contributors. Anyone can watch.<br />#hackers-* Chat specifically about foo, where foo is something to do with Flutter development, for example \"engine\", \"framework\", \"desktop\", \"devtools\", etc. Flutter contributors. Anyone can watch.<br />#hackers-dart Questions about the Dart language. Flutter contributors. Anyone can watch.<br />#hackers-new New people to the team and people who want to help them. Flutter contributors. Anyone can watch.<br />#hackers-triage For use while triaging bugs. Flutter contributors. Anyone can watch.<br />#hidden-chat Chat about anything related to Flutter. Flutter contributors only. Not public.<br />general (voice) Talk (audio) about anything related to Flutter. Anyone.<br />team (voice) Talk (audio) that is only open to team members. Flutter contributors. The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the \"team member\" role to see them.",
        "Creating New Channels#1#1#1": "### New channels<br />If you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support. If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads. If you would like a channel for subcommunities, e.g. #women or #china, that should be fine. (Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.) For practical reasons, we do not use Discord for chat groups limited to specific customers. For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord. Each channel describes its topic in the channel description. Please read the channel description before posting in a channel, to make sure you're using the appropriate one.",
        "Community Policies#1#1#1": "### Policies<br />Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter. The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing. If you want help with your app, ask in #help instead. If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md). See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the \"team\" role. Please don't direct-message people unless they are comfortable with it (ask publicly first). You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.",
        "Discord Features#1#1#1": "### Discord features<br />**Threading**<br />Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.<br />**Status**<br />You can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.",
        "Design Documentation#1#1#1": "### Design documents<br />This page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).",
        "Discord Communication#1#1#1#1": "### Chatting on Discord<br />The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148). [This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH). Please do not share either link directly, instead share links to this page. The server is open to the public, though some channels are intended only for people who are actively contributing. See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there). We recommend you use the same display name on Discord and GitHub. (Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on. When in doubt, remember: our server has Dash as an icon!)",
        "Channel Overview#1#1#1#1": "### Existing channels<br />We have different channels for different purposes (this list is not exhaustive):<br />**Channel Description Participants**<br />#welcome Welcome message. Only admins can post. Anyone can read.<br />#announcements Flutter announcements (e.g. breaking changes). Only team members can post (but not frequently). Anyone can read.<br />#server-support Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues. Anyone.<br />#general Chat about anything related to Flutter. Anyone.<br />#help People asking for our help. Anyone.<br />#package-authors For people who develop Flutter packages. People writing packages for [pub.dev](https://pub.dev/).<br />#dart Questions about the Dart language. Anyone.<br />#tree-status Announcements about whether the trees are open or closed. Anyone, but discussion should happen elsewhere.<br />#hackers Chat about anything related to Flutter. Flutter contributors. Anyone can watch.<br />#hackers-* Chat specifically about foo, where foo is something to do with Flutter development, for example \"engine\", \"framework\", \"desktop\", \"devtools\", etc. Flutter contributors. Anyone can watch.<br />#hackers-dart Questions about the Dart language. Flutter contributors. Anyone can watch.<br />#hackers-new New people to the team and people who want to help them. Flutter contributors. Anyone can watch.<br />#hackers-triage For use while triaging bugs. Flutter contributors. Anyone can watch.<br />#hidden-chat Chat about anything related to Flutter. Flutter contributors only. Not public.<br />general (voice) Talk (audio) about anything related to Flutter. Anyone.<br />team (voice) Talk (audio) that is only open to team members. Flutter contributors. The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the \"team member\" role to see them.",
        "Creating New Channels#1#1#1#1": "### New channels<br />If you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support. If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads. If you would like a channel for subcommunities, e.g. #women or #china, that should be fine. (Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.) For practical reasons, we do not use Discord for chat groups limited to specific customers. For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord. Each channel describes its topic in the channel description. Please read the channel description before posting in a channel, to make sure you're using the appropriate one.",
        "Community Policies#1#1#1#1": "### Policies<br />Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter. The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing. If you want help with your app, ask in #help instead. If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md). See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the \"team\" role. Please don't direct-message people unless they are comfortable with it (ask publicly first). You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.",
        "Discord Features#1#1#1#1": "### Discord features<br />**Threading**<br />Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.<br />**Status**<br />You can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.",
        "Design Documentation#1#1#1#1": "### Design documents<br />This page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md).",
        "Discord Communication#1#1#1#1#1": "### Chatting on Discord<br />The Flutter team uses a [Discord server](https://discord.com/channels/608014603317936148). [This is the invite link for Flutter's Discord server](https://discord.gg/ht477J5PyH). Please do not share either link directly, instead share links to this page. The server is open to the public, though some channels are intended only for people who are actively contributing. See the #welcome channel for instructions on posting to the server (you won't be able to see the channels until you acknowledge the rules there). We recommend you use the same display name on Discord and GitHub. (Our Flutter Discord server is unrelated to the [r/FlutterDev Discord server](https://www.reddit.com/r/FlutterDev/), which is where the r/FlutterDev community shares their apps, discusses Flutter, and so on. When in doubt, remember: our server has Dash as an icon!)",
        "Channel Overview#1#1#1#1#1": "### Existing channels<br />We have different channels for different purposes (this list is not exhaustive):<br />**Channel Description Participants**<br />#welcome Welcome message. Only admins can post. Anyone can read.<br />#announcements Flutter announcements (e.g. breaking changes). Only team members can post (but not frequently). Anyone can read.<br />#server-support Forum for asking for your role to be changed, for code of conduct violations to be raised, and for other administrative issues. Anyone.<br />#general Chat about anything related to Flutter. Anyone.<br />#help People asking for our help. Anyone.<br />#package-authors For people who develop Flutter packages. People writing packages for [pub.dev](https://pub.dev/).<br />#dart Questions about the Dart language. Anyone.<br />#tree-status Announcements about whether the trees are open or closed. Anyone, but discussion should happen elsewhere.<br />#hackers Chat about anything related to Flutter. Flutter contributors. Anyone can watch.<br />#hackers-* Chat specifically about foo, where foo is something to do with Flutter development, for example \"engine\", \"framework\", \"desktop\", \"devtools\", etc. Flutter contributors. Anyone can watch.<br />#hackers-dart Questions about the Dart language. Flutter contributors. Anyone can watch.<br />#hackers-new New people to the team and people who want to help them. Flutter contributors. Anyone can watch.<br />#hackers-triage For use while triaging bugs. Flutter contributors. Anyone can watch.<br />#hidden-chat Chat about anything related to Flutter. Flutter contributors only. Not public.<br />general (voice) Talk (audio) about anything related to Flutter. Anyone.<br />team (voice) Talk (audio) that is only open to team members. Flutter contributors. The #hidden-chat and #team channels are not publicly-readable, you have to be a member of the \"team member\" role to see them.",
        "Creating New Channels#1#1#1#1#1": "### New channels<br />If you need a new channel, first just use #general or #hackers, or a thread in one of those channels; if the conversation lasts more than a day, ask for a channel in #server-support. If you find your team's channel is hard to follow due to having too many topics discussed at once, ask for a new channel, or use threads. If you would like a channel for subcommunities, e.g. #women or #china, that should be fine. (Subcommunities that are already overrepresented in the main channels, e.g. #english-speakers, are less likely to be good candidates for dedicated channels.) For practical reasons, we do not use Discord for chat groups limited to specific customers. For example, if your company wants a private discussion channel with the Flutter team, we would not use Discord. Each channel describes its topic in the channel description. Please read the channel description before posting in a channel, to make sure you're using the appropriate one.",
        "Community Policies#1#1#1#1#1": "### Policies<br />Our [code of conduct](https://github.com/flutter/flutter/blob/main/CODE_OF_CONDUCT.md) applies to the Discord server, as it does to any communications involving Flutter. The #hackers-* channels are visible to anyone, but please only post in those channels if you are actively contributing. If you want help with your app, ask in #help instead. If you want to learn how to contribute, have a look at our [contributing guide](https://github.com/flutter/flutter/blob/main/CONTRIBUTING.md). See the [contributor access](Contributor-access.md) wiki page for details on becoming a member of the \"team\" role. Please don't direct-message people unless they are comfortable with it (ask publicly first). You can disable direct messages on this server by changing your Privacy settings for the server, or on a global basis by changing your Privacy & Safety user settings.",
        "Discord Features#1#1#1#1#1": "### Discord features<br />**Threading**<br />Discord has both actual threads (temporary new channels) and a threadingish feature called [Replies](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) that lets you tie messages to earlier messages and notify the original commenter.<br />**Status**<br />You can [change your status](https://support.discord.com/hc/en-us/articles/360035407531-Custom-Status) (online, away, custom messages) by clicking on your avatar in Discord.",
        "Design Documentation#1#1#1#1#1": "### Design documents<br />This page used to discuss how to create design docs, but that content is now on its own page: [Design documents](Design-Documents.md)."
        ,"Running Examples": "To run an example, switch to that example's directory, and use `flutter run`. <br />Make sure you have an emulator running, or a device connected over USB and debugging enabled on that device. <br /> * `cd examples/hello_world` <br />* `flutter run`  <br />\nYou can also specify a particular Dart file to run if you want to run an example that doesn't have a `lib/main.dart` file using the `-t` command-line option. For example, to run the `widgets/spinning_square.dart` example in the [examples/layers](https://github.com/flutter/flutter/tree/main/examples/layers) directory on a connected Android device, from that directory you would run: `flutter run -t widgets/spinning_square.dart`"
    },
    "flow": [
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "Getting Started"
                },
                {
                    "source": "Getting Started",
                    "target": "Code of Conduct",
                    "edge_label": "CODE_OF_CONDUCT.md"
                },
                {
                    "source": "Code of Conduct",
                    "target": "Conflict Resolution",
                    "edge_label": "CODE_OF_CONDUCT.md"
                },
                {
                    "source": "Conflict Resolution",
                    "target": "Questions",
                    "edge_label": "CODE_OF_CONDUCT.md"
                },
                {
                    "source": "Getting Started",
                    "target": "Core Values",
                    "edge_label": "./docs/about/Values.md"
                },
                {
                    "source": "Core Values",
                    "target": "Openness",
                    "edge_label": "./docs/about/Values.md"
                },
                {
                    "source": "Openness",
                    "target": "Maintaining Quality",
                    "edge_label": "./docs/about/Values.md"
                },
                {
                    "source": "Maintaining Quality",
                    "target": "Having Fun",
                    "edge_label": "./docs/about/Values.md"
                },
                {
                    "source": "Having Fun",
                    "target": "Support",
                    "edge_label": "./docs/about/Values.md"
                },
                {
                    "source": "Support",
                    "target": "Resources",
                    "edge_label": "./docs/about/Values.md"
                },
                {
                    "source": "Getting Started",
                    "target": "Discord Communication",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Communication",
                    "target": "Channel Overview",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Channel Overview",
                    "target": "Creating New Channels",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Creating New Channels",
                    "target": "Community Policies",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Community Policies",
                    "target": "Discord Features",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Features",
                    "target": "Design Documentation",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Getting Started",
                    "target": "Commit Access",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Commit Access",
                    "target": "Responsibilities",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Responsibilities",
                    "target": "Documentation",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Documentation",
                    "target": "Privileges",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Privileges",
                    "target": "Process",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Process",
                    "target": "Inactivity",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Inactivity",
                    "target": "Access Rights",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Access Rights",
                    "target": "fcontrib.org Accounts",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "fcontrib.org Accounts",
                    "target": "Review Teams",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Review Teams",
                    "target": "Pusher Permissions",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                }
            ],
            "sequence": "Getting Started"
        },
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "Issue Triage"
                },
                {
                    "source": "Issue Triage",
                    "target": "Primary Issue Triage",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Primary Issue Triage",
                    "target": "Artifacts",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Artifacts",
                    "target": "Actionable Issues",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Actionable Issues",
                    "target": "Unactionable Bugs",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Unactionable Bugs",
                    "target": "Duplicates",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Duplicates",
                    "target": "Requests for Help",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Requests for Help",
                    "target": "Labels",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Labels",
                    "target": "Team Assignment",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Team Assignment",
                    "target": "Additional Labels",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Additional Labels",
                    "target": "Triage Process for Teams",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Triage Process for Teams",
                    "target": "Team Issue Triage",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Team Issue Triage",
                    "target": "Checklist for Cleaning Up Issues",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Checklist for Cleaning Up Issues",
                    "target": "PR Triage Process",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "PR Triage Process",
                    "target": "Links for Teams",
                    "edge_label": "./docs/triage/README.md"
                },
                {
                    "source": "Issue Triage",
                    "target": "Commit Access#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Commit Access#1",
                    "target": "Responsibilities#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Responsibilities#1",
                    "target": "Documentation#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Documentation#1",
                    "target": "Privileges#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Privileges#1",
                    "target": "Process#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Process#1",
                    "target": "Inactivity#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Inactivity#1",
                    "target": "Access Rights#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Access Rights#1",
                    "target": "fcontrib.org Accounts#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "fcontrib.org Accounts#1",
                    "target": "Review Teams#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Review Teams#1",
                    "target": "Pusher Permissions#1",
                    "edge_label": "./docs/contributing/Contributor-access.md"
                },
                {
                    "source": "Issue Triage",
                    "target": "Code of Conduct#1",
                    "edge_label": "CODE_OF_CONDUCT.md"
                },
                {
                    "source": "Code of Conduct#1",
                    "target": "Conflict Resolution#1",
                    "edge_label": "CODE_OF_CONDUCT.md"
                },
                {
                    "source": "Conflict Resolution#1",
                    "target": "Questions#1",
                    "edge_label": "CODE_OF_CONDUCT.md"
                },
                {
                    "source": "Issue Triage",
                    "target": "Issue Management",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Issue Management",
                    "target": "Providing Test Cases",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Providing Test Cases",
                    "target": "Locking Issues",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Locking Issues",
                    "target": "Prioritization",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Prioritization",
                    "target": "Voting and Labels",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Voting and Labels",
                    "target": "Assigning Issues",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Assigning Issues",
                    "target": "Filing Bugs",
                    "edge_label": "./docs/contributing/issue_hygiene/README.md"
                },
                {
                    "source": "Issue Triage",
                    "target": "Discord Communication#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Communication#1",
                    "target": "Channel Overview#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Channel Overview#1",
                    "target": "Creating New Channels#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Creating New Channels#1",
                    "target": "Community Policies#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Community Policies#1",
                    "target": "Discord Features#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Features#1",
                    "target": "Design Documentation#1",
                    "edge_label": "./docs/contributing/Chat.md"
                }
            ],
            "sequence": "Issue Triage"
        },
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "Quality Assurance"
                },
                {
                    "source": "Quality Assurance",
                    "target": "Announcing Betas",
                    "edge_label": "./docs/releases/Quality-Assurance.md"
                },
                {
                    "source": "Announcing Betas",
                    "target": "Getting a Beta Build",
                    "edge_label": "./docs/releases/Quality-Assurance.md"
                },
                {
                    "source": "Getting a Beta Build",
                    "target": "Testing a Beta Build",
                    "edge_label": "./docs/releases/Quality-Assurance.md"
                },
                {
                    "source": "Testing a Beta Build",
                    "target": "Testing Betas",
                    "edge_label": "./docs/releases/Quality-Assurance.md"
                },
                {
                    "source": "Quality Assurance",
                    "target": "Discord Communication#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Communication#1#1",
                    "target": "Channel Overview#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Channel Overview#1#1",
                    "target": "Creating New Channels#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Creating New Channels#1#1",
                    "target": "Community Policies#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Community Policies#1#1",
                    "target": "Discord Features#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Features#1#1",
                    "target": "Design Documentation#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                }
            ],
            "sequence": "Quality Assurance"
        },
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "Development"
                },
                {
                    "source": "Development",
                    "target": "Introduction",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Introduction",
                    "target": "Forking and Filing Issues",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Forking and Filing Issues",
                    "target": "Design Discussion",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Design Discussion",
                    "target": "Implementing Changes",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Implementing Changes",
                    "target": "Testing and Review",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Testing and Review",
                    "target": "Using Git",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Using Git",
                    "target": "Code Review",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Code Review",
                    "target": "Landing a Patch",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Landing a Patch",
                    "target": "Handling Regressions",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Handling Regressions",
                    "target": "Handling Interdependent Changes",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Handling Interdependent Changes",
                    "target": "Handling Breaking Changes",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Handling Breaking Changes",
                    "target": "Deprecations",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Deprecations",
                    "target": "Skipped Tests",
                    "edge_label": "./docs/contributing/Tree-hygiene.md"
                },
                {
                    "source": "Development",
                    "target": "Creating a Design Doc",
                    "edge_label": "./docs/contributing/Design-Documents.md"
                },
                {
                    "source": "Creating a Design Doc",
                    "target": "Purpose of Design Docs",
                    "edge_label": "./docs/contributing/Design-Documents.md"
                },
                {
                    "source": "Purpose of Design Docs",
                    "target": "Soliciting Feedback",
                    "edge_label": "./docs/contributing/Design-Documents.md"
                },
                {
                    "source": "Soliciting Feedback",
                    "target": "Getting Good Feedback",
                    "edge_label": "./docs/contributing/Design-Documents.md"
                },
                {
                    "source": "Getting Good Feedback",
                    "target": "Encouraging Engagement",
                    "edge_label": "./docs/contributing/Design-Documents.md"
                },
                {
                    "source": "Encouraging Engagement",
                    "target": "Content in Design Docs",
                    "edge_label": "./docs/contributing/Design-Documents.md"
                },
                {
                    "source": "Development",
                    "target": "Prerequisites",
                    "edge_label": "./docs/contributing/Setting-up-the-Framework-development-environment.md"
                },
                {
                    "source": "Prerequisites",
                    "target": "Set up your environment",
                    "edge_label": "./docs/contributing/Setting-up-the-Framework-development-environment.md"
                },
                {
                    "source": "Set up your environment",
                    "target": "Verify setup",
                    "edge_label": "./docs/contributing/Setting-up-the-Framework-development-environment.md"
                },
                {
                    "source": "Verify setup",
                    "target": "Resolve version issues",
                    "edge_label": "./docs/contributing/Setting-up-the-Framework-development-environment.md"
                },
                {
                    "source": "Resolve version issues",
                    "target": "Running Examples",
                    "edge_label": "./docs/contributing/Setting-up-the-Framework-development-environment.md"
                },
                {
                    "source": "Development",
                    "target": "Compiling the Engine",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Compiling the Engine",
                    "target": "Getting Dependencies",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Getting Dependencies",
                    "target": "Getting the Source",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Getting the Source",
                    "target": "Engine Tool Path",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Engine Tool Path",
                    "target": "Additional Steps for Web Engine",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Additional Steps for Web Engine",
                    "target": "Next Steps",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Next Steps",
                    "target": "Editor Autocomplete Support",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Editor Autocomplete Support",
                    "target": "IDE Support for Java Code",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "IDE Support for Java Code",
                    "target": "Using VSCode for Android Embedding",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Using VSCode for Android Embedding",
                    "target": "VSCode Additional Configuration",
                    "edge_label": "./engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md"
                },
                {
                    "source": "Development",
                    "target": "Introduction#1",
                    "edge_label": "./docs/README.md"
                },
                {
                    "source": "Introduction#1",
                    "target": "Getting Started#1",
                    "edge_label": "./docs/README.md"
                },
                {
                    "source": "Getting Started#1",
                    "target": "Notable Sections",
                    "edge_label": "./docs/README.md"
                }
            ],
            "sequence": "Development"
        },
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "Outreach"
                },
                {
                    "source": "Outreach",
                    "target": "Discord Communication#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Communication#1#1#1",
                    "target": "Channel Overview#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Channel Overview#1#1#1",
                    "target": "Creating New Channels#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Creating New Channels#1#1#1",
                    "target": "Community Policies#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Community Policies#1#1#1",
                    "target": "Discord Features#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Features#1#1#1",
                    "target": "Design Documentation#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                }
            ],
            "sequence": "Outreach"
        },
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "API Documentation"
                },
                {
                    "source": "API Documentation",
                    "target": "Discord Communication#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Communication#1#1#1#1",
                    "target": "Channel Overview#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Channel Overview#1#1#1#1",
                    "target": "Creating New Channels#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Creating New Channels#1#1#1#1",
                    "target": "Community Policies#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Community Policies#1#1#1#1",
                    "target": "Discord Features#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Features#1#1#1#1",
                    "target": "Design Documentation#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                }
            ],
            "sequence": "API Documentation"
        },
        {
            "edges": [
                {
                    "source": "Contributing to flutter",
                    "target": "Releases and Social Events"
                },
                {
                    "source": "Releases and Social Events",
                    "target": "Discord Communication#1#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Communication#1#1#1#1#1",
                    "target": "Channel Overview#1#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Channel Overview#1#1#1#1#1",
                    "target": "Creating New Channels#1#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Creating New Channels#1#1#1#1#1",
                    "target": "Community Policies#1#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Community Policies#1#1#1#1#1",
                    "target": "Discord Features#1#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                },
                {
                    "source": "Discord Features#1#1#1#1#1",
                    "target": "Design Documentation#1#1#1#1#1",
                    "edge_label": "./docs/contributing/Chat.md"
                }
            ],
            "sequence": "Releases and Social Events"
        }
    ]
}